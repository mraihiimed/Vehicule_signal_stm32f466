
CAN_COMMUNICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004054  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004224  08004224  00005224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042b8  080042b8  00006070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080042b8  080042b8  000052b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042c0  080042c0  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042c0  080042c0  000052c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042c4  080042c4  000052c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080042c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000070  08004338  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08004338  000062b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0a6  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f9  00000000  00000000  00011146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  00013240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000719  00000000  00000000  00013bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022849  00000000  00000000  000142c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cab2  00000000  00000000  00036b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccce7  00000000  00000000  000435c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001102ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c90  00000000  00000000  001102f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00112f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800420c 	.word	0x0800420c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800420c 	.word	0x0800420c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005e0:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <MX_CAN1_Init+0x64>)
 80005e2:	4a18      	ldr	r2, [pc, #96]	@ (8000644 <MX_CAN1_Init+0x68>)
 80005e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80005e6:	4b16      	ldr	r3, [pc, #88]	@ (8000640 <MX_CAN1_Init+0x64>)
 80005e8:	2205      	movs	r2, #5
 80005ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005ec:	4b14      	ldr	r3, [pc, #80]	@ (8000640 <MX_CAN1_Init+0x64>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005f2:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <MX_CAN1_Init+0x64>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <MX_CAN1_Init+0x64>)
 80005fa:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80005fe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000600:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <MX_CAN1_Init+0x64>)
 8000602:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000606:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000608:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <MX_CAN1_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800060e:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <MX_CAN1_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <MX_CAN1_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800061a:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <MX_CAN1_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <MX_CAN1_Init+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <MX_CAN1_Init+0x64>)
 8000628:	2200      	movs	r2, #0
 800062a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	@ (8000640 <MX_CAN1_Init+0x64>)
 800062e:	f000 fc25 	bl	8000e7c <HAL_CAN_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000638:	f000 f9c0 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000008c 	.word	0x2000008c
 8000644:	40006400 	.word	0x40006400

08000648 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	@ 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1d      	ldr	r2, [pc, #116]	@ (80006dc <HAL_CAN_MspInit+0x94>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d134      	bne.n	80006d4 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <HAL_CAN_MspInit+0x98>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000672:	4a1b      	ldr	r2, [pc, #108]	@ (80006e0 <HAL_CAN_MspInit+0x98>)
 8000674:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000678:	6413      	str	r3, [r2, #64]	@ 0x40
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <HAL_CAN_MspInit+0x98>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <HAL_CAN_MspInit+0x98>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4a14      	ldr	r2, [pc, #80]	@ (80006e0 <HAL_CAN_MspInit+0x98>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	@ 0x30
 8000696:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <HAL_CAN_MspInit+0x98>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006b4:	2309      	movs	r3, #9
 80006b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	4809      	ldr	r0, [pc, #36]	@ (80006e4 <HAL_CAN_MspInit+0x9c>)
 80006c0:	f001 fb54 	bl	8001d6c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2100      	movs	r1, #0
 80006c8:	2014      	movs	r0, #20
 80006ca:	f001 fb18 	bl	8001cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006ce:	2014      	movs	r0, #20
 80006d0:	f001 fb31 	bl	8001d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006d4:	bf00      	nop
 80006d6:	3728      	adds	r7, #40	@ 0x28
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40006400 	.word	0x40006400
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020000 	.word	0x40020000

080006e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	4b26      	ldr	r3, [pc, #152]	@ (800079c <MX_GPIO_Init+0xb4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a25      	ldr	r2, [pc, #148]	@ (800079c <MX_GPIO_Init+0xb4>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b23      	ldr	r3, [pc, #140]	@ (800079c <MX_GPIO_Init+0xb4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <MX_GPIO_Init+0xb4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a1e      	ldr	r2, [pc, #120]	@ (800079c <MX_GPIO_Init+0xb4>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <MX_GPIO_Init+0xb4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b18      	ldr	r3, [pc, #96]	@ (800079c <MX_GPIO_Init+0xb4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a17      	ldr	r2, [pc, #92]	@ (800079c <MX_GPIO_Init+0xb4>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b15      	ldr	r3, [pc, #84]	@ (800079c <MX_GPIO_Init+0xb4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2120      	movs	r1, #32
 8000756:	4812      	ldr	r0, [pc, #72]	@ (80007a0 <MX_GPIO_Init+0xb8>)
 8000758:	f001 fc9c 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800075c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000762:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4619      	mov	r1, r3
 8000772:	480c      	ldr	r0, [pc, #48]	@ (80007a4 <MX_GPIO_Init+0xbc>)
 8000774:	f001 fafa 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000778:	2320      	movs	r3, #32
 800077a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_GPIO_Init+0xb8>)
 8000790:	f001 faec 	bl	8001d6c <HAL_GPIO_Init>

}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020800 	.word	0x40020800

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ac:	f000 fad0 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 f892 	bl	80008d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f7ff ff98 	bl	80006e8 <MX_GPIO_Init>
  MX_CAN1_Init();
 80007b8:	f7ff ff10 	bl	80005dc <MX_CAN1_Init>
  MX_USART2_UART_Init();
 80007bc:	f000 fa2c 	bl	8000c18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Set up CAN filter to receive messages with ID 0x541
  sFilterConfig.FilterBank = 0;
 80007c0:	4b22      	ldr	r3, [pc, #136]	@ (800084c <main+0xa4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80007c6:	4b21      	ldr	r3, [pc, #132]	@ (800084c <main+0xa4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	@ (800084c <main+0xa4>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;         // Receive ID 0x123
 80007d2:	4b1e      	ldr	r3, [pc, #120]	@ (800084c <main+0xa4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80007d8:	4b1c      	ldr	r3, [pc, #112]	@ (800084c <main+0xa4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;  // Accept all
 80007de:	4b1b      	ldr	r3, [pc, #108]	@ (800084c <main+0xa4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80007e4:	4b19      	ldr	r3, [pc, #100]	@ (800084c <main+0xa4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80007ea:	4b18      	ldr	r3, [pc, #96]	@ (800084c <main+0xa4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80007f0:	4b16      	ldr	r3, [pc, #88]	@ (800084c <main+0xa4>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;           // Only required if CAN2 is used
 80007f6:	4b15      	ldr	r3, [pc, #84]	@ (800084c <main+0xa4>)
 80007f8:	220e      	movs	r2, #14
 80007fa:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80007fc:	4913      	ldr	r1, [pc, #76]	@ (800084c <main+0xa4>)
 80007fe:	4814      	ldr	r0, [pc, #80]	@ (8000850 <main+0xa8>)
 8000800:	f000 fc38 	bl	8001074 <HAL_CAN_ConfigFilter>

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8000804:	4911      	ldr	r1, [pc, #68]	@ (800084c <main+0xa4>)
 8000806:	4812      	ldr	r0, [pc, #72]	@ (8000850 <main+0xa8>)
 8000808:	f000 fc34 	bl	8001074 <HAL_CAN_ConfigFilter>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <main+0x6e>
      Error_Handler();
 8000812:	f000 f8d3 	bl	80009bc <Error_Handler>
  }

  // Start CAN
  HAL_CAN_Start(&hcan1);
 8000816:	480e      	ldr	r0, [pc, #56]	@ (8000850 <main+0xa8>)
 8000818:	f000 fd0a 	bl	8001230 <HAL_CAN_Start>

  // Activate CAN notification to handle messages
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800081c:	2102      	movs	r1, #2
 800081e:	480c      	ldr	r0, [pc, #48]	@ (8000850 <main+0xa8>)
 8000820:	f000 ff3c 	bl	800169c <HAL_CAN_ActivateNotification>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
       {
	    // Send CAN message
	    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000824:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <main+0xac>)
 8000826:	4a0c      	ldr	r2, [pc, #48]	@ (8000858 <main+0xb0>)
 8000828:	490c      	ldr	r1, [pc, #48]	@ (800085c <main+0xb4>)
 800082a:	4809      	ldr	r0, [pc, #36]	@ (8000850 <main+0xa8>)
 800082c:	f000 fd44 	bl	80012b8 <HAL_CAN_AddTxMessage>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <main+0x92>
	    {
	      Error_Handler();
 8000836:	f000 f8c1 	bl	80009bc <Error_Handler>
	    }
	    // Blink LED on PA5
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800083a:	2120      	movs	r1, #32
 800083c:	4808      	ldr	r0, [pc, #32]	@ (8000860 <main+0xb8>)
 800083e:	f001 fc42 	bl	80020c6 <HAL_GPIO_TogglePin>
	     //Wait 1 second
	    HAL_Delay(1000); // just idle loop
 8000842:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000846:	f000 faf5 	bl	8000e34 <HAL_Delay>
	    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800084a:	e7eb      	b.n	8000824 <main+0x7c>
 800084c:	200000f4 	.word	0x200000f4
 8000850:	2000008c 	.word	0x2000008c
 8000854:	200000f0 	.word	0x200000f0
 8000858:	20000000 	.word	0x20000000
 800085c:	200000b4 	.word	0x200000b4
 8000860:	40020000 	.word	0x40020000

08000864 <HAL_CAN_RxFifo0MsgPendingCallback>:
	  }
  /* USER CODE END 3 */
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800086c:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800086e:	4a15      	ldr	r2, [pc, #84]	@ (80008c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000870:	2100      	movs	r1, #0
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f000 fdf0 	bl	8001458 <HAL_CAN_GetRxMessage>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // blink LED on receive
 8000878:	2120      	movs	r1, #32
 800087a:	4813      	ldr	r0, [pc, #76]	@ (80008c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800087c:	f001 fc23 	bl	80020c6 <HAL_GPIO_TogglePin>

  printf("RX CAN ID=0x%X, Data=", RxHeader.StdId);
 8000880:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4619      	mov	r1, r3
 8000886:	4811      	ldr	r0, [pc, #68]	@ (80008cc <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000888:	f002 fdf6 	bl	8003478 <iprintf>
  for (int i = 0; i < RxHeader.DLC; i++)
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	e00a      	b.n	80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
  {
    printf("%02X ", RxData[i]);
 8000892:	4a0b      	ldr	r2, [pc, #44]	@ (80008c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4413      	add	r3, r2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4619      	mov	r1, r3
 800089c:	480c      	ldr	r0, [pc, #48]	@ (80008d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800089e:	f002 fdeb 	bl	8003478 <iprintf>
  for (int i = 0; i < RxHeader.DLC; i++)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	3301      	adds	r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80008aa:	691a      	ldr	r2, [r3, #16]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d8ef      	bhi.n	8000892 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
  }
  printf("\r\n");
 80008b2:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80008b4:	f002 fe48 	bl	8003548 <puts>
}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200000e8 	.word	0x200000e8
 80008c4:	200000cc 	.word	0x200000cc
 80008c8:	40020000 	.word	0x40020000
 80008cc:	08004224 	.word	0x08004224
 80008d0:	0800423c 	.word	0x0800423c
 80008d4:	08004244 	.word	0x08004244

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b094      	sub	sp, #80	@ 0x50
 80008dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	2234      	movs	r2, #52	@ 0x34
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 ff0e 	bl	8003708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	4b2c      	ldr	r3, [pc, #176]	@ (80009b4 <SystemClock_Config+0xdc>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000904:	4a2b      	ldr	r2, [pc, #172]	@ (80009b4 <SystemClock_Config+0xdc>)
 8000906:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800090a:	6413      	str	r3, [r2, #64]	@ 0x40
 800090c:	4b29      	ldr	r3, [pc, #164]	@ (80009b4 <SystemClock_Config+0xdc>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000918:	2300      	movs	r3, #0
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	4b26      	ldr	r3, [pc, #152]	@ (80009b8 <SystemClock_Config+0xe0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a25      	ldr	r2, [pc, #148]	@ (80009b8 <SystemClock_Config+0xe0>)
 8000922:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	4b23      	ldr	r3, [pc, #140]	@ (80009b8 <SystemClock_Config+0xe0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000934:	2301      	movs	r3, #1
 8000936:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000938:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800093c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093e:	2302      	movs	r3, #2
 8000940:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000942:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000946:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000948:	2304      	movs	r3, #4
 800094a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800094c:	23b4      	movs	r3, #180	@ 0xb4
 800094e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000950:	2302      	movs	r3, #2
 8000952:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000954:	2302      	movs	r3, #2
 8000956:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000958:	2302      	movs	r3, #2
 800095a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4618      	mov	r0, r3
 8000962:	f001 ff65 	bl	8002830 <HAL_RCC_OscConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800096c:	f000 f826 	bl	80009bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000970:	f001 fbc4 	bl	80020fc <HAL_PWREx_EnableOverDrive>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800097a:	f000 f81f 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097e:	230f      	movs	r3, #15
 8000980:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000982:	2302      	movs	r3, #2
 8000984:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800098a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800098e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000994:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	2105      	movs	r1, #5
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fbfd 	bl	800219c <HAL_RCC_ClockConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80009a8:	f000 f808 	bl	80009bc <Error_Handler>
  }
}
 80009ac:	bf00      	nop
 80009ae:	3750      	adds	r7, #80	@ 0x50
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40007000 	.word	0x40007000

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  __disable_irq();
  printf("System error! Check peripherals.\n");
 80009c4:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <Error_Handler+0x24>)
 80009c6:	f002 fdbf 	bl	8003548 <puts>
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Blink LED
 80009ca:	2120      	movs	r1, #32
 80009cc:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <Error_Handler+0x28>)
 80009ce:	f001 fb7a 	bl	80020c6 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 80009d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009d6:	f000 fa2d 	bl	8000e34 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Blink LED
 80009da:	bf00      	nop
 80009dc:	e7f5      	b.n	80009ca <Error_Handler+0xe>
 80009de:	bf00      	nop
 80009e0:	08004248 	.word	0x08004248
 80009e4:	40020000 	.word	0x40020000

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <NMI_Handler+0x4>

08000a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <MemManage_Handler+0x4>

08000a50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8e:	f000 f9b1 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a9c:	4802      	ldr	r0, [pc, #8]	@ (8000aa8 <CAN1_RX0_IRQHandler+0x10>)
 8000a9e:	f000 fe23 	bl	80016e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000008c 	.word	0x2000008c

08000aac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	e00a      	b.n	8000ad4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000abe:	f3af 8000 	nop.w
 8000ac2:	4601      	mov	r1, r0
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	1c5a      	adds	r2, r3, #1
 8000ac8:	60ba      	str	r2, [r7, #8]
 8000aca:	b2ca      	uxtb	r2, r1
 8000acc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	dbf0      	blt.n	8000abe <_read+0x12>
  }

  return len;
 8000adc:	687b      	ldr	r3, [r7, #4]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	e009      	b.n	8000b0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	1c5a      	adds	r2, r3, #1
 8000afc:	60ba      	str	r2, [r7, #8]
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	dbf1      	blt.n	8000af8 <_write+0x12>
  }
  return len;
 8000b14:	687b      	ldr	r3, [r7, #4]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_close>:

int _close(int file)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b46:	605a      	str	r2, [r3, #4]
  return 0;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <_isatty>:

int _isatty(int file)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b90:	4a14      	ldr	r2, [pc, #80]	@ (8000be4 <_sbrk+0x5c>)
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <_sbrk+0x60>)
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b9c:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <_sbrk+0x64>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <_sbrk+0x68>)
 8000ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d207      	bcs.n	8000bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb8:	f002 fdf4 	bl	80037a4 <__errno>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	e009      	b.n	8000bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bce:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	4a05      	ldr	r2, [pc, #20]	@ (8000bec <_sbrk+0x64>)
 8000bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bda:	68fb      	ldr	r3, [r7, #12]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20020000 	.word	0x20020000
 8000be8:	00000400 	.word	0x00000400
 8000bec:	2000011c 	.word	0x2000011c
 8000bf0:	200002b8 	.word	0x200002b8

08000bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <SystemInit+0x20>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bfe:	4a05      	ldr	r2, [pc, #20]	@ (8000c14 <SystemInit+0x20>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <MX_USART2_UART_Init+0x50>)
 8000c20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	@ (8000c64 <MX_USART2_UART_Init+0x4c>)
 8000c50:	f002 f88c 	bl	8002d6c <HAL_UART_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c5a:	f7ff feaf 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000120 	.word	0x20000120
 8000c68:	40004400 	.word	0x40004400

08000c6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	@ 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a19      	ldr	r2, [pc, #100]	@ (8000cf0 <HAL_UART_MspInit+0x84>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d12b      	bne.n	8000ce6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <HAL_UART_MspInit+0x88>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	4a17      	ldr	r2, [pc, #92]	@ (8000cf4 <HAL_UART_MspInit+0x88>)
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9e:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <HAL_UART_MspInit+0x88>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <HAL_UART_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a10      	ldr	r2, [pc, #64]	@ (8000cf4 <HAL_UART_MspInit+0x88>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <HAL_UART_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cc6:	230c      	movs	r3, #12
 8000cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd6:	2307      	movs	r3, #7
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <HAL_UART_MspInit+0x8c>)
 8000ce2:	f001 f843 	bl	8001d6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	3728      	adds	r7, #40	@ 0x28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40004400 	.word	0x40004400
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020000 	.word	0x40020000

08000cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d00:	f7ff ff78 	bl	8000bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d04:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d06:	490d      	ldr	r1, [pc, #52]	@ (8000d3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d08:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f002 fd41 	bl	80037b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2e:	f7ff fd3b 	bl	80007a8 <main>
  bx  lr    
 8000d32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d40:	080042c8 	.word	0x080042c8
  ldr r2, =_sbss
 8000d44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d48:	200002b8 	.word	0x200002b8

08000d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d54:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <HAL_Init+0x40>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d60:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <HAL_Init+0x40>)
 8000d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	@ (8000d90 <HAL_Init+0x40>)
 8000d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 ffb5 	bl	8001ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	200f      	movs	r0, #15
 8000d80:	f000 f808 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fe30 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 ffcd 	bl	8001d52 <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 ff95 	bl	8001cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	@ (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000010 	.word	0x20000010
 8000df0:	2000000c 	.word	0x2000000c

08000df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	@ (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000010 	.word	0x20000010
 8000e18:	20000168 	.word	0x20000168

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	@ (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000168 	.word	0x20000168

08000e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e3c:	f7ff ffee 	bl	8000e1c <HAL_GetTick>
 8000e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4c:	d005      	beq.n	8000e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <HAL_Delay+0x44>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e5a:	bf00      	nop
 8000e5c:	f7ff ffde 	bl	8000e1c <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d8f7      	bhi.n	8000e5c <HAL_Delay+0x28>
  {
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000010 	.word	0x20000010

08000e7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e0ed      	b.n	800106a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d102      	bne.n	8000ea0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff fbd4 	bl	8000648 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 0201 	orr.w	r2, r2, #1
 8000eae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eb0:	f7ff ffb4 	bl	8000e1c <HAL_GetTick>
 8000eb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000eb6:	e012      	b.n	8000ede <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000eb8:	f7ff ffb0 	bl	8000e1c <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b0a      	cmp	r3, #10
 8000ec4:	d90b      	bls.n	8000ede <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2205      	movs	r2, #5
 8000ed6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e0c5      	b.n	800106a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0e5      	beq.n	8000eb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0202 	bic.w	r2, r2, #2
 8000efa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000efc:	f7ff ff8e 	bl	8000e1c <HAL_GetTick>
 8000f00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f02:	e012      	b.n	8000f2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f04:	f7ff ff8a 	bl	8000e1c <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b0a      	cmp	r3, #10
 8000f10:	d90b      	bls.n	8000f2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2205      	movs	r2, #5
 8000f22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e09f      	b.n	800106a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1e5      	bne.n	8000f04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7e1b      	ldrb	r3, [r3, #24]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d108      	bne.n	8000f52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	e007      	b.n	8000f62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7e5b      	ldrb	r3, [r3, #25]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d108      	bne.n	8000f7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	e007      	b.n	8000f8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7e9b      	ldrb	r3, [r3, #26]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d108      	bne.n	8000fa6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 0220 	orr.w	r2, r2, #32
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	e007      	b.n	8000fb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0220 	bic.w	r2, r2, #32
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7edb      	ldrb	r3, [r3, #27]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d108      	bne.n	8000fd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0210 	bic.w	r2, r2, #16
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e007      	b.n	8000fe0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 0210 	orr.w	r2, r2, #16
 8000fde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7f1b      	ldrb	r3, [r3, #28]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d108      	bne.n	8000ffa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 0208 	orr.w	r2, r2, #8
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	e007      	b.n	800100a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 0208 	bic.w	r2, r2, #8
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7f5b      	ldrb	r3, [r3, #29]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d108      	bne.n	8001024 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f042 0204 	orr.w	r2, r2, #4
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	e007      	b.n	8001034 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 0204 	bic.w	r2, r2, #4
 8001032:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	ea42 0103 	orr.w	r1, r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	1e5a      	subs	r2, r3, #1
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001084:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8001086:	7dfb      	ldrb	r3, [r7, #23]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d003      	beq.n	8001094 <HAL_CAN_ConfigFilter+0x20>
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	2b02      	cmp	r3, #2
 8001090:	f040 80be 	bne.w	8001210 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001094:	4b65      	ldr	r3, [pc, #404]	@ (800122c <HAL_CAN_ConfigFilter+0x1b8>)
 8001096:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800109e:	f043 0201 	orr.w	r2, r3, #1
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010ae:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	431a      	orrs	r2, r3
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	f003 031f 	and.w	r3, r3, #31
 80010d4:	2201      	movs	r2, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	401a      	ands	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d123      	bne.n	800113e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	401a      	ands	r2, r3
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001118:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	3248      	adds	r2, #72	@ 0x48
 800111e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001132:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001134:	6939      	ldr	r1, [r7, #16]
 8001136:	3348      	adds	r3, #72	@ 0x48
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d122      	bne.n	800118c <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	431a      	orrs	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001166:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	3248      	adds	r2, #72	@ 0x48
 800116c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001180:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001182:	6939      	ldr	r1, [r7, #16]
 8001184:	3348      	adds	r3, #72	@ 0x48
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	440b      	add	r3, r1
 800118a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d109      	bne.n	80011a8 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	43db      	mvns	r3, r3
 800119e:	401a      	ands	r2, r3
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80011a6:	e007      	b.n	80011b8 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	431a      	orrs	r2, r3
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d109      	bne.n	80011d4 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	401a      	ands	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80011d2:	e007      	b.n	80011e4 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	431a      	orrs	r2, r3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d107      	bne.n	80011fc <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001202:	f023 0201 	bic.w	r2, r3, #1
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	e006      	b.n	800121e <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001214:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
  }
}
 800121e:	4618      	mov	r0, r3
 8001220:	371c      	adds	r7, #28
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40006400 	.word	0x40006400

08001230 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b01      	cmp	r3, #1
 8001242:	d12e      	bne.n	80012a2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2202      	movs	r2, #2
 8001248:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0201 	bic.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800125c:	f7ff fdde 	bl	8000e1c <HAL_GetTick>
 8001260:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001262:	e012      	b.n	800128a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001264:	f7ff fdda 	bl	8000e1c <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b0a      	cmp	r3, #10
 8001270:	d90b      	bls.n	800128a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001276:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2205      	movs	r2, #5
 8001282:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e012      	b.n	80012b0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e5      	bne.n	8001264 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e006      	b.n	80012b0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
  }
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	@ 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012d6:	7ffb      	ldrb	r3, [r7, #31]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d003      	beq.n	80012e4 <HAL_CAN_AddTxMessage+0x2c>
 80012dc:	7ffb      	ldrb	r3, [r7, #31]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	f040 80ad 	bne.w	800143e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10a      	bne.n	8001304 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d105      	bne.n	8001304 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8095 	beq.w	800142e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	0e1b      	lsrs	r3, r3, #24
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800130e:	2201      	movs	r2, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10d      	bne.n	800133c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800132a:	68f9      	ldr	r1, [r7, #12]
 800132c:	6809      	ldr	r1, [r1, #0]
 800132e:	431a      	orrs	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3318      	adds	r3, #24
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	440b      	add	r3, r1
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	e00f      	b.n	800135c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001346:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800134c:	68f9      	ldr	r1, [r7, #12]
 800134e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001350:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3318      	adds	r3, #24
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	440b      	add	r3, r1
 800135a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6819      	ldr	r1, [r3, #0]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3318      	adds	r3, #24
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	440b      	add	r3, r1
 800136c:	3304      	adds	r3, #4
 800136e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	7d1b      	ldrb	r3, [r3, #20]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d111      	bne.n	800139c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	3318      	adds	r3, #24
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	4413      	add	r3, r2
 8001384:	3304      	adds	r3, #4
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	6811      	ldr	r1, [r2, #0]
 800138c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3318      	adds	r3, #24
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	440b      	add	r3, r1
 8001398:	3304      	adds	r3, #4
 800139a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3307      	adds	r3, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	061a      	lsls	r2, r3, #24
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3306      	adds	r3, #6
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	041b      	lsls	r3, r3, #16
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3305      	adds	r3, #5
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	4313      	orrs	r3, r2
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	3204      	adds	r2, #4
 80013bc:	7812      	ldrb	r2, [r2, #0]
 80013be:	4610      	mov	r0, r2
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	6811      	ldr	r1, [r2, #0]
 80013c4:	ea43 0200 	orr.w	r2, r3, r0
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	440b      	add	r3, r1
 80013ce:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80013d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3303      	adds	r3, #3
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	061a      	lsls	r2, r3, #24
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3302      	adds	r3, #2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	041b      	lsls	r3, r3, #16
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3301      	adds	r3, #1
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	4313      	orrs	r3, r2
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	7812      	ldrb	r2, [r2, #0]
 80013f4:	4610      	mov	r0, r2
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	6811      	ldr	r1, [r2, #0]
 80013fa:	ea43 0200 	orr.w	r2, r3, r0
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	440b      	add	r3, r1
 8001404:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001408:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3318      	adds	r3, #24
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4413      	add	r3, r2
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	6811      	ldr	r1, [r2, #0]
 800141c:	f043 0201 	orr.w	r2, r3, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3318      	adds	r3, #24
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	440b      	add	r3, r1
 8001428:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e00e      	b.n	800144c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001432:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e006      	b.n	800144c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
  }
}
 800144c:	4618      	mov	r0, r3
 800144e:	3724      	adds	r7, #36	@ 0x24
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001458:	b480      	push	{r7}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f893 3020 	ldrb.w	r3, [r3, #32]
 800146c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d003      	beq.n	800147c <HAL_CAN_GetRxMessage+0x24>
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	2b02      	cmp	r3, #2
 8001478:	f040 8103 	bne.w	8001682 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10e      	bne.n	80014a0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d116      	bne.n	80014be <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001494:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0f7      	b.n	8001690 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d107      	bne.n	80014be <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e0e8      	b.n	8001690 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	331b      	adds	r3, #27
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	4413      	add	r3, r2
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0204 	and.w	r2, r3, #4
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10c      	bne.n	80014f6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	331b      	adds	r3, #27
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	4413      	add	r3, r2
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	0d5b      	lsrs	r3, r3, #21
 80014ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	e00b      	b.n	800150e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	331b      	adds	r3, #27
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	4413      	add	r3, r2
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	08db      	lsrs	r3, r3, #3
 8001506:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	331b      	adds	r3, #27
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	4413      	add	r3, r2
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0202 	and.w	r2, r3, #2
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	331b      	adds	r3, #27
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	4413      	add	r3, r2
 8001530:	3304      	adds	r3, #4
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2208      	movs	r2, #8
 8001540:	611a      	str	r2, [r3, #16]
 8001542:	e00b      	b.n	800155c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	331b      	adds	r3, #27
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	4413      	add	r3, r2
 8001550:	3304      	adds	r3, #4
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 020f 	and.w	r2, r3, #15
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	331b      	adds	r3, #27
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	4413      	add	r3, r2
 8001568:	3304      	adds	r3, #4
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	b2da      	uxtb	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	331b      	adds	r3, #27
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	4413      	add	r3, r2
 8001580:	3304      	adds	r3, #4
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0c1b      	lsrs	r3, r3, #16
 8001586:	b29a      	uxth	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	4413      	add	r3, r2
 8001596:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	4413      	add	r3, r2
 80015ac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	0a1a      	lsrs	r2, r3, #8
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	0c1a      	lsrs	r2, r3, #16
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	3302      	adds	r3, #2
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	4413      	add	r3, r2
 80015e0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	0e1a      	lsrs	r2, r3, #24
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	3303      	adds	r3, #3
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	4413      	add	r3, r2
 80015fa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	3304      	adds	r3, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	4413      	add	r3, r2
 8001612:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	0a1a      	lsrs	r2, r3, #8
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	3305      	adds	r3, #5
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	4413      	add	r3, r2
 800162c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	0c1a      	lsrs	r2, r3, #16
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	3306      	adds	r3, #6
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	4413      	add	r3, r2
 8001646:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	0e1a      	lsrs	r2, r3, #24
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	3307      	adds	r3, #7
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d108      	bne.n	800166e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0220 	orr.w	r2, r2, #32
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	e007      	b.n	800167e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	691a      	ldr	r2, [r3, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0220 	orr.w	r2, r2, #32
 800167c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e006      	b.n	8001690 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
  }
}
 8001690:	4618      	mov	r0, r3
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d002      	beq.n	80016ba <HAL_CAN_ActivateNotification+0x1e>
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d109      	bne.n	80016ce <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6959      	ldr	r1, [r3, #20]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e006      	b.n	80016dc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
  }
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	@ 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d07c      	beq.n	8001828 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d023      	beq.n	8001780 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2201      	movs	r2, #1
 800173e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f983 	bl	8001a56 <HAL_CAN_TxMailbox0CompleteCallback>
 8001750:	e016      	b.n	8001780 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d004      	beq.n	8001766 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
 8001764:	e00c      	b.n	8001780 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
 8001778:	e002      	b.n	8001780 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f989 	bl	8001a92 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001786:	2b00      	cmp	r3, #0
 8001788:	d024      	beq.n	80017d4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001792:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f963 	bl	8001a6a <HAL_CAN_TxMailbox1CompleteCallback>
 80017a4:	e016      	b.n	80017d4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d004      	beq.n	80017ba <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b8:	e00c      	b.n	80017d4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80017cc:	e002      	b.n	80017d4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f969 	bl	8001aa6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d024      	beq.n	8001828 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f943 	bl	8001a7e <HAL_CAN_TxMailbox2CompleteCallback>
 80017f8:	e016      	b.n	8001828 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
 800180c:	e00c      	b.n	8001828 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d004      	beq.n	8001822 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001820:	e002      	b.n	8001828 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f949 	bl	8001aba <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00c      	beq.n	800184c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f003 0310 	and.w	r3, r3, #16
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800183c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2210      	movs	r2, #16
 800184a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2208      	movs	r2, #8
 8001866:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f930 	bl	8001ace <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d009      	beq.n	800188c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7fe ffec 	bl	8000864 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00c      	beq.n	80018b0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	2b00      	cmp	r3, #0
 800189e:	d007      	beq.n	80018b0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2210      	movs	r2, #16
 80018ae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00b      	beq.n	80018d2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2208      	movs	r2, #8
 80018ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f912 	bl	8001af6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d009      	beq.n	80018f0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f8f9 	bl	8001ae2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00b      	beq.n	8001912 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2210      	movs	r2, #16
 800190a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f8fc 	bl	8001b0a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00b      	beq.n	8001934 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2208      	movs	r2, #8
 800192c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f8f5 	bl	8001b1e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d07b      	beq.n	8001a36 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d072      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194e:	2b00      	cmp	r3, #0
 8001950:	d008      	beq.n	8001964 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800195c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800196a:	2b00      	cmp	r3, #0
 800196c:	d008      	beq.n	8001980 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197a:	f043 0302 	orr.w	r3, r3, #2
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001986:	2b00      	cmp	r3, #0
 8001988:	d008      	beq.n	800199c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001996:	f043 0304 	orr.w	r3, r3, #4
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d043      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d03e      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019b6:	2b60      	cmp	r3, #96	@ 0x60
 80019b8:	d02b      	beq.n	8001a12 <HAL_CAN_IRQHandler+0x32a>
 80019ba:	2b60      	cmp	r3, #96	@ 0x60
 80019bc:	d82e      	bhi.n	8001a1c <HAL_CAN_IRQHandler+0x334>
 80019be:	2b50      	cmp	r3, #80	@ 0x50
 80019c0:	d022      	beq.n	8001a08 <HAL_CAN_IRQHandler+0x320>
 80019c2:	2b50      	cmp	r3, #80	@ 0x50
 80019c4:	d82a      	bhi.n	8001a1c <HAL_CAN_IRQHandler+0x334>
 80019c6:	2b40      	cmp	r3, #64	@ 0x40
 80019c8:	d019      	beq.n	80019fe <HAL_CAN_IRQHandler+0x316>
 80019ca:	2b40      	cmp	r3, #64	@ 0x40
 80019cc:	d826      	bhi.n	8001a1c <HAL_CAN_IRQHandler+0x334>
 80019ce:	2b30      	cmp	r3, #48	@ 0x30
 80019d0:	d010      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x30c>
 80019d2:	2b30      	cmp	r3, #48	@ 0x30
 80019d4:	d822      	bhi.n	8001a1c <HAL_CAN_IRQHandler+0x334>
 80019d6:	2b10      	cmp	r3, #16
 80019d8:	d002      	beq.n	80019e0 <HAL_CAN_IRQHandler+0x2f8>
 80019da:	2b20      	cmp	r3, #32
 80019dc:	d005      	beq.n	80019ea <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80019de:	e01d      	b.n	8001a1c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	f043 0308 	orr.w	r3, r3, #8
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019e8:	e019      	b.n	8001a1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	f043 0310 	orr.w	r3, r3, #16
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019f2:	e014      	b.n	8001a1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80019f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f6:	f043 0320 	orr.w	r3, r3, #32
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019fc:	e00f      	b.n	8001a1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a06:	e00a      	b.n	8001a1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a10:	e005      	b.n	8001a1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a1a:	e000      	b.n	8001a1e <HAL_CAN_IRQHandler+0x336>
            break;
 8001a1c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699a      	ldr	r2, [r3, #24]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001a2c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2204      	movs	r2, #4
 8001a34:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f872 	bl	8001b32 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a4e:	bf00      	nop
 8001a50:	3728      	adds	r7, #40	@ 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b58:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b64:	4013      	ands	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7a:	4a04      	ldr	r2, [pc, #16]	@ (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	60d3      	str	r3, [r2, #12]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b94:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	f003 0307 	and.w	r3, r3, #7
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	db0b      	blt.n	8001bd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	f003 021f 	and.w	r2, r3, #31
 8001bc4:	4907      	ldr	r1, [pc, #28]	@ (8001be4 <__NVIC_EnableIRQ+0x38>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	2001      	movs	r0, #1
 8001bce:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	db0a      	blt.n	8001c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	490c      	ldr	r1, [pc, #48]	@ (8001c34 <__NVIC_SetPriority+0x4c>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	0112      	lsls	r2, r2, #4
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c10:	e00a      	b.n	8001c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4908      	ldr	r1, [pc, #32]	@ (8001c38 <__NVIC_SetPriority+0x50>)
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	3b04      	subs	r3, #4
 8001c20:	0112      	lsls	r2, r2, #4
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	440b      	add	r3, r1
 8001c26:	761a      	strb	r2, [r3, #24]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000e100 	.word	0xe000e100
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	@ 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f1c3 0307 	rsb	r3, r3, #7
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	bf28      	it	cs
 8001c5a:	2304      	movcs	r3, #4
 8001c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3304      	adds	r3, #4
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d902      	bls.n	8001c6c <NVIC_EncodePriority+0x30>
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3b03      	subs	r3, #3
 8001c6a:	e000      	b.n	8001c6e <NVIC_EncodePriority+0x32>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	401a      	ands	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c84:	f04f 31ff 	mov.w	r1, #4294967295
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	43d9      	mvns	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	4313      	orrs	r3, r2
         );
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3724      	adds	r7, #36	@ 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cb4:	d301      	bcc.n	8001cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00f      	b.n	8001cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <SysTick_Config+0x40>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f7ff ff8e 	bl	8001be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <SysTick_Config+0x40>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd2:	4b04      	ldr	r3, [pc, #16]	@ (8001ce4 <SysTick_Config+0x40>)
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	e000e010 	.word	0xe000e010

08001ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ff29 	bl	8001b48 <__NVIC_SetPriorityGrouping>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d10:	f7ff ff3e 	bl	8001b90 <__NVIC_GetPriorityGrouping>
 8001d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	68b9      	ldr	r1, [r7, #8]
 8001d1a:	6978      	ldr	r0, [r7, #20]
 8001d1c:	f7ff ff8e 	bl	8001c3c <NVIC_EncodePriority>
 8001d20:	4602      	mov	r2, r0
 8001d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff5d 	bl	8001be8 <__NVIC_SetPriority>
}
 8001d2e:	bf00      	nop
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff31 	bl	8001bac <__NVIC_EnableIRQ>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ffa2 	bl	8001ca4 <SysTick_Config>
 8001d60:	4603      	mov	r3, r0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	@ 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	e165      	b.n	8002054 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d88:	2201      	movs	r2, #1
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	f040 8154 	bne.w	800204e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d005      	beq.n	8001dbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d130      	bne.n	8001e20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	2203      	movs	r2, #3
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df4:	2201      	movs	r2, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 0201 	and.w	r2, r3, #1
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d017      	beq.n	8001e5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	2203      	movs	r2, #3
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d123      	bne.n	8001eb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	08da      	lsrs	r2, r3, #3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3208      	adds	r2, #8
 8001e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	220f      	movs	r2, #15
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	08da      	lsrs	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3208      	adds	r2, #8
 8001eaa:	69b9      	ldr	r1, [r7, #24]
 8001eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2203      	movs	r2, #3
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0203 	and.w	r2, r3, #3
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80ae 	beq.w	800204e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b5d      	ldr	r3, [pc, #372]	@ (800206c <HAL_GPIO_Init+0x300>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efa:	4a5c      	ldr	r2, [pc, #368]	@ (800206c <HAL_GPIO_Init+0x300>)
 8001efc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f02:	4b5a      	ldr	r3, [pc, #360]	@ (800206c <HAL_GPIO_Init+0x300>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f0e:	4a58      	ldr	r2, [pc, #352]	@ (8002070 <HAL_GPIO_Init+0x304>)
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	3302      	adds	r3, #2
 8001f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	220f      	movs	r2, #15
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4f      	ldr	r2, [pc, #316]	@ (8002074 <HAL_GPIO_Init+0x308>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d025      	beq.n	8001f86 <HAL_GPIO_Init+0x21a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4e      	ldr	r2, [pc, #312]	@ (8002078 <HAL_GPIO_Init+0x30c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01f      	beq.n	8001f82 <HAL_GPIO_Init+0x216>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4d      	ldr	r2, [pc, #308]	@ (800207c <HAL_GPIO_Init+0x310>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d019      	beq.n	8001f7e <HAL_GPIO_Init+0x212>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4c      	ldr	r2, [pc, #304]	@ (8002080 <HAL_GPIO_Init+0x314>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0x20e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4b      	ldr	r2, [pc, #300]	@ (8002084 <HAL_GPIO_Init+0x318>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00d      	beq.n	8001f76 <HAL_GPIO_Init+0x20a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4a      	ldr	r2, [pc, #296]	@ (8002088 <HAL_GPIO_Init+0x31c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <HAL_GPIO_Init+0x206>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a49      	ldr	r2, [pc, #292]	@ (800208c <HAL_GPIO_Init+0x320>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_GPIO_Init+0x202>
 8001f6a:	2306      	movs	r3, #6
 8001f6c:	e00c      	b.n	8001f88 <HAL_GPIO_Init+0x21c>
 8001f6e:	2307      	movs	r3, #7
 8001f70:	e00a      	b.n	8001f88 <HAL_GPIO_Init+0x21c>
 8001f72:	2305      	movs	r3, #5
 8001f74:	e008      	b.n	8001f88 <HAL_GPIO_Init+0x21c>
 8001f76:	2304      	movs	r3, #4
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x21c>
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e004      	b.n	8001f88 <HAL_GPIO_Init+0x21c>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e002      	b.n	8001f88 <HAL_GPIO_Init+0x21c>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_GPIO_Init+0x21c>
 8001f86:	2300      	movs	r3, #0
 8001f88:	69fa      	ldr	r2, [r7, #28]
 8001f8a:	f002 0203 	and.w	r2, r2, #3
 8001f8e:	0092      	lsls	r2, r2, #2
 8001f90:	4093      	lsls	r3, r2
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f98:	4935      	ldr	r1, [pc, #212]	@ (8002070 <HAL_GPIO_Init+0x304>)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fa6:	4b3a      	ldr	r3, [pc, #232]	@ (8002090 <HAL_GPIO_Init+0x324>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fca:	4a31      	ldr	r2, [pc, #196]	@ (8002090 <HAL_GPIO_Init+0x324>)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd0:	4b2f      	ldr	r3, [pc, #188]	@ (8002090 <HAL_GPIO_Init+0x324>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ff4:	4a26      	ldr	r2, [pc, #152]	@ (8002090 <HAL_GPIO_Init+0x324>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ffa:	4b25      	ldr	r3, [pc, #148]	@ (8002090 <HAL_GPIO_Init+0x324>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800201e:	4a1c      	ldr	r2, [pc, #112]	@ (8002090 <HAL_GPIO_Init+0x324>)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002024:	4b1a      	ldr	r3, [pc, #104]	@ (8002090 <HAL_GPIO_Init+0x324>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002048:	4a11      	ldr	r2, [pc, #68]	@ (8002090 <HAL_GPIO_Init+0x324>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3301      	adds	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	2b0f      	cmp	r3, #15
 8002058:	f67f ae96 	bls.w	8001d88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	3724      	adds	r7, #36	@ 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
 8002070:	40013800 	.word	0x40013800
 8002074:	40020000 	.word	0x40020000
 8002078:	40020400 	.word	0x40020400
 800207c:	40020800 	.word	0x40020800
 8002080:	40020c00 	.word	0x40020c00
 8002084:	40021000 	.word	0x40021000
 8002088:	40021400 	.word	0x40021400
 800208c:	40021800 	.word	0x40021800
 8002090:	40013c00 	.word	0x40013c00

08002094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
 80020a0:	4613      	mov	r3, r2
 80020a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a4:	787b      	ldrb	r3, [r7, #1]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020b0:	e003      	b.n	80020ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020b2:	887b      	ldrh	r3, [r7, #2]
 80020b4:	041a      	lsls	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	619a      	str	r2, [r3, #24]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b085      	sub	sp, #20
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	460b      	mov	r3, r1
 80020d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020d8:	887a      	ldrh	r2, [r7, #2]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4013      	ands	r3, r2
 80020de:	041a      	lsls	r2, r3, #16
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	887b      	ldrh	r3, [r7, #2]
 80020e6:	400b      	ands	r3, r1
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	619a      	str	r2, [r3, #24]
}
 80020ee:	bf00      	nop
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	4b20      	ldr	r3, [pc, #128]	@ (800218c <HAL_PWREx_EnableOverDrive+0x90>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	4a1f      	ldr	r2, [pc, #124]	@ (800218c <HAL_PWREx_EnableOverDrive+0x90>)
 8002110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002114:	6413      	str	r3, [r2, #64]	@ 0x40
 8002116:	4b1d      	ldr	r3, [pc, #116]	@ (800218c <HAL_PWREx_EnableOverDrive+0x90>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002122:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <HAL_PWREx_EnableOverDrive+0x94>)
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002128:	f7fe fe78 	bl	8000e1c <HAL_GetTick>
 800212c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800212e:	e009      	b.n	8002144 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002130:	f7fe fe74 	bl	8000e1c <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800213e:	d901      	bls.n	8002144 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e01f      	b.n	8002184 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002144:	4b13      	ldr	r3, [pc, #76]	@ (8002194 <HAL_PWREx_EnableOverDrive+0x98>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800214c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002150:	d1ee      	bne.n	8002130 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002152:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002154:	2201      	movs	r2, #1
 8002156:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002158:	f7fe fe60 	bl	8000e1c <HAL_GetTick>
 800215c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800215e:	e009      	b.n	8002174 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002160:	f7fe fe5c 	bl	8000e1c <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800216e:	d901      	bls.n	8002174 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e007      	b.n	8002184 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002174:	4b07      	ldr	r3, [pc, #28]	@ (8002194 <HAL_PWREx_EnableOverDrive+0x98>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002180:	d1ee      	bne.n	8002160 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40023800 	.word	0x40023800
 8002190:	420e0040 	.word	0x420e0040
 8002194:	40007000 	.word	0x40007000
 8002198:	420e0044 	.word	0x420e0044

0800219c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0cc      	b.n	800234a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b0:	4b68      	ldr	r3, [pc, #416]	@ (8002354 <HAL_RCC_ClockConfig+0x1b8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d90c      	bls.n	80021d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b65      	ldr	r3, [pc, #404]	@ (8002354 <HAL_RCC_ClockConfig+0x1b8>)
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c6:	4b63      	ldr	r3, [pc, #396]	@ (8002354 <HAL_RCC_ClockConfig+0x1b8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d001      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0b8      	b.n	800234a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d020      	beq.n	8002226 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f0:	4b59      	ldr	r3, [pc, #356]	@ (8002358 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	4a58      	ldr	r2, [pc, #352]	@ (8002358 <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002208:	4b53      	ldr	r3, [pc, #332]	@ (8002358 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4a52      	ldr	r2, [pc, #328]	@ (8002358 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002214:	4b50      	ldr	r3, [pc, #320]	@ (8002358 <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	494d      	ldr	r1, [pc, #308]	@ (8002358 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d044      	beq.n	80022bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d107      	bne.n	800224a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	4b47      	ldr	r3, [pc, #284]	@ (8002358 <HAL_RCC_ClockConfig+0x1bc>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d119      	bne.n	800227a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e07f      	b.n	800234a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d003      	beq.n	800225a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002256:	2b03      	cmp	r3, #3
 8002258:	d107      	bne.n	800226a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225a:	4b3f      	ldr	r3, [pc, #252]	@ (8002358 <HAL_RCC_ClockConfig+0x1bc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e06f      	b.n	800234a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226a:	4b3b      	ldr	r3, [pc, #236]	@ (8002358 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e067      	b.n	800234a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800227a:	4b37      	ldr	r3, [pc, #220]	@ (8002358 <HAL_RCC_ClockConfig+0x1bc>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f023 0203 	bic.w	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4934      	ldr	r1, [pc, #208]	@ (8002358 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	4313      	orrs	r3, r2
 800228a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800228c:	f7fe fdc6 	bl	8000e1c <HAL_GetTick>
 8002290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	e00a      	b.n	80022aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002294:	f7fe fdc2 	bl	8000e1c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e04f      	b.n	800234a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002358 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 020c 	and.w	r2, r3, #12
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d1eb      	bne.n	8002294 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022bc:	4b25      	ldr	r3, [pc, #148]	@ (8002354 <HAL_RCC_ClockConfig+0x1b8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d20c      	bcs.n	80022e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b22      	ldr	r3, [pc, #136]	@ (8002354 <HAL_RCC_ClockConfig+0x1b8>)
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d2:	4b20      	ldr	r3, [pc, #128]	@ (8002354 <HAL_RCC_ClockConfig+0x1b8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e032      	b.n	800234a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f0:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4916      	ldr	r1, [pc, #88]	@ (8002358 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d009      	beq.n	8002322 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800230e:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	490e      	ldr	r1, [pc, #56]	@ (8002358 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002322:	f000 f855 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 8002326:	4602      	mov	r2, r0
 8002328:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	490a      	ldr	r1, [pc, #40]	@ (800235c <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	5ccb      	ldrb	r3, [r1, r3]
 8002336:	fa22 f303 	lsr.w	r3, r2, r3
 800233a:	4a09      	ldr	r2, [pc, #36]	@ (8002360 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800233e:	4b09      	ldr	r3, [pc, #36]	@ (8002364 <HAL_RCC_ClockConfig+0x1c8>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe fd26 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40023c00 	.word	0x40023c00
 8002358:	40023800 	.word	0x40023800
 800235c:	0800426c 	.word	0x0800426c
 8002360:	20000008 	.word	0x20000008
 8002364:	2000000c 	.word	0x2000000c

08002368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800236c:	4b03      	ldr	r3, [pc, #12]	@ (800237c <HAL_RCC_GetHCLKFreq+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000008 	.word	0x20000008

08002380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002384:	f7ff fff0 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 8002388:	4602      	mov	r2, r0
 800238a:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	0a9b      	lsrs	r3, r3, #10
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	4903      	ldr	r1, [pc, #12]	@ (80023a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002396:	5ccb      	ldrb	r3, [r1, r3]
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800239c:	4618      	mov	r0, r3
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40023800 	.word	0x40023800
 80023a4:	0800427c 	.word	0x0800427c

080023a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023ac:	f7ff ffdc 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	0b5b      	lsrs	r3, r3, #13
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	4903      	ldr	r1, [pc, #12]	@ (80023cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023be:	5ccb      	ldrb	r3, [r1, r3]
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40023800 	.word	0x40023800
 80023cc:	0800427c 	.word	0x0800427c

080023d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d4:	b0ae      	sub	sp, #184	@ 0xb8
 80023d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023f6:	4bcb      	ldr	r3, [pc, #812]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x354>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b0c      	cmp	r3, #12
 8002400:	f200 8206 	bhi.w	8002810 <HAL_RCC_GetSysClockFreq+0x440>
 8002404:	a201      	add	r2, pc, #4	@ (adr r2, 800240c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240a:	bf00      	nop
 800240c:	08002441 	.word	0x08002441
 8002410:	08002811 	.word	0x08002811
 8002414:	08002811 	.word	0x08002811
 8002418:	08002811 	.word	0x08002811
 800241c:	08002449 	.word	0x08002449
 8002420:	08002811 	.word	0x08002811
 8002424:	08002811 	.word	0x08002811
 8002428:	08002811 	.word	0x08002811
 800242c:	08002451 	.word	0x08002451
 8002430:	08002811 	.word	0x08002811
 8002434:	08002811 	.word	0x08002811
 8002438:	08002811 	.word	0x08002811
 800243c:	08002641 	.word	0x08002641
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002440:	4bb9      	ldr	r3, [pc, #740]	@ (8002728 <HAL_RCC_GetSysClockFreq+0x358>)
 8002442:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002446:	e1e7      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002448:	4bb8      	ldr	r3, [pc, #736]	@ (800272c <HAL_RCC_GetSysClockFreq+0x35c>)
 800244a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800244e:	e1e3      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002450:	4bb4      	ldr	r3, [pc, #720]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x354>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002458:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800245c:	4bb1      	ldr	r3, [pc, #708]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x354>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d071      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002468:	4bae      	ldr	r3, [pc, #696]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x354>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	099b      	lsrs	r3, r3, #6
 800246e:	2200      	movs	r2, #0
 8002470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002474:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002478:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800247c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002480:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002484:	2300      	movs	r3, #0
 8002486:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800248a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800248e:	4622      	mov	r2, r4
 8002490:	462b      	mov	r3, r5
 8002492:	f04f 0000 	mov.w	r0, #0
 8002496:	f04f 0100 	mov.w	r1, #0
 800249a:	0159      	lsls	r1, r3, #5
 800249c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024a0:	0150      	lsls	r0, r2, #5
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4621      	mov	r1, r4
 80024a8:	1a51      	subs	r1, r2, r1
 80024aa:	6439      	str	r1, [r7, #64]	@ 0x40
 80024ac:	4629      	mov	r1, r5
 80024ae:	eb63 0301 	sbc.w	r3, r3, r1
 80024b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80024c0:	4649      	mov	r1, r9
 80024c2:	018b      	lsls	r3, r1, #6
 80024c4:	4641      	mov	r1, r8
 80024c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024ca:	4641      	mov	r1, r8
 80024cc:	018a      	lsls	r2, r1, #6
 80024ce:	4641      	mov	r1, r8
 80024d0:	1a51      	subs	r1, r2, r1
 80024d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024d4:	4649      	mov	r1, r9
 80024d6:	eb63 0301 	sbc.w	r3, r3, r1
 80024da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80024e8:	4649      	mov	r1, r9
 80024ea:	00cb      	lsls	r3, r1, #3
 80024ec:	4641      	mov	r1, r8
 80024ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024f2:	4641      	mov	r1, r8
 80024f4:	00ca      	lsls	r2, r1, #3
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	4603      	mov	r3, r0
 80024fc:	4622      	mov	r2, r4
 80024fe:	189b      	adds	r3, r3, r2
 8002500:	633b      	str	r3, [r7, #48]	@ 0x30
 8002502:	462b      	mov	r3, r5
 8002504:	460a      	mov	r2, r1
 8002506:	eb42 0303 	adc.w	r3, r2, r3
 800250a:	637b      	str	r3, [r7, #52]	@ 0x34
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002518:	4629      	mov	r1, r5
 800251a:	024b      	lsls	r3, r1, #9
 800251c:	4621      	mov	r1, r4
 800251e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002522:	4621      	mov	r1, r4
 8002524:	024a      	lsls	r2, r1, #9
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800252e:	2200      	movs	r2, #0
 8002530:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002534:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002538:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800253c:	f7fd feb8 	bl	80002b0 <__aeabi_uldivmod>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4613      	mov	r3, r2
 8002546:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800254a:	e067      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800254c:	4b75      	ldr	r3, [pc, #468]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x354>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	2200      	movs	r2, #0
 8002554:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002558:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800255c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002564:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002566:	2300      	movs	r3, #0
 8002568:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800256a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800256e:	4622      	mov	r2, r4
 8002570:	462b      	mov	r3, r5
 8002572:	f04f 0000 	mov.w	r0, #0
 8002576:	f04f 0100 	mov.w	r1, #0
 800257a:	0159      	lsls	r1, r3, #5
 800257c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002580:	0150      	lsls	r0, r2, #5
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4621      	mov	r1, r4
 8002588:	1a51      	subs	r1, r2, r1
 800258a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800258c:	4629      	mov	r1, r5
 800258e:	eb63 0301 	sbc.w	r3, r3, r1
 8002592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80025a0:	4649      	mov	r1, r9
 80025a2:	018b      	lsls	r3, r1, #6
 80025a4:	4641      	mov	r1, r8
 80025a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025aa:	4641      	mov	r1, r8
 80025ac:	018a      	lsls	r2, r1, #6
 80025ae:	4641      	mov	r1, r8
 80025b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80025b4:	4649      	mov	r1, r9
 80025b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025ce:	4692      	mov	sl, r2
 80025d0:	469b      	mov	fp, r3
 80025d2:	4623      	mov	r3, r4
 80025d4:	eb1a 0303 	adds.w	r3, sl, r3
 80025d8:	623b      	str	r3, [r7, #32]
 80025da:	462b      	mov	r3, r5
 80025dc:	eb4b 0303 	adc.w	r3, fp, r3
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80025ee:	4629      	mov	r1, r5
 80025f0:	028b      	lsls	r3, r1, #10
 80025f2:	4621      	mov	r1, r4
 80025f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025f8:	4621      	mov	r1, r4
 80025fa:	028a      	lsls	r2, r1, #10
 80025fc:	4610      	mov	r0, r2
 80025fe:	4619      	mov	r1, r3
 8002600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002604:	2200      	movs	r2, #0
 8002606:	673b      	str	r3, [r7, #112]	@ 0x70
 8002608:	677a      	str	r2, [r7, #116]	@ 0x74
 800260a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800260e:	f7fd fe4f 	bl	80002b0 <__aeabi_uldivmod>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4613      	mov	r3, r2
 8002618:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800261c:	4b41      	ldr	r3, [pc, #260]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x354>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	0c1b      	lsrs	r3, r3, #16
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	3301      	adds	r3, #1
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800262e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002632:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002636:	fbb2 f3f3 	udiv	r3, r2, r3
 800263a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800263e:	e0eb      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002640:	4b38      	ldr	r3, [pc, #224]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x354>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002648:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800264c:	4b35      	ldr	r3, [pc, #212]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x354>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d06b      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002658:	4b32      	ldr	r3, [pc, #200]	@ (8002724 <HAL_RCC_GetSysClockFreq+0x354>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	099b      	lsrs	r3, r3, #6
 800265e:	2200      	movs	r2, #0
 8002660:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002662:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002664:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800266a:	663b      	str	r3, [r7, #96]	@ 0x60
 800266c:	2300      	movs	r3, #0
 800266e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002670:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002674:	4622      	mov	r2, r4
 8002676:	462b      	mov	r3, r5
 8002678:	f04f 0000 	mov.w	r0, #0
 800267c:	f04f 0100 	mov.w	r1, #0
 8002680:	0159      	lsls	r1, r3, #5
 8002682:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002686:	0150      	lsls	r0, r2, #5
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4621      	mov	r1, r4
 800268e:	1a51      	subs	r1, r2, r1
 8002690:	61b9      	str	r1, [r7, #24]
 8002692:	4629      	mov	r1, r5
 8002694:	eb63 0301 	sbc.w	r3, r3, r1
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026a6:	4659      	mov	r1, fp
 80026a8:	018b      	lsls	r3, r1, #6
 80026aa:	4651      	mov	r1, sl
 80026ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026b0:	4651      	mov	r1, sl
 80026b2:	018a      	lsls	r2, r1, #6
 80026b4:	4651      	mov	r1, sl
 80026b6:	ebb2 0801 	subs.w	r8, r2, r1
 80026ba:	4659      	mov	r1, fp
 80026bc:	eb63 0901 	sbc.w	r9, r3, r1
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026d4:	4690      	mov	r8, r2
 80026d6:	4699      	mov	r9, r3
 80026d8:	4623      	mov	r3, r4
 80026da:	eb18 0303 	adds.w	r3, r8, r3
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	462b      	mov	r3, r5
 80026e2:	eb49 0303 	adc.w	r3, r9, r3
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80026f4:	4629      	mov	r1, r5
 80026f6:	024b      	lsls	r3, r1, #9
 80026f8:	4621      	mov	r1, r4
 80026fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026fe:	4621      	mov	r1, r4
 8002700:	024a      	lsls	r2, r1, #9
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800270a:	2200      	movs	r2, #0
 800270c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800270e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002710:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002714:	f7fd fdcc 	bl	80002b0 <__aeabi_uldivmod>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4613      	mov	r3, r2
 800271e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002722:	e065      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x420>
 8002724:	40023800 	.word	0x40023800
 8002728:	00f42400 	.word	0x00f42400
 800272c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002730:	4b3d      	ldr	r3, [pc, #244]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x458>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	099b      	lsrs	r3, r3, #6
 8002736:	2200      	movs	r2, #0
 8002738:	4618      	mov	r0, r3
 800273a:	4611      	mov	r1, r2
 800273c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002740:	653b      	str	r3, [r7, #80]	@ 0x50
 8002742:	2300      	movs	r3, #0
 8002744:	657b      	str	r3, [r7, #84]	@ 0x54
 8002746:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800274a:	4642      	mov	r2, r8
 800274c:	464b      	mov	r3, r9
 800274e:	f04f 0000 	mov.w	r0, #0
 8002752:	f04f 0100 	mov.w	r1, #0
 8002756:	0159      	lsls	r1, r3, #5
 8002758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800275c:	0150      	lsls	r0, r2, #5
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4641      	mov	r1, r8
 8002764:	1a51      	subs	r1, r2, r1
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	4649      	mov	r1, r9
 800276a:	eb63 0301 	sbc.w	r3, r3, r1
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800277c:	4659      	mov	r1, fp
 800277e:	018b      	lsls	r3, r1, #6
 8002780:	4651      	mov	r1, sl
 8002782:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002786:	4651      	mov	r1, sl
 8002788:	018a      	lsls	r2, r1, #6
 800278a:	4651      	mov	r1, sl
 800278c:	1a54      	subs	r4, r2, r1
 800278e:	4659      	mov	r1, fp
 8002790:	eb63 0501 	sbc.w	r5, r3, r1
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	00eb      	lsls	r3, r5, #3
 800279e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027a2:	00e2      	lsls	r2, r4, #3
 80027a4:	4614      	mov	r4, r2
 80027a6:	461d      	mov	r5, r3
 80027a8:	4643      	mov	r3, r8
 80027aa:	18e3      	adds	r3, r4, r3
 80027ac:	603b      	str	r3, [r7, #0]
 80027ae:	464b      	mov	r3, r9
 80027b0:	eb45 0303 	adc.w	r3, r5, r3
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027c2:	4629      	mov	r1, r5
 80027c4:	028b      	lsls	r3, r1, #10
 80027c6:	4621      	mov	r1, r4
 80027c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027cc:	4621      	mov	r1, r4
 80027ce:	028a      	lsls	r2, r1, #10
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027d8:	2200      	movs	r2, #0
 80027da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027dc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80027de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80027e2:	f7fd fd65 	bl	80002b0 <__aeabi_uldivmod>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4613      	mov	r3, r2
 80027ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80027f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x458>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	0f1b      	lsrs	r3, r3, #28
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80027fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002802:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002806:	fbb2 f3f3 	udiv	r3, r2, r3
 800280a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800280e:	e003      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4b06      	ldr	r3, [pc, #24]	@ (800282c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002812:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002816:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002818:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800281c:	4618      	mov	r0, r3
 800281e:	37b8      	adds	r7, #184	@ 0xb8
 8002820:	46bd      	mov	sp, r7
 8002822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002826:	bf00      	nop
 8002828:	40023800 	.word	0x40023800
 800282c:	00f42400 	.word	0x00f42400

08002830 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e28d      	b.n	8002d5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 8083 	beq.w	8002956 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002850:	4b94      	ldr	r3, [pc, #592]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 030c 	and.w	r3, r3, #12
 8002858:	2b04      	cmp	r3, #4
 800285a:	d019      	beq.n	8002890 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800285c:	4b91      	ldr	r3, [pc, #580]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 030c 	and.w	r3, r3, #12
        || \
 8002864:	2b08      	cmp	r3, #8
 8002866:	d106      	bne.n	8002876 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002868:	4b8e      	ldr	r3, [pc, #568]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002870:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002874:	d00c      	beq.n	8002890 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002876:	4b8b      	ldr	r3, [pc, #556]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800287e:	2b0c      	cmp	r3, #12
 8002880:	d112      	bne.n	80028a8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002882:	4b88      	ldr	r3, [pc, #544]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800288a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800288e:	d10b      	bne.n	80028a8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002890:	4b84      	ldr	r3, [pc, #528]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d05b      	beq.n	8002954 <HAL_RCC_OscConfig+0x124>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d157      	bne.n	8002954 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e25a      	b.n	8002d5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028b0:	d106      	bne.n	80028c0 <HAL_RCC_OscConfig+0x90>
 80028b2:	4b7c      	ldr	r3, [pc, #496]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a7b      	ldr	r2, [pc, #492]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e01d      	b.n	80028fc <HAL_RCC_OscConfig+0xcc>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0xb4>
 80028ca:	4b76      	ldr	r3, [pc, #472]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a75      	ldr	r2, [pc, #468]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 80028d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	4b73      	ldr	r3, [pc, #460]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a72      	ldr	r2, [pc, #456]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0xcc>
 80028e4:	4b6f      	ldr	r3, [pc, #444]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a6e      	ldr	r2, [pc, #440]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 80028ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b6c      	ldr	r3, [pc, #432]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a6b      	ldr	r2, [pc, #428]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 80028f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7fe fa8a 	bl	8000e1c <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290c:	f7fe fa86 	bl	8000e1c <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	@ 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e21f      	b.n	8002d5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	4b61      	ldr	r3, [pc, #388]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0xdc>
 800292a:	e014      	b.n	8002956 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fa76 	bl	8000e1c <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002934:	f7fe fa72 	bl	8000e1c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	@ 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e20b      	b.n	8002d5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	4b57      	ldr	r3, [pc, #348]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x104>
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d06f      	beq.n	8002a42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002962:	4b50      	ldr	r3, [pc, #320]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b00      	cmp	r3, #0
 800296c:	d017      	beq.n	800299e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800296e:	4b4d      	ldr	r3, [pc, #308]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
        || \
 8002976:	2b08      	cmp	r3, #8
 8002978:	d105      	bne.n	8002986 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800297a:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00b      	beq.n	800299e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002986:	4b47      	ldr	r3, [pc, #284]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800298e:	2b0c      	cmp	r3, #12
 8002990:	d11c      	bne.n	80029cc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002992:	4b44      	ldr	r3, [pc, #272]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d116      	bne.n	80029cc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299e:	4b41      	ldr	r3, [pc, #260]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d005      	beq.n	80029b6 <HAL_RCC_OscConfig+0x186>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d001      	beq.n	80029b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e1d3      	b.n	8002d5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b6:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4937      	ldr	r1, [pc, #220]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ca:	e03a      	b.n	8002a42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d020      	beq.n	8002a16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d4:	4b34      	ldr	r3, [pc, #208]	@ (8002aa8 <HAL_RCC_OscConfig+0x278>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe fa1f 	bl	8000e1c <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e2:	f7fe fa1b 	bl	8000e1c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e1b4      	b.n	8002d5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f4:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a00:	4b28      	ldr	r3, [pc, #160]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4925      	ldr	r1, [pc, #148]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	600b      	str	r3, [r1, #0]
 8002a14:	e015      	b.n	8002a42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a16:	4b24      	ldr	r3, [pc, #144]	@ (8002aa8 <HAL_RCC_OscConfig+0x278>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7fe f9fe 	bl	8000e1c <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a24:	f7fe f9fa 	bl	8000e1c <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e193      	b.n	8002d5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a36:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d036      	beq.n	8002abc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d016      	beq.n	8002a84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a56:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5c:	f7fe f9de 	bl	8000e1c <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a64:	f7fe f9da 	bl	8000e1c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e173      	b.n	8002d5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a76:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <HAL_RCC_OscConfig+0x274>)
 8002a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0x234>
 8002a82:	e01b      	b.n	8002abc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a84:	4b09      	ldr	r3, [pc, #36]	@ (8002aac <HAL_RCC_OscConfig+0x27c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8a:	f7fe f9c7 	bl	8000e1c <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a90:	e00e      	b.n	8002ab0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a92:	f7fe f9c3 	bl	8000e1c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d907      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e15c      	b.n	8002d5e <HAL_RCC_OscConfig+0x52e>
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	42470000 	.word	0x42470000
 8002aac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab0:	4b8a      	ldr	r3, [pc, #552]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1ea      	bne.n	8002a92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 8097 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aca:	2300      	movs	r3, #0
 8002acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ace:	4b83      	ldr	r3, [pc, #524]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10f      	bne.n	8002afa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	4b7f      	ldr	r3, [pc, #508]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aea:	4b7c      	ldr	r3, [pc, #496]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af6:	2301      	movs	r3, #1
 8002af8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afa:	4b79      	ldr	r3, [pc, #484]	@ (8002ce0 <HAL_RCC_OscConfig+0x4b0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d118      	bne.n	8002b38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b06:	4b76      	ldr	r3, [pc, #472]	@ (8002ce0 <HAL_RCC_OscConfig+0x4b0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a75      	ldr	r2, [pc, #468]	@ (8002ce0 <HAL_RCC_OscConfig+0x4b0>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b12:	f7fe f983 	bl	8000e1c <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1a:	f7fe f97f 	bl	8000e1c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e118      	b.n	8002d5e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ce0 <HAL_RCC_OscConfig+0x4b0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d106      	bne.n	8002b4e <HAL_RCC_OscConfig+0x31e>
 8002b40:	4b66      	ldr	r3, [pc, #408]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b44:	4a65      	ldr	r2, [pc, #404]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b4c:	e01c      	b.n	8002b88 <HAL_RCC_OscConfig+0x358>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b05      	cmp	r3, #5
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x340>
 8002b56:	4b61      	ldr	r3, [pc, #388]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5a:	4a60      	ldr	r2, [pc, #384]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002b5c:	f043 0304 	orr.w	r3, r3, #4
 8002b60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b62:	4b5e      	ldr	r3, [pc, #376]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b66:	4a5d      	ldr	r2, [pc, #372]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCC_OscConfig+0x358>
 8002b70:	4b5a      	ldr	r3, [pc, #360]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b74:	4a59      	ldr	r2, [pc, #356]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7c:	4b57      	ldr	r3, [pc, #348]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b80:	4a56      	ldr	r2, [pc, #344]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002b82:	f023 0304 	bic.w	r3, r3, #4
 8002b86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d015      	beq.n	8002bbc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b90:	f7fe f944 	bl	8000e1c <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b96:	e00a      	b.n	8002bae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b98:	f7fe f940 	bl	8000e1c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e0d7      	b.n	8002d5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bae:	4b4b      	ldr	r3, [pc, #300]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0ee      	beq.n	8002b98 <HAL_RCC_OscConfig+0x368>
 8002bba:	e014      	b.n	8002be6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7fe f92e 	bl	8000e1c <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc4:	f7fe f92a 	bl	8000e1c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e0c1      	b.n	8002d5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bda:	4b40      	ldr	r3, [pc, #256]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1ee      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d105      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bec:	4b3b      	ldr	r3, [pc, #236]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf0:	4a3a      	ldr	r2, [pc, #232]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002bf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bf6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80ad 	beq.w	8002d5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c02:	4b36      	ldr	r3, [pc, #216]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d060      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d145      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c16:	4b33      	ldr	r3, [pc, #204]	@ (8002ce4 <HAL_RCC_OscConfig+0x4b4>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe f8fe 	bl	8000e1c <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c24:	f7fe f8fa 	bl	8000e1c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e093      	b.n	8002d5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c36:	4b29      	ldr	r3, [pc, #164]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69da      	ldr	r2, [r3, #28]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c50:	019b      	lsls	r3, r3, #6
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c58:	085b      	lsrs	r3, r3, #1
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	041b      	lsls	r3, r3, #16
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c64:	061b      	lsls	r3, r3, #24
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6c:	071b      	lsls	r3, r3, #28
 8002c6e:	491b      	ldr	r1, [pc, #108]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce4 <HAL_RCC_OscConfig+0x4b4>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7a:	f7fe f8cf 	bl	8000e1c <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c82:	f7fe f8cb 	bl	8000e1c <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e064      	b.n	8002d5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c94:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x452>
 8002ca0:	e05c      	b.n	8002d5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca2:	4b10      	ldr	r3, [pc, #64]	@ (8002ce4 <HAL_RCC_OscConfig+0x4b4>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe f8b8 	bl	8000e1c <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe f8b4 	bl	8000e1c <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e04d      	b.n	8002d5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc2:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <HAL_RCC_OscConfig+0x4ac>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x480>
 8002cce:	e045      	b.n	8002d5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d107      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e040      	b.n	8002d5e <HAL_RCC_OscConfig+0x52e>
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40007000 	.word	0x40007000
 8002ce4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d68 <HAL_RCC_OscConfig+0x538>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d030      	beq.n	8002d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d129      	bne.n	8002d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d122      	bne.n	8002d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d18:	4013      	ands	r3, r2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d119      	bne.n	8002d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2e:	085b      	lsrs	r3, r3, #1
 8002d30:	3b01      	subs	r3, #1
 8002d32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d10f      	bne.n	8002d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800

08002d6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e042      	b.n	8002e04 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fd ff6a 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2224      	movs	r2, #36	@ 0x24
 8002d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f82b 	bl	8002e0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002de4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e10:	b0c0      	sub	sp, #256	@ 0x100
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e28:	68d9      	ldr	r1, [r3, #12]
 8002e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	ea40 0301 	orr.w	r3, r0, r1
 8002e34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e64:	f021 010c 	bic.w	r1, r1, #12
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e72:	430b      	orrs	r3, r1
 8002e74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e86:	6999      	ldr	r1, [r3, #24]
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	ea40 0301 	orr.w	r3, r0, r1
 8002e92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4b8f      	ldr	r3, [pc, #572]	@ (80030d8 <UART_SetConfig+0x2cc>)
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d005      	beq.n	8002eac <UART_SetConfig+0xa0>
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4b8d      	ldr	r3, [pc, #564]	@ (80030dc <UART_SetConfig+0x2d0>)
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d104      	bne.n	8002eb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002eac:	f7ff fa7c 	bl	80023a8 <HAL_RCC_GetPCLK2Freq>
 8002eb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002eb4:	e003      	b.n	8002ebe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eb6:	f7ff fa63 	bl	8002380 <HAL_RCC_GetPCLK1Freq>
 8002eba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ec8:	f040 810c 	bne.w	80030e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ed6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002eda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ede:	4622      	mov	r2, r4
 8002ee0:	462b      	mov	r3, r5
 8002ee2:	1891      	adds	r1, r2, r2
 8002ee4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ee6:	415b      	adcs	r3, r3
 8002ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002eea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002eee:	4621      	mov	r1, r4
 8002ef0:	eb12 0801 	adds.w	r8, r2, r1
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	eb43 0901 	adc.w	r9, r3, r1
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f0e:	4690      	mov	r8, r2
 8002f10:	4699      	mov	r9, r3
 8002f12:	4623      	mov	r3, r4
 8002f14:	eb18 0303 	adds.w	r3, r8, r3
 8002f18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f1c:	462b      	mov	r3, r5
 8002f1e:	eb49 0303 	adc.w	r3, r9, r3
 8002f22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	18db      	adds	r3, r3, r3
 8002f3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f40:	4613      	mov	r3, r2
 8002f42:	eb42 0303 	adc.w	r3, r2, r3
 8002f46:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f50:	f7fd f9ae 	bl	80002b0 <__aeabi_uldivmod>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4b61      	ldr	r3, [pc, #388]	@ (80030e0 <UART_SetConfig+0x2d4>)
 8002f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	011c      	lsls	r4, r3, #4
 8002f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f66:	2200      	movs	r2, #0
 8002f68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f74:	4642      	mov	r2, r8
 8002f76:	464b      	mov	r3, r9
 8002f78:	1891      	adds	r1, r2, r2
 8002f7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f7c:	415b      	adcs	r3, r3
 8002f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f84:	4641      	mov	r1, r8
 8002f86:	eb12 0a01 	adds.w	sl, r2, r1
 8002f8a:	4649      	mov	r1, r9
 8002f8c:	eb43 0b01 	adc.w	fp, r3, r1
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fa4:	4692      	mov	sl, r2
 8002fa6:	469b      	mov	fp, r3
 8002fa8:	4643      	mov	r3, r8
 8002faa:	eb1a 0303 	adds.w	r3, sl, r3
 8002fae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	eb4b 0303 	adc.w	r3, fp, r3
 8002fb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fc8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002fcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	18db      	adds	r3, r3, r3
 8002fd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	eb42 0303 	adc.w	r3, r2, r3
 8002fdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fe2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002fe6:	f7fd f963 	bl	80002b0 <__aeabi_uldivmod>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80030e0 <UART_SetConfig+0x2d4>)
 8002ff2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2264      	movs	r2, #100	@ 0x64
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
 8002ffe:	1acb      	subs	r3, r1, r3
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003006:	4b36      	ldr	r3, [pc, #216]	@ (80030e0 <UART_SetConfig+0x2d4>)
 8003008:	fba3 2302 	umull	r2, r3, r3, r2
 800300c:	095b      	lsrs	r3, r3, #5
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003014:	441c      	add	r4, r3
 8003016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800301a:	2200      	movs	r2, #0
 800301c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003020:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003024:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003028:	4642      	mov	r2, r8
 800302a:	464b      	mov	r3, r9
 800302c:	1891      	adds	r1, r2, r2
 800302e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003030:	415b      	adcs	r3, r3
 8003032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003034:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003038:	4641      	mov	r1, r8
 800303a:	1851      	adds	r1, r2, r1
 800303c:	6339      	str	r1, [r7, #48]	@ 0x30
 800303e:	4649      	mov	r1, r9
 8003040:	414b      	adcs	r3, r1
 8003042:	637b      	str	r3, [r7, #52]	@ 0x34
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003050:	4659      	mov	r1, fp
 8003052:	00cb      	lsls	r3, r1, #3
 8003054:	4651      	mov	r1, sl
 8003056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800305a:	4651      	mov	r1, sl
 800305c:	00ca      	lsls	r2, r1, #3
 800305e:	4610      	mov	r0, r2
 8003060:	4619      	mov	r1, r3
 8003062:	4603      	mov	r3, r0
 8003064:	4642      	mov	r2, r8
 8003066:	189b      	adds	r3, r3, r2
 8003068:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800306c:	464b      	mov	r3, r9
 800306e:	460a      	mov	r2, r1
 8003070:	eb42 0303 	adc.w	r3, r2, r3
 8003074:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003084:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003088:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800308c:	460b      	mov	r3, r1
 800308e:	18db      	adds	r3, r3, r3
 8003090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003092:	4613      	mov	r3, r2
 8003094:	eb42 0303 	adc.w	r3, r2, r3
 8003098:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800309a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800309e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80030a2:	f7fd f905 	bl	80002b0 <__aeabi_uldivmod>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4b0d      	ldr	r3, [pc, #52]	@ (80030e0 <UART_SetConfig+0x2d4>)
 80030ac:	fba3 1302 	umull	r1, r3, r3, r2
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	2164      	movs	r1, #100	@ 0x64
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	3332      	adds	r3, #50	@ 0x32
 80030be:	4a08      	ldr	r2, [pc, #32]	@ (80030e0 <UART_SetConfig+0x2d4>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	f003 0207 	and.w	r2, r3, #7
 80030ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4422      	add	r2, r4
 80030d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030d4:	e106      	b.n	80032e4 <UART_SetConfig+0x4d8>
 80030d6:	bf00      	nop
 80030d8:	40011000 	.word	0x40011000
 80030dc:	40011400 	.word	0x40011400
 80030e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030e8:	2200      	movs	r2, #0
 80030ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030f6:	4642      	mov	r2, r8
 80030f8:	464b      	mov	r3, r9
 80030fa:	1891      	adds	r1, r2, r2
 80030fc:	6239      	str	r1, [r7, #32]
 80030fe:	415b      	adcs	r3, r3
 8003100:	627b      	str	r3, [r7, #36]	@ 0x24
 8003102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003106:	4641      	mov	r1, r8
 8003108:	1854      	adds	r4, r2, r1
 800310a:	4649      	mov	r1, r9
 800310c:	eb43 0501 	adc.w	r5, r3, r1
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	00eb      	lsls	r3, r5, #3
 800311a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800311e:	00e2      	lsls	r2, r4, #3
 8003120:	4614      	mov	r4, r2
 8003122:	461d      	mov	r5, r3
 8003124:	4643      	mov	r3, r8
 8003126:	18e3      	adds	r3, r4, r3
 8003128:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800312c:	464b      	mov	r3, r9
 800312e:	eb45 0303 	adc.w	r3, r5, r3
 8003132:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003142:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003152:	4629      	mov	r1, r5
 8003154:	008b      	lsls	r3, r1, #2
 8003156:	4621      	mov	r1, r4
 8003158:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800315c:	4621      	mov	r1, r4
 800315e:	008a      	lsls	r2, r1, #2
 8003160:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003164:	f7fd f8a4 	bl	80002b0 <__aeabi_uldivmod>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4b60      	ldr	r3, [pc, #384]	@ (80032f0 <UART_SetConfig+0x4e4>)
 800316e:	fba3 2302 	umull	r2, r3, r3, r2
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	011c      	lsls	r4, r3, #4
 8003176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800317a:	2200      	movs	r2, #0
 800317c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003180:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003184:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003188:	4642      	mov	r2, r8
 800318a:	464b      	mov	r3, r9
 800318c:	1891      	adds	r1, r2, r2
 800318e:	61b9      	str	r1, [r7, #24]
 8003190:	415b      	adcs	r3, r3
 8003192:	61fb      	str	r3, [r7, #28]
 8003194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003198:	4641      	mov	r1, r8
 800319a:	1851      	adds	r1, r2, r1
 800319c:	6139      	str	r1, [r7, #16]
 800319e:	4649      	mov	r1, r9
 80031a0:	414b      	adcs	r3, r1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031b0:	4659      	mov	r1, fp
 80031b2:	00cb      	lsls	r3, r1, #3
 80031b4:	4651      	mov	r1, sl
 80031b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ba:	4651      	mov	r1, sl
 80031bc:	00ca      	lsls	r2, r1, #3
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	4603      	mov	r3, r0
 80031c4:	4642      	mov	r2, r8
 80031c6:	189b      	adds	r3, r3, r2
 80031c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031cc:	464b      	mov	r3, r9
 80031ce:	460a      	mov	r2, r1
 80031d0:	eb42 0303 	adc.w	r3, r2, r3
 80031d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031f0:	4649      	mov	r1, r9
 80031f2:	008b      	lsls	r3, r1, #2
 80031f4:	4641      	mov	r1, r8
 80031f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031fa:	4641      	mov	r1, r8
 80031fc:	008a      	lsls	r2, r1, #2
 80031fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003202:	f7fd f855 	bl	80002b0 <__aeabi_uldivmod>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4611      	mov	r1, r2
 800320c:	4b38      	ldr	r3, [pc, #224]	@ (80032f0 <UART_SetConfig+0x4e4>)
 800320e:	fba3 2301 	umull	r2, r3, r3, r1
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	2264      	movs	r2, #100	@ 0x64
 8003216:	fb02 f303 	mul.w	r3, r2, r3
 800321a:	1acb      	subs	r3, r1, r3
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	3332      	adds	r3, #50	@ 0x32
 8003220:	4a33      	ldr	r2, [pc, #204]	@ (80032f0 <UART_SetConfig+0x4e4>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800322c:	441c      	add	r4, r3
 800322e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003232:	2200      	movs	r2, #0
 8003234:	673b      	str	r3, [r7, #112]	@ 0x70
 8003236:	677a      	str	r2, [r7, #116]	@ 0x74
 8003238:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800323c:	4642      	mov	r2, r8
 800323e:	464b      	mov	r3, r9
 8003240:	1891      	adds	r1, r2, r2
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	415b      	adcs	r3, r3
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800324c:	4641      	mov	r1, r8
 800324e:	1851      	adds	r1, r2, r1
 8003250:	6039      	str	r1, [r7, #0]
 8003252:	4649      	mov	r1, r9
 8003254:	414b      	adcs	r3, r1
 8003256:	607b      	str	r3, [r7, #4]
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003264:	4659      	mov	r1, fp
 8003266:	00cb      	lsls	r3, r1, #3
 8003268:	4651      	mov	r1, sl
 800326a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800326e:	4651      	mov	r1, sl
 8003270:	00ca      	lsls	r2, r1, #3
 8003272:	4610      	mov	r0, r2
 8003274:	4619      	mov	r1, r3
 8003276:	4603      	mov	r3, r0
 8003278:	4642      	mov	r2, r8
 800327a:	189b      	adds	r3, r3, r2
 800327c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800327e:	464b      	mov	r3, r9
 8003280:	460a      	mov	r2, r1
 8003282:	eb42 0303 	adc.w	r3, r2, r3
 8003286:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	663b      	str	r3, [r7, #96]	@ 0x60
 8003292:	667a      	str	r2, [r7, #100]	@ 0x64
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80032a0:	4649      	mov	r1, r9
 80032a2:	008b      	lsls	r3, r1, #2
 80032a4:	4641      	mov	r1, r8
 80032a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032aa:	4641      	mov	r1, r8
 80032ac:	008a      	lsls	r2, r1, #2
 80032ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80032b2:	f7fc fffd 	bl	80002b0 <__aeabi_uldivmod>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4b0d      	ldr	r3, [pc, #52]	@ (80032f0 <UART_SetConfig+0x4e4>)
 80032bc:	fba3 1302 	umull	r1, r3, r3, r2
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	2164      	movs	r1, #100	@ 0x64
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	3332      	adds	r3, #50	@ 0x32
 80032ce:	4a08      	ldr	r2, [pc, #32]	@ (80032f0 <UART_SetConfig+0x4e4>)
 80032d0:	fba2 2303 	umull	r2, r3, r2, r3
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	f003 020f 	and.w	r2, r3, #15
 80032da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4422      	add	r2, r4
 80032e2:	609a      	str	r2, [r3, #8]
}
 80032e4:	bf00      	nop
 80032e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032ea:	46bd      	mov	sp, r7
 80032ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032f0:	51eb851f 	.word	0x51eb851f

080032f4 <std>:
 80032f4:	2300      	movs	r3, #0
 80032f6:	b510      	push	{r4, lr}
 80032f8:	4604      	mov	r4, r0
 80032fa:	e9c0 3300 	strd	r3, r3, [r0]
 80032fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003302:	6083      	str	r3, [r0, #8]
 8003304:	8181      	strh	r1, [r0, #12]
 8003306:	6643      	str	r3, [r0, #100]	@ 0x64
 8003308:	81c2      	strh	r2, [r0, #14]
 800330a:	6183      	str	r3, [r0, #24]
 800330c:	4619      	mov	r1, r3
 800330e:	2208      	movs	r2, #8
 8003310:	305c      	adds	r0, #92	@ 0x5c
 8003312:	f000 f9f9 	bl	8003708 <memset>
 8003316:	4b0d      	ldr	r3, [pc, #52]	@ (800334c <std+0x58>)
 8003318:	6263      	str	r3, [r4, #36]	@ 0x24
 800331a:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <std+0x5c>)
 800331c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800331e:	4b0d      	ldr	r3, [pc, #52]	@ (8003354 <std+0x60>)
 8003320:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003322:	4b0d      	ldr	r3, [pc, #52]	@ (8003358 <std+0x64>)
 8003324:	6323      	str	r3, [r4, #48]	@ 0x30
 8003326:	4b0d      	ldr	r3, [pc, #52]	@ (800335c <std+0x68>)
 8003328:	6224      	str	r4, [r4, #32]
 800332a:	429c      	cmp	r4, r3
 800332c:	d006      	beq.n	800333c <std+0x48>
 800332e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003332:	4294      	cmp	r4, r2
 8003334:	d002      	beq.n	800333c <std+0x48>
 8003336:	33d0      	adds	r3, #208	@ 0xd0
 8003338:	429c      	cmp	r4, r3
 800333a:	d105      	bne.n	8003348 <std+0x54>
 800333c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003344:	f000 ba58 	b.w	80037f8 <__retarget_lock_init_recursive>
 8003348:	bd10      	pop	{r4, pc}
 800334a:	bf00      	nop
 800334c:	08003559 	.word	0x08003559
 8003350:	0800357b 	.word	0x0800357b
 8003354:	080035b3 	.word	0x080035b3
 8003358:	080035d7 	.word	0x080035d7
 800335c:	2000016c 	.word	0x2000016c

08003360 <stdio_exit_handler>:
 8003360:	4a02      	ldr	r2, [pc, #8]	@ (800336c <stdio_exit_handler+0xc>)
 8003362:	4903      	ldr	r1, [pc, #12]	@ (8003370 <stdio_exit_handler+0x10>)
 8003364:	4803      	ldr	r0, [pc, #12]	@ (8003374 <stdio_exit_handler+0x14>)
 8003366:	f000 b869 	b.w	800343c <_fwalk_sglue>
 800336a:	bf00      	nop
 800336c:	20000014 	.word	0x20000014
 8003370:	08004095 	.word	0x08004095
 8003374:	20000024 	.word	0x20000024

08003378 <cleanup_stdio>:
 8003378:	6841      	ldr	r1, [r0, #4]
 800337a:	4b0c      	ldr	r3, [pc, #48]	@ (80033ac <cleanup_stdio+0x34>)
 800337c:	4299      	cmp	r1, r3
 800337e:	b510      	push	{r4, lr}
 8003380:	4604      	mov	r4, r0
 8003382:	d001      	beq.n	8003388 <cleanup_stdio+0x10>
 8003384:	f000 fe86 	bl	8004094 <_fflush_r>
 8003388:	68a1      	ldr	r1, [r4, #8]
 800338a:	4b09      	ldr	r3, [pc, #36]	@ (80033b0 <cleanup_stdio+0x38>)
 800338c:	4299      	cmp	r1, r3
 800338e:	d002      	beq.n	8003396 <cleanup_stdio+0x1e>
 8003390:	4620      	mov	r0, r4
 8003392:	f000 fe7f 	bl	8004094 <_fflush_r>
 8003396:	68e1      	ldr	r1, [r4, #12]
 8003398:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <cleanup_stdio+0x3c>)
 800339a:	4299      	cmp	r1, r3
 800339c:	d004      	beq.n	80033a8 <cleanup_stdio+0x30>
 800339e:	4620      	mov	r0, r4
 80033a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033a4:	f000 be76 	b.w	8004094 <_fflush_r>
 80033a8:	bd10      	pop	{r4, pc}
 80033aa:	bf00      	nop
 80033ac:	2000016c 	.word	0x2000016c
 80033b0:	200001d4 	.word	0x200001d4
 80033b4:	2000023c 	.word	0x2000023c

080033b8 <global_stdio_init.part.0>:
 80033b8:	b510      	push	{r4, lr}
 80033ba:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <global_stdio_init.part.0+0x30>)
 80033bc:	4c0b      	ldr	r4, [pc, #44]	@ (80033ec <global_stdio_init.part.0+0x34>)
 80033be:	4a0c      	ldr	r2, [pc, #48]	@ (80033f0 <global_stdio_init.part.0+0x38>)
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	4620      	mov	r0, r4
 80033c4:	2200      	movs	r2, #0
 80033c6:	2104      	movs	r1, #4
 80033c8:	f7ff ff94 	bl	80032f4 <std>
 80033cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80033d0:	2201      	movs	r2, #1
 80033d2:	2109      	movs	r1, #9
 80033d4:	f7ff ff8e 	bl	80032f4 <std>
 80033d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80033dc:	2202      	movs	r2, #2
 80033de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033e2:	2112      	movs	r1, #18
 80033e4:	f7ff bf86 	b.w	80032f4 <std>
 80033e8:	200002a4 	.word	0x200002a4
 80033ec:	2000016c 	.word	0x2000016c
 80033f0:	08003361 	.word	0x08003361

080033f4 <__sfp_lock_acquire>:
 80033f4:	4801      	ldr	r0, [pc, #4]	@ (80033fc <__sfp_lock_acquire+0x8>)
 80033f6:	f000 ba00 	b.w	80037fa <__retarget_lock_acquire_recursive>
 80033fa:	bf00      	nop
 80033fc:	200002ad 	.word	0x200002ad

08003400 <__sfp_lock_release>:
 8003400:	4801      	ldr	r0, [pc, #4]	@ (8003408 <__sfp_lock_release+0x8>)
 8003402:	f000 b9fb 	b.w	80037fc <__retarget_lock_release_recursive>
 8003406:	bf00      	nop
 8003408:	200002ad 	.word	0x200002ad

0800340c <__sinit>:
 800340c:	b510      	push	{r4, lr}
 800340e:	4604      	mov	r4, r0
 8003410:	f7ff fff0 	bl	80033f4 <__sfp_lock_acquire>
 8003414:	6a23      	ldr	r3, [r4, #32]
 8003416:	b11b      	cbz	r3, 8003420 <__sinit+0x14>
 8003418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800341c:	f7ff bff0 	b.w	8003400 <__sfp_lock_release>
 8003420:	4b04      	ldr	r3, [pc, #16]	@ (8003434 <__sinit+0x28>)
 8003422:	6223      	str	r3, [r4, #32]
 8003424:	4b04      	ldr	r3, [pc, #16]	@ (8003438 <__sinit+0x2c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f5      	bne.n	8003418 <__sinit+0xc>
 800342c:	f7ff ffc4 	bl	80033b8 <global_stdio_init.part.0>
 8003430:	e7f2      	b.n	8003418 <__sinit+0xc>
 8003432:	bf00      	nop
 8003434:	08003379 	.word	0x08003379
 8003438:	200002a4 	.word	0x200002a4

0800343c <_fwalk_sglue>:
 800343c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003440:	4607      	mov	r7, r0
 8003442:	4688      	mov	r8, r1
 8003444:	4614      	mov	r4, r2
 8003446:	2600      	movs	r6, #0
 8003448:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800344c:	f1b9 0901 	subs.w	r9, r9, #1
 8003450:	d505      	bpl.n	800345e <_fwalk_sglue+0x22>
 8003452:	6824      	ldr	r4, [r4, #0]
 8003454:	2c00      	cmp	r4, #0
 8003456:	d1f7      	bne.n	8003448 <_fwalk_sglue+0xc>
 8003458:	4630      	mov	r0, r6
 800345a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800345e:	89ab      	ldrh	r3, [r5, #12]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d907      	bls.n	8003474 <_fwalk_sglue+0x38>
 8003464:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003468:	3301      	adds	r3, #1
 800346a:	d003      	beq.n	8003474 <_fwalk_sglue+0x38>
 800346c:	4629      	mov	r1, r5
 800346e:	4638      	mov	r0, r7
 8003470:	47c0      	blx	r8
 8003472:	4306      	orrs	r6, r0
 8003474:	3568      	adds	r5, #104	@ 0x68
 8003476:	e7e9      	b.n	800344c <_fwalk_sglue+0x10>

08003478 <iprintf>:
 8003478:	b40f      	push	{r0, r1, r2, r3}
 800347a:	b507      	push	{r0, r1, r2, lr}
 800347c:	4906      	ldr	r1, [pc, #24]	@ (8003498 <iprintf+0x20>)
 800347e:	ab04      	add	r3, sp, #16
 8003480:	6808      	ldr	r0, [r1, #0]
 8003482:	f853 2b04 	ldr.w	r2, [r3], #4
 8003486:	6881      	ldr	r1, [r0, #8]
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	f000 fadb 	bl	8003a44 <_vfiprintf_r>
 800348e:	b003      	add	sp, #12
 8003490:	f85d eb04 	ldr.w	lr, [sp], #4
 8003494:	b004      	add	sp, #16
 8003496:	4770      	bx	lr
 8003498:	20000020 	.word	0x20000020

0800349c <_puts_r>:
 800349c:	6a03      	ldr	r3, [r0, #32]
 800349e:	b570      	push	{r4, r5, r6, lr}
 80034a0:	6884      	ldr	r4, [r0, #8]
 80034a2:	4605      	mov	r5, r0
 80034a4:	460e      	mov	r6, r1
 80034a6:	b90b      	cbnz	r3, 80034ac <_puts_r+0x10>
 80034a8:	f7ff ffb0 	bl	800340c <__sinit>
 80034ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034ae:	07db      	lsls	r3, r3, #31
 80034b0:	d405      	bmi.n	80034be <_puts_r+0x22>
 80034b2:	89a3      	ldrh	r3, [r4, #12]
 80034b4:	0598      	lsls	r0, r3, #22
 80034b6:	d402      	bmi.n	80034be <_puts_r+0x22>
 80034b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034ba:	f000 f99e 	bl	80037fa <__retarget_lock_acquire_recursive>
 80034be:	89a3      	ldrh	r3, [r4, #12]
 80034c0:	0719      	lsls	r1, r3, #28
 80034c2:	d502      	bpl.n	80034ca <_puts_r+0x2e>
 80034c4:	6923      	ldr	r3, [r4, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d135      	bne.n	8003536 <_puts_r+0x9a>
 80034ca:	4621      	mov	r1, r4
 80034cc:	4628      	mov	r0, r5
 80034ce:	f000 f8c5 	bl	800365c <__swsetup_r>
 80034d2:	b380      	cbz	r0, 8003536 <_puts_r+0x9a>
 80034d4:	f04f 35ff 	mov.w	r5, #4294967295
 80034d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034da:	07da      	lsls	r2, r3, #31
 80034dc:	d405      	bmi.n	80034ea <_puts_r+0x4e>
 80034de:	89a3      	ldrh	r3, [r4, #12]
 80034e0:	059b      	lsls	r3, r3, #22
 80034e2:	d402      	bmi.n	80034ea <_puts_r+0x4e>
 80034e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034e6:	f000 f989 	bl	80037fc <__retarget_lock_release_recursive>
 80034ea:	4628      	mov	r0, r5
 80034ec:	bd70      	pop	{r4, r5, r6, pc}
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	da04      	bge.n	80034fc <_puts_r+0x60>
 80034f2:	69a2      	ldr	r2, [r4, #24]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	dc17      	bgt.n	8003528 <_puts_r+0x8c>
 80034f8:	290a      	cmp	r1, #10
 80034fa:	d015      	beq.n	8003528 <_puts_r+0x8c>
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	6022      	str	r2, [r4, #0]
 8003502:	7019      	strb	r1, [r3, #0]
 8003504:	68a3      	ldr	r3, [r4, #8]
 8003506:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800350a:	3b01      	subs	r3, #1
 800350c:	60a3      	str	r3, [r4, #8]
 800350e:	2900      	cmp	r1, #0
 8003510:	d1ed      	bne.n	80034ee <_puts_r+0x52>
 8003512:	2b00      	cmp	r3, #0
 8003514:	da11      	bge.n	800353a <_puts_r+0x9e>
 8003516:	4622      	mov	r2, r4
 8003518:	210a      	movs	r1, #10
 800351a:	4628      	mov	r0, r5
 800351c:	f000 f85f 	bl	80035de <__swbuf_r>
 8003520:	3001      	adds	r0, #1
 8003522:	d0d7      	beq.n	80034d4 <_puts_r+0x38>
 8003524:	250a      	movs	r5, #10
 8003526:	e7d7      	b.n	80034d8 <_puts_r+0x3c>
 8003528:	4622      	mov	r2, r4
 800352a:	4628      	mov	r0, r5
 800352c:	f000 f857 	bl	80035de <__swbuf_r>
 8003530:	3001      	adds	r0, #1
 8003532:	d1e7      	bne.n	8003504 <_puts_r+0x68>
 8003534:	e7ce      	b.n	80034d4 <_puts_r+0x38>
 8003536:	3e01      	subs	r6, #1
 8003538:	e7e4      	b.n	8003504 <_puts_r+0x68>
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	6022      	str	r2, [r4, #0]
 8003540:	220a      	movs	r2, #10
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	e7ee      	b.n	8003524 <_puts_r+0x88>
	...

08003548 <puts>:
 8003548:	4b02      	ldr	r3, [pc, #8]	@ (8003554 <puts+0xc>)
 800354a:	4601      	mov	r1, r0
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	f7ff bfa5 	b.w	800349c <_puts_r>
 8003552:	bf00      	nop
 8003554:	20000020 	.word	0x20000020

08003558 <__sread>:
 8003558:	b510      	push	{r4, lr}
 800355a:	460c      	mov	r4, r1
 800355c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003560:	f000 f8fc 	bl	800375c <_read_r>
 8003564:	2800      	cmp	r0, #0
 8003566:	bfab      	itete	ge
 8003568:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800356a:	89a3      	ldrhlt	r3, [r4, #12]
 800356c:	181b      	addge	r3, r3, r0
 800356e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003572:	bfac      	ite	ge
 8003574:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003576:	81a3      	strhlt	r3, [r4, #12]
 8003578:	bd10      	pop	{r4, pc}

0800357a <__swrite>:
 800357a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800357e:	461f      	mov	r7, r3
 8003580:	898b      	ldrh	r3, [r1, #12]
 8003582:	05db      	lsls	r3, r3, #23
 8003584:	4605      	mov	r5, r0
 8003586:	460c      	mov	r4, r1
 8003588:	4616      	mov	r6, r2
 800358a:	d505      	bpl.n	8003598 <__swrite+0x1e>
 800358c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003590:	2302      	movs	r3, #2
 8003592:	2200      	movs	r2, #0
 8003594:	f000 f8d0 	bl	8003738 <_lseek_r>
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800359e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035a2:	81a3      	strh	r3, [r4, #12]
 80035a4:	4632      	mov	r2, r6
 80035a6:	463b      	mov	r3, r7
 80035a8:	4628      	mov	r0, r5
 80035aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035ae:	f000 b8e7 	b.w	8003780 <_write_r>

080035b2 <__sseek>:
 80035b2:	b510      	push	{r4, lr}
 80035b4:	460c      	mov	r4, r1
 80035b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ba:	f000 f8bd 	bl	8003738 <_lseek_r>
 80035be:	1c43      	adds	r3, r0, #1
 80035c0:	89a3      	ldrh	r3, [r4, #12]
 80035c2:	bf15      	itete	ne
 80035c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80035c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80035ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80035ce:	81a3      	strheq	r3, [r4, #12]
 80035d0:	bf18      	it	ne
 80035d2:	81a3      	strhne	r3, [r4, #12]
 80035d4:	bd10      	pop	{r4, pc}

080035d6 <__sclose>:
 80035d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035da:	f000 b89d 	b.w	8003718 <_close_r>

080035de <__swbuf_r>:
 80035de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e0:	460e      	mov	r6, r1
 80035e2:	4614      	mov	r4, r2
 80035e4:	4605      	mov	r5, r0
 80035e6:	b118      	cbz	r0, 80035f0 <__swbuf_r+0x12>
 80035e8:	6a03      	ldr	r3, [r0, #32]
 80035ea:	b90b      	cbnz	r3, 80035f0 <__swbuf_r+0x12>
 80035ec:	f7ff ff0e 	bl	800340c <__sinit>
 80035f0:	69a3      	ldr	r3, [r4, #24]
 80035f2:	60a3      	str	r3, [r4, #8]
 80035f4:	89a3      	ldrh	r3, [r4, #12]
 80035f6:	071a      	lsls	r2, r3, #28
 80035f8:	d501      	bpl.n	80035fe <__swbuf_r+0x20>
 80035fa:	6923      	ldr	r3, [r4, #16]
 80035fc:	b943      	cbnz	r3, 8003610 <__swbuf_r+0x32>
 80035fe:	4621      	mov	r1, r4
 8003600:	4628      	mov	r0, r5
 8003602:	f000 f82b 	bl	800365c <__swsetup_r>
 8003606:	b118      	cbz	r0, 8003610 <__swbuf_r+0x32>
 8003608:	f04f 37ff 	mov.w	r7, #4294967295
 800360c:	4638      	mov	r0, r7
 800360e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	6922      	ldr	r2, [r4, #16]
 8003614:	1a98      	subs	r0, r3, r2
 8003616:	6963      	ldr	r3, [r4, #20]
 8003618:	b2f6      	uxtb	r6, r6
 800361a:	4283      	cmp	r3, r0
 800361c:	4637      	mov	r7, r6
 800361e:	dc05      	bgt.n	800362c <__swbuf_r+0x4e>
 8003620:	4621      	mov	r1, r4
 8003622:	4628      	mov	r0, r5
 8003624:	f000 fd36 	bl	8004094 <_fflush_r>
 8003628:	2800      	cmp	r0, #0
 800362a:	d1ed      	bne.n	8003608 <__swbuf_r+0x2a>
 800362c:	68a3      	ldr	r3, [r4, #8]
 800362e:	3b01      	subs	r3, #1
 8003630:	60a3      	str	r3, [r4, #8]
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	6022      	str	r2, [r4, #0]
 8003638:	701e      	strb	r6, [r3, #0]
 800363a:	6962      	ldr	r2, [r4, #20]
 800363c:	1c43      	adds	r3, r0, #1
 800363e:	429a      	cmp	r2, r3
 8003640:	d004      	beq.n	800364c <__swbuf_r+0x6e>
 8003642:	89a3      	ldrh	r3, [r4, #12]
 8003644:	07db      	lsls	r3, r3, #31
 8003646:	d5e1      	bpl.n	800360c <__swbuf_r+0x2e>
 8003648:	2e0a      	cmp	r6, #10
 800364a:	d1df      	bne.n	800360c <__swbuf_r+0x2e>
 800364c:	4621      	mov	r1, r4
 800364e:	4628      	mov	r0, r5
 8003650:	f000 fd20 	bl	8004094 <_fflush_r>
 8003654:	2800      	cmp	r0, #0
 8003656:	d0d9      	beq.n	800360c <__swbuf_r+0x2e>
 8003658:	e7d6      	b.n	8003608 <__swbuf_r+0x2a>
	...

0800365c <__swsetup_r>:
 800365c:	b538      	push	{r3, r4, r5, lr}
 800365e:	4b29      	ldr	r3, [pc, #164]	@ (8003704 <__swsetup_r+0xa8>)
 8003660:	4605      	mov	r5, r0
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	460c      	mov	r4, r1
 8003666:	b118      	cbz	r0, 8003670 <__swsetup_r+0x14>
 8003668:	6a03      	ldr	r3, [r0, #32]
 800366a:	b90b      	cbnz	r3, 8003670 <__swsetup_r+0x14>
 800366c:	f7ff fece 	bl	800340c <__sinit>
 8003670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003674:	0719      	lsls	r1, r3, #28
 8003676:	d422      	bmi.n	80036be <__swsetup_r+0x62>
 8003678:	06da      	lsls	r2, r3, #27
 800367a:	d407      	bmi.n	800368c <__swsetup_r+0x30>
 800367c:	2209      	movs	r2, #9
 800367e:	602a      	str	r2, [r5, #0]
 8003680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003684:	81a3      	strh	r3, [r4, #12]
 8003686:	f04f 30ff 	mov.w	r0, #4294967295
 800368a:	e033      	b.n	80036f4 <__swsetup_r+0x98>
 800368c:	0758      	lsls	r0, r3, #29
 800368e:	d512      	bpl.n	80036b6 <__swsetup_r+0x5a>
 8003690:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003692:	b141      	cbz	r1, 80036a6 <__swsetup_r+0x4a>
 8003694:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003698:	4299      	cmp	r1, r3
 800369a:	d002      	beq.n	80036a2 <__swsetup_r+0x46>
 800369c:	4628      	mov	r0, r5
 800369e:	f000 f8af 	bl	8003800 <_free_r>
 80036a2:	2300      	movs	r3, #0
 80036a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80036a6:	89a3      	ldrh	r3, [r4, #12]
 80036a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80036ac:	81a3      	strh	r3, [r4, #12]
 80036ae:	2300      	movs	r3, #0
 80036b0:	6063      	str	r3, [r4, #4]
 80036b2:	6923      	ldr	r3, [r4, #16]
 80036b4:	6023      	str	r3, [r4, #0]
 80036b6:	89a3      	ldrh	r3, [r4, #12]
 80036b8:	f043 0308 	orr.w	r3, r3, #8
 80036bc:	81a3      	strh	r3, [r4, #12]
 80036be:	6923      	ldr	r3, [r4, #16]
 80036c0:	b94b      	cbnz	r3, 80036d6 <__swsetup_r+0x7a>
 80036c2:	89a3      	ldrh	r3, [r4, #12]
 80036c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80036c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036cc:	d003      	beq.n	80036d6 <__swsetup_r+0x7a>
 80036ce:	4621      	mov	r1, r4
 80036d0:	4628      	mov	r0, r5
 80036d2:	f000 fd2d 	bl	8004130 <__smakebuf_r>
 80036d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036da:	f013 0201 	ands.w	r2, r3, #1
 80036de:	d00a      	beq.n	80036f6 <__swsetup_r+0x9a>
 80036e0:	2200      	movs	r2, #0
 80036e2:	60a2      	str	r2, [r4, #8]
 80036e4:	6962      	ldr	r2, [r4, #20]
 80036e6:	4252      	negs	r2, r2
 80036e8:	61a2      	str	r2, [r4, #24]
 80036ea:	6922      	ldr	r2, [r4, #16]
 80036ec:	b942      	cbnz	r2, 8003700 <__swsetup_r+0xa4>
 80036ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80036f2:	d1c5      	bne.n	8003680 <__swsetup_r+0x24>
 80036f4:	bd38      	pop	{r3, r4, r5, pc}
 80036f6:	0799      	lsls	r1, r3, #30
 80036f8:	bf58      	it	pl
 80036fa:	6962      	ldrpl	r2, [r4, #20]
 80036fc:	60a2      	str	r2, [r4, #8]
 80036fe:	e7f4      	b.n	80036ea <__swsetup_r+0x8e>
 8003700:	2000      	movs	r0, #0
 8003702:	e7f7      	b.n	80036f4 <__swsetup_r+0x98>
 8003704:	20000020 	.word	0x20000020

08003708 <memset>:
 8003708:	4402      	add	r2, r0
 800370a:	4603      	mov	r3, r0
 800370c:	4293      	cmp	r3, r2
 800370e:	d100      	bne.n	8003712 <memset+0xa>
 8003710:	4770      	bx	lr
 8003712:	f803 1b01 	strb.w	r1, [r3], #1
 8003716:	e7f9      	b.n	800370c <memset+0x4>

08003718 <_close_r>:
 8003718:	b538      	push	{r3, r4, r5, lr}
 800371a:	4d06      	ldr	r5, [pc, #24]	@ (8003734 <_close_r+0x1c>)
 800371c:	2300      	movs	r3, #0
 800371e:	4604      	mov	r4, r0
 8003720:	4608      	mov	r0, r1
 8003722:	602b      	str	r3, [r5, #0]
 8003724:	f7fd f9fb 	bl	8000b1e <_close>
 8003728:	1c43      	adds	r3, r0, #1
 800372a:	d102      	bne.n	8003732 <_close_r+0x1a>
 800372c:	682b      	ldr	r3, [r5, #0]
 800372e:	b103      	cbz	r3, 8003732 <_close_r+0x1a>
 8003730:	6023      	str	r3, [r4, #0]
 8003732:	bd38      	pop	{r3, r4, r5, pc}
 8003734:	200002a8 	.word	0x200002a8

08003738 <_lseek_r>:
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	4d07      	ldr	r5, [pc, #28]	@ (8003758 <_lseek_r+0x20>)
 800373c:	4604      	mov	r4, r0
 800373e:	4608      	mov	r0, r1
 8003740:	4611      	mov	r1, r2
 8003742:	2200      	movs	r2, #0
 8003744:	602a      	str	r2, [r5, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	f7fd fa10 	bl	8000b6c <_lseek>
 800374c:	1c43      	adds	r3, r0, #1
 800374e:	d102      	bne.n	8003756 <_lseek_r+0x1e>
 8003750:	682b      	ldr	r3, [r5, #0]
 8003752:	b103      	cbz	r3, 8003756 <_lseek_r+0x1e>
 8003754:	6023      	str	r3, [r4, #0]
 8003756:	bd38      	pop	{r3, r4, r5, pc}
 8003758:	200002a8 	.word	0x200002a8

0800375c <_read_r>:
 800375c:	b538      	push	{r3, r4, r5, lr}
 800375e:	4d07      	ldr	r5, [pc, #28]	@ (800377c <_read_r+0x20>)
 8003760:	4604      	mov	r4, r0
 8003762:	4608      	mov	r0, r1
 8003764:	4611      	mov	r1, r2
 8003766:	2200      	movs	r2, #0
 8003768:	602a      	str	r2, [r5, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	f7fd f99e 	bl	8000aac <_read>
 8003770:	1c43      	adds	r3, r0, #1
 8003772:	d102      	bne.n	800377a <_read_r+0x1e>
 8003774:	682b      	ldr	r3, [r5, #0]
 8003776:	b103      	cbz	r3, 800377a <_read_r+0x1e>
 8003778:	6023      	str	r3, [r4, #0]
 800377a:	bd38      	pop	{r3, r4, r5, pc}
 800377c:	200002a8 	.word	0x200002a8

08003780 <_write_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4d07      	ldr	r5, [pc, #28]	@ (80037a0 <_write_r+0x20>)
 8003784:	4604      	mov	r4, r0
 8003786:	4608      	mov	r0, r1
 8003788:	4611      	mov	r1, r2
 800378a:	2200      	movs	r2, #0
 800378c:	602a      	str	r2, [r5, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	f7fd f9a9 	bl	8000ae6 <_write>
 8003794:	1c43      	adds	r3, r0, #1
 8003796:	d102      	bne.n	800379e <_write_r+0x1e>
 8003798:	682b      	ldr	r3, [r5, #0]
 800379a:	b103      	cbz	r3, 800379e <_write_r+0x1e>
 800379c:	6023      	str	r3, [r4, #0]
 800379e:	bd38      	pop	{r3, r4, r5, pc}
 80037a0:	200002a8 	.word	0x200002a8

080037a4 <__errno>:
 80037a4:	4b01      	ldr	r3, [pc, #4]	@ (80037ac <__errno+0x8>)
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000020 	.word	0x20000020

080037b0 <__libc_init_array>:
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	4d0d      	ldr	r5, [pc, #52]	@ (80037e8 <__libc_init_array+0x38>)
 80037b4:	4c0d      	ldr	r4, [pc, #52]	@ (80037ec <__libc_init_array+0x3c>)
 80037b6:	1b64      	subs	r4, r4, r5
 80037b8:	10a4      	asrs	r4, r4, #2
 80037ba:	2600      	movs	r6, #0
 80037bc:	42a6      	cmp	r6, r4
 80037be:	d109      	bne.n	80037d4 <__libc_init_array+0x24>
 80037c0:	4d0b      	ldr	r5, [pc, #44]	@ (80037f0 <__libc_init_array+0x40>)
 80037c2:	4c0c      	ldr	r4, [pc, #48]	@ (80037f4 <__libc_init_array+0x44>)
 80037c4:	f000 fd22 	bl	800420c <_init>
 80037c8:	1b64      	subs	r4, r4, r5
 80037ca:	10a4      	asrs	r4, r4, #2
 80037cc:	2600      	movs	r6, #0
 80037ce:	42a6      	cmp	r6, r4
 80037d0:	d105      	bne.n	80037de <__libc_init_array+0x2e>
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
 80037d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d8:	4798      	blx	r3
 80037da:	3601      	adds	r6, #1
 80037dc:	e7ee      	b.n	80037bc <__libc_init_array+0xc>
 80037de:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e2:	4798      	blx	r3
 80037e4:	3601      	adds	r6, #1
 80037e6:	e7f2      	b.n	80037ce <__libc_init_array+0x1e>
 80037e8:	080042c0 	.word	0x080042c0
 80037ec:	080042c0 	.word	0x080042c0
 80037f0:	080042c0 	.word	0x080042c0
 80037f4:	080042c4 	.word	0x080042c4

080037f8 <__retarget_lock_init_recursive>:
 80037f8:	4770      	bx	lr

080037fa <__retarget_lock_acquire_recursive>:
 80037fa:	4770      	bx	lr

080037fc <__retarget_lock_release_recursive>:
 80037fc:	4770      	bx	lr
	...

08003800 <_free_r>:
 8003800:	b538      	push	{r3, r4, r5, lr}
 8003802:	4605      	mov	r5, r0
 8003804:	2900      	cmp	r1, #0
 8003806:	d041      	beq.n	800388c <_free_r+0x8c>
 8003808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800380c:	1f0c      	subs	r4, r1, #4
 800380e:	2b00      	cmp	r3, #0
 8003810:	bfb8      	it	lt
 8003812:	18e4      	addlt	r4, r4, r3
 8003814:	f000 f8e0 	bl	80039d8 <__malloc_lock>
 8003818:	4a1d      	ldr	r2, [pc, #116]	@ (8003890 <_free_r+0x90>)
 800381a:	6813      	ldr	r3, [r2, #0]
 800381c:	b933      	cbnz	r3, 800382c <_free_r+0x2c>
 800381e:	6063      	str	r3, [r4, #4]
 8003820:	6014      	str	r4, [r2, #0]
 8003822:	4628      	mov	r0, r5
 8003824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003828:	f000 b8dc 	b.w	80039e4 <__malloc_unlock>
 800382c:	42a3      	cmp	r3, r4
 800382e:	d908      	bls.n	8003842 <_free_r+0x42>
 8003830:	6820      	ldr	r0, [r4, #0]
 8003832:	1821      	adds	r1, r4, r0
 8003834:	428b      	cmp	r3, r1
 8003836:	bf01      	itttt	eq
 8003838:	6819      	ldreq	r1, [r3, #0]
 800383a:	685b      	ldreq	r3, [r3, #4]
 800383c:	1809      	addeq	r1, r1, r0
 800383e:	6021      	streq	r1, [r4, #0]
 8003840:	e7ed      	b.n	800381e <_free_r+0x1e>
 8003842:	461a      	mov	r2, r3
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	b10b      	cbz	r3, 800384c <_free_r+0x4c>
 8003848:	42a3      	cmp	r3, r4
 800384a:	d9fa      	bls.n	8003842 <_free_r+0x42>
 800384c:	6811      	ldr	r1, [r2, #0]
 800384e:	1850      	adds	r0, r2, r1
 8003850:	42a0      	cmp	r0, r4
 8003852:	d10b      	bne.n	800386c <_free_r+0x6c>
 8003854:	6820      	ldr	r0, [r4, #0]
 8003856:	4401      	add	r1, r0
 8003858:	1850      	adds	r0, r2, r1
 800385a:	4283      	cmp	r3, r0
 800385c:	6011      	str	r1, [r2, #0]
 800385e:	d1e0      	bne.n	8003822 <_free_r+0x22>
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	6053      	str	r3, [r2, #4]
 8003866:	4408      	add	r0, r1
 8003868:	6010      	str	r0, [r2, #0]
 800386a:	e7da      	b.n	8003822 <_free_r+0x22>
 800386c:	d902      	bls.n	8003874 <_free_r+0x74>
 800386e:	230c      	movs	r3, #12
 8003870:	602b      	str	r3, [r5, #0]
 8003872:	e7d6      	b.n	8003822 <_free_r+0x22>
 8003874:	6820      	ldr	r0, [r4, #0]
 8003876:	1821      	adds	r1, r4, r0
 8003878:	428b      	cmp	r3, r1
 800387a:	bf04      	itt	eq
 800387c:	6819      	ldreq	r1, [r3, #0]
 800387e:	685b      	ldreq	r3, [r3, #4]
 8003880:	6063      	str	r3, [r4, #4]
 8003882:	bf04      	itt	eq
 8003884:	1809      	addeq	r1, r1, r0
 8003886:	6021      	streq	r1, [r4, #0]
 8003888:	6054      	str	r4, [r2, #4]
 800388a:	e7ca      	b.n	8003822 <_free_r+0x22>
 800388c:	bd38      	pop	{r3, r4, r5, pc}
 800388e:	bf00      	nop
 8003890:	200002b4 	.word	0x200002b4

08003894 <sbrk_aligned>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	4e0f      	ldr	r6, [pc, #60]	@ (80038d4 <sbrk_aligned+0x40>)
 8003898:	460c      	mov	r4, r1
 800389a:	6831      	ldr	r1, [r6, #0]
 800389c:	4605      	mov	r5, r0
 800389e:	b911      	cbnz	r1, 80038a6 <sbrk_aligned+0x12>
 80038a0:	f000 fca4 	bl	80041ec <_sbrk_r>
 80038a4:	6030      	str	r0, [r6, #0]
 80038a6:	4621      	mov	r1, r4
 80038a8:	4628      	mov	r0, r5
 80038aa:	f000 fc9f 	bl	80041ec <_sbrk_r>
 80038ae:	1c43      	adds	r3, r0, #1
 80038b0:	d103      	bne.n	80038ba <sbrk_aligned+0x26>
 80038b2:	f04f 34ff 	mov.w	r4, #4294967295
 80038b6:	4620      	mov	r0, r4
 80038b8:	bd70      	pop	{r4, r5, r6, pc}
 80038ba:	1cc4      	adds	r4, r0, #3
 80038bc:	f024 0403 	bic.w	r4, r4, #3
 80038c0:	42a0      	cmp	r0, r4
 80038c2:	d0f8      	beq.n	80038b6 <sbrk_aligned+0x22>
 80038c4:	1a21      	subs	r1, r4, r0
 80038c6:	4628      	mov	r0, r5
 80038c8:	f000 fc90 	bl	80041ec <_sbrk_r>
 80038cc:	3001      	adds	r0, #1
 80038ce:	d1f2      	bne.n	80038b6 <sbrk_aligned+0x22>
 80038d0:	e7ef      	b.n	80038b2 <sbrk_aligned+0x1e>
 80038d2:	bf00      	nop
 80038d4:	200002b0 	.word	0x200002b0

080038d8 <_malloc_r>:
 80038d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038dc:	1ccd      	adds	r5, r1, #3
 80038de:	f025 0503 	bic.w	r5, r5, #3
 80038e2:	3508      	adds	r5, #8
 80038e4:	2d0c      	cmp	r5, #12
 80038e6:	bf38      	it	cc
 80038e8:	250c      	movcc	r5, #12
 80038ea:	2d00      	cmp	r5, #0
 80038ec:	4606      	mov	r6, r0
 80038ee:	db01      	blt.n	80038f4 <_malloc_r+0x1c>
 80038f0:	42a9      	cmp	r1, r5
 80038f2:	d904      	bls.n	80038fe <_malloc_r+0x26>
 80038f4:	230c      	movs	r3, #12
 80038f6:	6033      	str	r3, [r6, #0]
 80038f8:	2000      	movs	r0, #0
 80038fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80039d4 <_malloc_r+0xfc>
 8003902:	f000 f869 	bl	80039d8 <__malloc_lock>
 8003906:	f8d8 3000 	ldr.w	r3, [r8]
 800390a:	461c      	mov	r4, r3
 800390c:	bb44      	cbnz	r4, 8003960 <_malloc_r+0x88>
 800390e:	4629      	mov	r1, r5
 8003910:	4630      	mov	r0, r6
 8003912:	f7ff ffbf 	bl	8003894 <sbrk_aligned>
 8003916:	1c43      	adds	r3, r0, #1
 8003918:	4604      	mov	r4, r0
 800391a:	d158      	bne.n	80039ce <_malloc_r+0xf6>
 800391c:	f8d8 4000 	ldr.w	r4, [r8]
 8003920:	4627      	mov	r7, r4
 8003922:	2f00      	cmp	r7, #0
 8003924:	d143      	bne.n	80039ae <_malloc_r+0xd6>
 8003926:	2c00      	cmp	r4, #0
 8003928:	d04b      	beq.n	80039c2 <_malloc_r+0xea>
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	4639      	mov	r1, r7
 800392e:	4630      	mov	r0, r6
 8003930:	eb04 0903 	add.w	r9, r4, r3
 8003934:	f000 fc5a 	bl	80041ec <_sbrk_r>
 8003938:	4581      	cmp	r9, r0
 800393a:	d142      	bne.n	80039c2 <_malloc_r+0xea>
 800393c:	6821      	ldr	r1, [r4, #0]
 800393e:	1a6d      	subs	r5, r5, r1
 8003940:	4629      	mov	r1, r5
 8003942:	4630      	mov	r0, r6
 8003944:	f7ff ffa6 	bl	8003894 <sbrk_aligned>
 8003948:	3001      	adds	r0, #1
 800394a:	d03a      	beq.n	80039c2 <_malloc_r+0xea>
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	442b      	add	r3, r5
 8003950:	6023      	str	r3, [r4, #0]
 8003952:	f8d8 3000 	ldr.w	r3, [r8]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	bb62      	cbnz	r2, 80039b4 <_malloc_r+0xdc>
 800395a:	f8c8 7000 	str.w	r7, [r8]
 800395e:	e00f      	b.n	8003980 <_malloc_r+0xa8>
 8003960:	6822      	ldr	r2, [r4, #0]
 8003962:	1b52      	subs	r2, r2, r5
 8003964:	d420      	bmi.n	80039a8 <_malloc_r+0xd0>
 8003966:	2a0b      	cmp	r2, #11
 8003968:	d917      	bls.n	800399a <_malloc_r+0xc2>
 800396a:	1961      	adds	r1, r4, r5
 800396c:	42a3      	cmp	r3, r4
 800396e:	6025      	str	r5, [r4, #0]
 8003970:	bf18      	it	ne
 8003972:	6059      	strne	r1, [r3, #4]
 8003974:	6863      	ldr	r3, [r4, #4]
 8003976:	bf08      	it	eq
 8003978:	f8c8 1000 	streq.w	r1, [r8]
 800397c:	5162      	str	r2, [r4, r5]
 800397e:	604b      	str	r3, [r1, #4]
 8003980:	4630      	mov	r0, r6
 8003982:	f000 f82f 	bl	80039e4 <__malloc_unlock>
 8003986:	f104 000b 	add.w	r0, r4, #11
 800398a:	1d23      	adds	r3, r4, #4
 800398c:	f020 0007 	bic.w	r0, r0, #7
 8003990:	1ac2      	subs	r2, r0, r3
 8003992:	bf1c      	itt	ne
 8003994:	1a1b      	subne	r3, r3, r0
 8003996:	50a3      	strne	r3, [r4, r2]
 8003998:	e7af      	b.n	80038fa <_malloc_r+0x22>
 800399a:	6862      	ldr	r2, [r4, #4]
 800399c:	42a3      	cmp	r3, r4
 800399e:	bf0c      	ite	eq
 80039a0:	f8c8 2000 	streq.w	r2, [r8]
 80039a4:	605a      	strne	r2, [r3, #4]
 80039a6:	e7eb      	b.n	8003980 <_malloc_r+0xa8>
 80039a8:	4623      	mov	r3, r4
 80039aa:	6864      	ldr	r4, [r4, #4]
 80039ac:	e7ae      	b.n	800390c <_malloc_r+0x34>
 80039ae:	463c      	mov	r4, r7
 80039b0:	687f      	ldr	r7, [r7, #4]
 80039b2:	e7b6      	b.n	8003922 <_malloc_r+0x4a>
 80039b4:	461a      	mov	r2, r3
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	42a3      	cmp	r3, r4
 80039ba:	d1fb      	bne.n	80039b4 <_malloc_r+0xdc>
 80039bc:	2300      	movs	r3, #0
 80039be:	6053      	str	r3, [r2, #4]
 80039c0:	e7de      	b.n	8003980 <_malloc_r+0xa8>
 80039c2:	230c      	movs	r3, #12
 80039c4:	6033      	str	r3, [r6, #0]
 80039c6:	4630      	mov	r0, r6
 80039c8:	f000 f80c 	bl	80039e4 <__malloc_unlock>
 80039cc:	e794      	b.n	80038f8 <_malloc_r+0x20>
 80039ce:	6005      	str	r5, [r0, #0]
 80039d0:	e7d6      	b.n	8003980 <_malloc_r+0xa8>
 80039d2:	bf00      	nop
 80039d4:	200002b4 	.word	0x200002b4

080039d8 <__malloc_lock>:
 80039d8:	4801      	ldr	r0, [pc, #4]	@ (80039e0 <__malloc_lock+0x8>)
 80039da:	f7ff bf0e 	b.w	80037fa <__retarget_lock_acquire_recursive>
 80039de:	bf00      	nop
 80039e0:	200002ac 	.word	0x200002ac

080039e4 <__malloc_unlock>:
 80039e4:	4801      	ldr	r0, [pc, #4]	@ (80039ec <__malloc_unlock+0x8>)
 80039e6:	f7ff bf09 	b.w	80037fc <__retarget_lock_release_recursive>
 80039ea:	bf00      	nop
 80039ec:	200002ac 	.word	0x200002ac

080039f0 <__sfputc_r>:
 80039f0:	6893      	ldr	r3, [r2, #8]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	b410      	push	{r4}
 80039f8:	6093      	str	r3, [r2, #8]
 80039fa:	da08      	bge.n	8003a0e <__sfputc_r+0x1e>
 80039fc:	6994      	ldr	r4, [r2, #24]
 80039fe:	42a3      	cmp	r3, r4
 8003a00:	db01      	blt.n	8003a06 <__sfputc_r+0x16>
 8003a02:	290a      	cmp	r1, #10
 8003a04:	d103      	bne.n	8003a0e <__sfputc_r+0x1e>
 8003a06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a0a:	f7ff bde8 	b.w	80035de <__swbuf_r>
 8003a0e:	6813      	ldr	r3, [r2, #0]
 8003a10:	1c58      	adds	r0, r3, #1
 8003a12:	6010      	str	r0, [r2, #0]
 8003a14:	7019      	strb	r1, [r3, #0]
 8003a16:	4608      	mov	r0, r1
 8003a18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <__sfputs_r>:
 8003a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a20:	4606      	mov	r6, r0
 8003a22:	460f      	mov	r7, r1
 8003a24:	4614      	mov	r4, r2
 8003a26:	18d5      	adds	r5, r2, r3
 8003a28:	42ac      	cmp	r4, r5
 8003a2a:	d101      	bne.n	8003a30 <__sfputs_r+0x12>
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	e007      	b.n	8003a40 <__sfputs_r+0x22>
 8003a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a34:	463a      	mov	r2, r7
 8003a36:	4630      	mov	r0, r6
 8003a38:	f7ff ffda 	bl	80039f0 <__sfputc_r>
 8003a3c:	1c43      	adds	r3, r0, #1
 8003a3e:	d1f3      	bne.n	8003a28 <__sfputs_r+0xa>
 8003a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a44 <_vfiprintf_r>:
 8003a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a48:	460d      	mov	r5, r1
 8003a4a:	b09d      	sub	sp, #116	@ 0x74
 8003a4c:	4614      	mov	r4, r2
 8003a4e:	4698      	mov	r8, r3
 8003a50:	4606      	mov	r6, r0
 8003a52:	b118      	cbz	r0, 8003a5c <_vfiprintf_r+0x18>
 8003a54:	6a03      	ldr	r3, [r0, #32]
 8003a56:	b90b      	cbnz	r3, 8003a5c <_vfiprintf_r+0x18>
 8003a58:	f7ff fcd8 	bl	800340c <__sinit>
 8003a5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a5e:	07d9      	lsls	r1, r3, #31
 8003a60:	d405      	bmi.n	8003a6e <_vfiprintf_r+0x2a>
 8003a62:	89ab      	ldrh	r3, [r5, #12]
 8003a64:	059a      	lsls	r2, r3, #22
 8003a66:	d402      	bmi.n	8003a6e <_vfiprintf_r+0x2a>
 8003a68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a6a:	f7ff fec6 	bl	80037fa <__retarget_lock_acquire_recursive>
 8003a6e:	89ab      	ldrh	r3, [r5, #12]
 8003a70:	071b      	lsls	r3, r3, #28
 8003a72:	d501      	bpl.n	8003a78 <_vfiprintf_r+0x34>
 8003a74:	692b      	ldr	r3, [r5, #16]
 8003a76:	b99b      	cbnz	r3, 8003aa0 <_vfiprintf_r+0x5c>
 8003a78:	4629      	mov	r1, r5
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	f7ff fdee 	bl	800365c <__swsetup_r>
 8003a80:	b170      	cbz	r0, 8003aa0 <_vfiprintf_r+0x5c>
 8003a82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a84:	07dc      	lsls	r4, r3, #31
 8003a86:	d504      	bpl.n	8003a92 <_vfiprintf_r+0x4e>
 8003a88:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8c:	b01d      	add	sp, #116	@ 0x74
 8003a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a92:	89ab      	ldrh	r3, [r5, #12]
 8003a94:	0598      	lsls	r0, r3, #22
 8003a96:	d4f7      	bmi.n	8003a88 <_vfiprintf_r+0x44>
 8003a98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a9a:	f7ff feaf 	bl	80037fc <__retarget_lock_release_recursive>
 8003a9e:	e7f3      	b.n	8003a88 <_vfiprintf_r+0x44>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003aa4:	2320      	movs	r3, #32
 8003aa6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003aaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8003aae:	2330      	movs	r3, #48	@ 0x30
 8003ab0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003c60 <_vfiprintf_r+0x21c>
 8003ab4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ab8:	f04f 0901 	mov.w	r9, #1
 8003abc:	4623      	mov	r3, r4
 8003abe:	469a      	mov	sl, r3
 8003ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ac4:	b10a      	cbz	r2, 8003aca <_vfiprintf_r+0x86>
 8003ac6:	2a25      	cmp	r2, #37	@ 0x25
 8003ac8:	d1f9      	bne.n	8003abe <_vfiprintf_r+0x7a>
 8003aca:	ebba 0b04 	subs.w	fp, sl, r4
 8003ace:	d00b      	beq.n	8003ae8 <_vfiprintf_r+0xa4>
 8003ad0:	465b      	mov	r3, fp
 8003ad2:	4622      	mov	r2, r4
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	f7ff ffa1 	bl	8003a1e <__sfputs_r>
 8003adc:	3001      	adds	r0, #1
 8003ade:	f000 80a7 	beq.w	8003c30 <_vfiprintf_r+0x1ec>
 8003ae2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ae4:	445a      	add	r2, fp
 8003ae6:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 809f 	beq.w	8003c30 <_vfiprintf_r+0x1ec>
 8003af2:	2300      	movs	r3, #0
 8003af4:	f04f 32ff 	mov.w	r2, #4294967295
 8003af8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003afc:	f10a 0a01 	add.w	sl, sl, #1
 8003b00:	9304      	str	r3, [sp, #16]
 8003b02:	9307      	str	r3, [sp, #28]
 8003b04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b08:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b0a:	4654      	mov	r4, sl
 8003b0c:	2205      	movs	r2, #5
 8003b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b12:	4853      	ldr	r0, [pc, #332]	@ (8003c60 <_vfiprintf_r+0x21c>)
 8003b14:	f7fc fb7c 	bl	8000210 <memchr>
 8003b18:	9a04      	ldr	r2, [sp, #16]
 8003b1a:	b9d8      	cbnz	r0, 8003b54 <_vfiprintf_r+0x110>
 8003b1c:	06d1      	lsls	r1, r2, #27
 8003b1e:	bf44      	itt	mi
 8003b20:	2320      	movmi	r3, #32
 8003b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b26:	0713      	lsls	r3, r2, #28
 8003b28:	bf44      	itt	mi
 8003b2a:	232b      	movmi	r3, #43	@ 0x2b
 8003b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b30:	f89a 3000 	ldrb.w	r3, [sl]
 8003b34:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b36:	d015      	beq.n	8003b64 <_vfiprintf_r+0x120>
 8003b38:	9a07      	ldr	r2, [sp, #28]
 8003b3a:	4654      	mov	r4, sl
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	f04f 0c0a 	mov.w	ip, #10
 8003b42:	4621      	mov	r1, r4
 8003b44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b48:	3b30      	subs	r3, #48	@ 0x30
 8003b4a:	2b09      	cmp	r3, #9
 8003b4c:	d94b      	bls.n	8003be6 <_vfiprintf_r+0x1a2>
 8003b4e:	b1b0      	cbz	r0, 8003b7e <_vfiprintf_r+0x13a>
 8003b50:	9207      	str	r2, [sp, #28]
 8003b52:	e014      	b.n	8003b7e <_vfiprintf_r+0x13a>
 8003b54:	eba0 0308 	sub.w	r3, r0, r8
 8003b58:	fa09 f303 	lsl.w	r3, r9, r3
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	9304      	str	r3, [sp, #16]
 8003b60:	46a2      	mov	sl, r4
 8003b62:	e7d2      	b.n	8003b0a <_vfiprintf_r+0xc6>
 8003b64:	9b03      	ldr	r3, [sp, #12]
 8003b66:	1d19      	adds	r1, r3, #4
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	9103      	str	r1, [sp, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bfbb      	ittet	lt
 8003b70:	425b      	neglt	r3, r3
 8003b72:	f042 0202 	orrlt.w	r2, r2, #2
 8003b76:	9307      	strge	r3, [sp, #28]
 8003b78:	9307      	strlt	r3, [sp, #28]
 8003b7a:	bfb8      	it	lt
 8003b7c:	9204      	strlt	r2, [sp, #16]
 8003b7e:	7823      	ldrb	r3, [r4, #0]
 8003b80:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b82:	d10a      	bne.n	8003b9a <_vfiprintf_r+0x156>
 8003b84:	7863      	ldrb	r3, [r4, #1]
 8003b86:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b88:	d132      	bne.n	8003bf0 <_vfiprintf_r+0x1ac>
 8003b8a:	9b03      	ldr	r3, [sp, #12]
 8003b8c:	1d1a      	adds	r2, r3, #4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	9203      	str	r2, [sp, #12]
 8003b92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b96:	3402      	adds	r4, #2
 8003b98:	9305      	str	r3, [sp, #20]
 8003b9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003c70 <_vfiprintf_r+0x22c>
 8003b9e:	7821      	ldrb	r1, [r4, #0]
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	4650      	mov	r0, sl
 8003ba4:	f7fc fb34 	bl	8000210 <memchr>
 8003ba8:	b138      	cbz	r0, 8003bba <_vfiprintf_r+0x176>
 8003baa:	9b04      	ldr	r3, [sp, #16]
 8003bac:	eba0 000a 	sub.w	r0, r0, sl
 8003bb0:	2240      	movs	r2, #64	@ 0x40
 8003bb2:	4082      	lsls	r2, r0
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	3401      	adds	r4, #1
 8003bb8:	9304      	str	r3, [sp, #16]
 8003bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bbe:	4829      	ldr	r0, [pc, #164]	@ (8003c64 <_vfiprintf_r+0x220>)
 8003bc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003bc4:	2206      	movs	r2, #6
 8003bc6:	f7fc fb23 	bl	8000210 <memchr>
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	d03f      	beq.n	8003c4e <_vfiprintf_r+0x20a>
 8003bce:	4b26      	ldr	r3, [pc, #152]	@ (8003c68 <_vfiprintf_r+0x224>)
 8003bd0:	bb1b      	cbnz	r3, 8003c1a <_vfiprintf_r+0x1d6>
 8003bd2:	9b03      	ldr	r3, [sp, #12]
 8003bd4:	3307      	adds	r3, #7
 8003bd6:	f023 0307 	bic.w	r3, r3, #7
 8003bda:	3308      	adds	r3, #8
 8003bdc:	9303      	str	r3, [sp, #12]
 8003bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003be0:	443b      	add	r3, r7
 8003be2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003be4:	e76a      	b.n	8003abc <_vfiprintf_r+0x78>
 8003be6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bea:	460c      	mov	r4, r1
 8003bec:	2001      	movs	r0, #1
 8003bee:	e7a8      	b.n	8003b42 <_vfiprintf_r+0xfe>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	3401      	adds	r4, #1
 8003bf4:	9305      	str	r3, [sp, #20]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f04f 0c0a 	mov.w	ip, #10
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c02:	3a30      	subs	r2, #48	@ 0x30
 8003c04:	2a09      	cmp	r2, #9
 8003c06:	d903      	bls.n	8003c10 <_vfiprintf_r+0x1cc>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0c6      	beq.n	8003b9a <_vfiprintf_r+0x156>
 8003c0c:	9105      	str	r1, [sp, #20]
 8003c0e:	e7c4      	b.n	8003b9a <_vfiprintf_r+0x156>
 8003c10:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c14:	4604      	mov	r4, r0
 8003c16:	2301      	movs	r3, #1
 8003c18:	e7f0      	b.n	8003bfc <_vfiprintf_r+0x1b8>
 8003c1a:	ab03      	add	r3, sp, #12
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	462a      	mov	r2, r5
 8003c20:	4b12      	ldr	r3, [pc, #72]	@ (8003c6c <_vfiprintf_r+0x228>)
 8003c22:	a904      	add	r1, sp, #16
 8003c24:	4630      	mov	r0, r6
 8003c26:	f3af 8000 	nop.w
 8003c2a:	4607      	mov	r7, r0
 8003c2c:	1c78      	adds	r0, r7, #1
 8003c2e:	d1d6      	bne.n	8003bde <_vfiprintf_r+0x19a>
 8003c30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c32:	07d9      	lsls	r1, r3, #31
 8003c34:	d405      	bmi.n	8003c42 <_vfiprintf_r+0x1fe>
 8003c36:	89ab      	ldrh	r3, [r5, #12]
 8003c38:	059a      	lsls	r2, r3, #22
 8003c3a:	d402      	bmi.n	8003c42 <_vfiprintf_r+0x1fe>
 8003c3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c3e:	f7ff fddd 	bl	80037fc <__retarget_lock_release_recursive>
 8003c42:	89ab      	ldrh	r3, [r5, #12]
 8003c44:	065b      	lsls	r3, r3, #25
 8003c46:	f53f af1f 	bmi.w	8003a88 <_vfiprintf_r+0x44>
 8003c4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c4c:	e71e      	b.n	8003a8c <_vfiprintf_r+0x48>
 8003c4e:	ab03      	add	r3, sp, #12
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	462a      	mov	r2, r5
 8003c54:	4b05      	ldr	r3, [pc, #20]	@ (8003c6c <_vfiprintf_r+0x228>)
 8003c56:	a904      	add	r1, sp, #16
 8003c58:	4630      	mov	r0, r6
 8003c5a:	f000 f879 	bl	8003d50 <_printf_i>
 8003c5e:	e7e4      	b.n	8003c2a <_vfiprintf_r+0x1e6>
 8003c60:	08004284 	.word	0x08004284
 8003c64:	0800428e 	.word	0x0800428e
 8003c68:	00000000 	.word	0x00000000
 8003c6c:	08003a1f 	.word	0x08003a1f
 8003c70:	0800428a 	.word	0x0800428a

08003c74 <_printf_common>:
 8003c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c78:	4616      	mov	r6, r2
 8003c7a:	4698      	mov	r8, r3
 8003c7c:	688a      	ldr	r2, [r1, #8]
 8003c7e:	690b      	ldr	r3, [r1, #16]
 8003c80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c84:	4293      	cmp	r3, r2
 8003c86:	bfb8      	it	lt
 8003c88:	4613      	movlt	r3, r2
 8003c8a:	6033      	str	r3, [r6, #0]
 8003c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c90:	4607      	mov	r7, r0
 8003c92:	460c      	mov	r4, r1
 8003c94:	b10a      	cbz	r2, 8003c9a <_printf_common+0x26>
 8003c96:	3301      	adds	r3, #1
 8003c98:	6033      	str	r3, [r6, #0]
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	0699      	lsls	r1, r3, #26
 8003c9e:	bf42      	ittt	mi
 8003ca0:	6833      	ldrmi	r3, [r6, #0]
 8003ca2:	3302      	addmi	r3, #2
 8003ca4:	6033      	strmi	r3, [r6, #0]
 8003ca6:	6825      	ldr	r5, [r4, #0]
 8003ca8:	f015 0506 	ands.w	r5, r5, #6
 8003cac:	d106      	bne.n	8003cbc <_printf_common+0x48>
 8003cae:	f104 0a19 	add.w	sl, r4, #25
 8003cb2:	68e3      	ldr	r3, [r4, #12]
 8003cb4:	6832      	ldr	r2, [r6, #0]
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	42ab      	cmp	r3, r5
 8003cba:	dc26      	bgt.n	8003d0a <_printf_common+0x96>
 8003cbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003cc0:	6822      	ldr	r2, [r4, #0]
 8003cc2:	3b00      	subs	r3, #0
 8003cc4:	bf18      	it	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	0692      	lsls	r2, r2, #26
 8003cca:	d42b      	bmi.n	8003d24 <_printf_common+0xb0>
 8003ccc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003cd0:	4641      	mov	r1, r8
 8003cd2:	4638      	mov	r0, r7
 8003cd4:	47c8      	blx	r9
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	d01e      	beq.n	8003d18 <_printf_common+0xa4>
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	6922      	ldr	r2, [r4, #16]
 8003cde:	f003 0306 	and.w	r3, r3, #6
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	bf02      	ittt	eq
 8003ce6:	68e5      	ldreq	r5, [r4, #12]
 8003ce8:	6833      	ldreq	r3, [r6, #0]
 8003cea:	1aed      	subeq	r5, r5, r3
 8003cec:	68a3      	ldr	r3, [r4, #8]
 8003cee:	bf0c      	ite	eq
 8003cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cf4:	2500      	movne	r5, #0
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	bfc4      	itt	gt
 8003cfa:	1a9b      	subgt	r3, r3, r2
 8003cfc:	18ed      	addgt	r5, r5, r3
 8003cfe:	2600      	movs	r6, #0
 8003d00:	341a      	adds	r4, #26
 8003d02:	42b5      	cmp	r5, r6
 8003d04:	d11a      	bne.n	8003d3c <_printf_common+0xc8>
 8003d06:	2000      	movs	r0, #0
 8003d08:	e008      	b.n	8003d1c <_printf_common+0xa8>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	4652      	mov	r2, sl
 8003d0e:	4641      	mov	r1, r8
 8003d10:	4638      	mov	r0, r7
 8003d12:	47c8      	blx	r9
 8003d14:	3001      	adds	r0, #1
 8003d16:	d103      	bne.n	8003d20 <_printf_common+0xac>
 8003d18:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d20:	3501      	adds	r5, #1
 8003d22:	e7c6      	b.n	8003cb2 <_printf_common+0x3e>
 8003d24:	18e1      	adds	r1, r4, r3
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	2030      	movs	r0, #48	@ 0x30
 8003d2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d2e:	4422      	add	r2, r4
 8003d30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d38:	3302      	adds	r3, #2
 8003d3a:	e7c7      	b.n	8003ccc <_printf_common+0x58>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	4622      	mov	r2, r4
 8003d40:	4641      	mov	r1, r8
 8003d42:	4638      	mov	r0, r7
 8003d44:	47c8      	blx	r9
 8003d46:	3001      	adds	r0, #1
 8003d48:	d0e6      	beq.n	8003d18 <_printf_common+0xa4>
 8003d4a:	3601      	adds	r6, #1
 8003d4c:	e7d9      	b.n	8003d02 <_printf_common+0x8e>
	...

08003d50 <_printf_i>:
 8003d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d54:	7e0f      	ldrb	r7, [r1, #24]
 8003d56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d58:	2f78      	cmp	r7, #120	@ 0x78
 8003d5a:	4691      	mov	r9, r2
 8003d5c:	4680      	mov	r8, r0
 8003d5e:	460c      	mov	r4, r1
 8003d60:	469a      	mov	sl, r3
 8003d62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d66:	d807      	bhi.n	8003d78 <_printf_i+0x28>
 8003d68:	2f62      	cmp	r7, #98	@ 0x62
 8003d6a:	d80a      	bhi.n	8003d82 <_printf_i+0x32>
 8003d6c:	2f00      	cmp	r7, #0
 8003d6e:	f000 80d1 	beq.w	8003f14 <_printf_i+0x1c4>
 8003d72:	2f58      	cmp	r7, #88	@ 0x58
 8003d74:	f000 80b8 	beq.w	8003ee8 <_printf_i+0x198>
 8003d78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d80:	e03a      	b.n	8003df8 <_printf_i+0xa8>
 8003d82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d86:	2b15      	cmp	r3, #21
 8003d88:	d8f6      	bhi.n	8003d78 <_printf_i+0x28>
 8003d8a:	a101      	add	r1, pc, #4	@ (adr r1, 8003d90 <_printf_i+0x40>)
 8003d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d90:	08003de9 	.word	0x08003de9
 8003d94:	08003dfd 	.word	0x08003dfd
 8003d98:	08003d79 	.word	0x08003d79
 8003d9c:	08003d79 	.word	0x08003d79
 8003da0:	08003d79 	.word	0x08003d79
 8003da4:	08003d79 	.word	0x08003d79
 8003da8:	08003dfd 	.word	0x08003dfd
 8003dac:	08003d79 	.word	0x08003d79
 8003db0:	08003d79 	.word	0x08003d79
 8003db4:	08003d79 	.word	0x08003d79
 8003db8:	08003d79 	.word	0x08003d79
 8003dbc:	08003efb 	.word	0x08003efb
 8003dc0:	08003e27 	.word	0x08003e27
 8003dc4:	08003eb5 	.word	0x08003eb5
 8003dc8:	08003d79 	.word	0x08003d79
 8003dcc:	08003d79 	.word	0x08003d79
 8003dd0:	08003f1d 	.word	0x08003f1d
 8003dd4:	08003d79 	.word	0x08003d79
 8003dd8:	08003e27 	.word	0x08003e27
 8003ddc:	08003d79 	.word	0x08003d79
 8003de0:	08003d79 	.word	0x08003d79
 8003de4:	08003ebd 	.word	0x08003ebd
 8003de8:	6833      	ldr	r3, [r6, #0]
 8003dea:	1d1a      	adds	r2, r3, #4
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6032      	str	r2, [r6, #0]
 8003df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003df4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e09c      	b.n	8003f36 <_printf_i+0x1e6>
 8003dfc:	6833      	ldr	r3, [r6, #0]
 8003dfe:	6820      	ldr	r0, [r4, #0]
 8003e00:	1d19      	adds	r1, r3, #4
 8003e02:	6031      	str	r1, [r6, #0]
 8003e04:	0606      	lsls	r6, r0, #24
 8003e06:	d501      	bpl.n	8003e0c <_printf_i+0xbc>
 8003e08:	681d      	ldr	r5, [r3, #0]
 8003e0a:	e003      	b.n	8003e14 <_printf_i+0xc4>
 8003e0c:	0645      	lsls	r5, r0, #25
 8003e0e:	d5fb      	bpl.n	8003e08 <_printf_i+0xb8>
 8003e10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e14:	2d00      	cmp	r5, #0
 8003e16:	da03      	bge.n	8003e20 <_printf_i+0xd0>
 8003e18:	232d      	movs	r3, #45	@ 0x2d
 8003e1a:	426d      	negs	r5, r5
 8003e1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e20:	4858      	ldr	r0, [pc, #352]	@ (8003f84 <_printf_i+0x234>)
 8003e22:	230a      	movs	r3, #10
 8003e24:	e011      	b.n	8003e4a <_printf_i+0xfa>
 8003e26:	6821      	ldr	r1, [r4, #0]
 8003e28:	6833      	ldr	r3, [r6, #0]
 8003e2a:	0608      	lsls	r0, r1, #24
 8003e2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e30:	d402      	bmi.n	8003e38 <_printf_i+0xe8>
 8003e32:	0649      	lsls	r1, r1, #25
 8003e34:	bf48      	it	mi
 8003e36:	b2ad      	uxthmi	r5, r5
 8003e38:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e3a:	4852      	ldr	r0, [pc, #328]	@ (8003f84 <_printf_i+0x234>)
 8003e3c:	6033      	str	r3, [r6, #0]
 8003e3e:	bf14      	ite	ne
 8003e40:	230a      	movne	r3, #10
 8003e42:	2308      	moveq	r3, #8
 8003e44:	2100      	movs	r1, #0
 8003e46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e4a:	6866      	ldr	r6, [r4, #4]
 8003e4c:	60a6      	str	r6, [r4, #8]
 8003e4e:	2e00      	cmp	r6, #0
 8003e50:	db05      	blt.n	8003e5e <_printf_i+0x10e>
 8003e52:	6821      	ldr	r1, [r4, #0]
 8003e54:	432e      	orrs	r6, r5
 8003e56:	f021 0104 	bic.w	r1, r1, #4
 8003e5a:	6021      	str	r1, [r4, #0]
 8003e5c:	d04b      	beq.n	8003ef6 <_printf_i+0x1a6>
 8003e5e:	4616      	mov	r6, r2
 8003e60:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e64:	fb03 5711 	mls	r7, r3, r1, r5
 8003e68:	5dc7      	ldrb	r7, [r0, r7]
 8003e6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e6e:	462f      	mov	r7, r5
 8003e70:	42bb      	cmp	r3, r7
 8003e72:	460d      	mov	r5, r1
 8003e74:	d9f4      	bls.n	8003e60 <_printf_i+0x110>
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d10b      	bne.n	8003e92 <_printf_i+0x142>
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	07df      	lsls	r7, r3, #31
 8003e7e:	d508      	bpl.n	8003e92 <_printf_i+0x142>
 8003e80:	6923      	ldr	r3, [r4, #16]
 8003e82:	6861      	ldr	r1, [r4, #4]
 8003e84:	4299      	cmp	r1, r3
 8003e86:	bfde      	ittt	le
 8003e88:	2330      	movle	r3, #48	@ 0x30
 8003e8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e92:	1b92      	subs	r2, r2, r6
 8003e94:	6122      	str	r2, [r4, #16]
 8003e96:	f8cd a000 	str.w	sl, [sp]
 8003e9a:	464b      	mov	r3, r9
 8003e9c:	aa03      	add	r2, sp, #12
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	4640      	mov	r0, r8
 8003ea2:	f7ff fee7 	bl	8003c74 <_printf_common>
 8003ea6:	3001      	adds	r0, #1
 8003ea8:	d14a      	bne.n	8003f40 <_printf_i+0x1f0>
 8003eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8003eae:	b004      	add	sp, #16
 8003eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb4:	6823      	ldr	r3, [r4, #0]
 8003eb6:	f043 0320 	orr.w	r3, r3, #32
 8003eba:	6023      	str	r3, [r4, #0]
 8003ebc:	4832      	ldr	r0, [pc, #200]	@ (8003f88 <_printf_i+0x238>)
 8003ebe:	2778      	movs	r7, #120	@ 0x78
 8003ec0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	6831      	ldr	r1, [r6, #0]
 8003ec8:	061f      	lsls	r7, r3, #24
 8003eca:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ece:	d402      	bmi.n	8003ed6 <_printf_i+0x186>
 8003ed0:	065f      	lsls	r7, r3, #25
 8003ed2:	bf48      	it	mi
 8003ed4:	b2ad      	uxthmi	r5, r5
 8003ed6:	6031      	str	r1, [r6, #0]
 8003ed8:	07d9      	lsls	r1, r3, #31
 8003eda:	bf44      	itt	mi
 8003edc:	f043 0320 	orrmi.w	r3, r3, #32
 8003ee0:	6023      	strmi	r3, [r4, #0]
 8003ee2:	b11d      	cbz	r5, 8003eec <_printf_i+0x19c>
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	e7ad      	b.n	8003e44 <_printf_i+0xf4>
 8003ee8:	4826      	ldr	r0, [pc, #152]	@ (8003f84 <_printf_i+0x234>)
 8003eea:	e7e9      	b.n	8003ec0 <_printf_i+0x170>
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	f023 0320 	bic.w	r3, r3, #32
 8003ef2:	6023      	str	r3, [r4, #0]
 8003ef4:	e7f6      	b.n	8003ee4 <_printf_i+0x194>
 8003ef6:	4616      	mov	r6, r2
 8003ef8:	e7bd      	b.n	8003e76 <_printf_i+0x126>
 8003efa:	6833      	ldr	r3, [r6, #0]
 8003efc:	6825      	ldr	r5, [r4, #0]
 8003efe:	6961      	ldr	r1, [r4, #20]
 8003f00:	1d18      	adds	r0, r3, #4
 8003f02:	6030      	str	r0, [r6, #0]
 8003f04:	062e      	lsls	r6, r5, #24
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	d501      	bpl.n	8003f0e <_printf_i+0x1be>
 8003f0a:	6019      	str	r1, [r3, #0]
 8003f0c:	e002      	b.n	8003f14 <_printf_i+0x1c4>
 8003f0e:	0668      	lsls	r0, r5, #25
 8003f10:	d5fb      	bpl.n	8003f0a <_printf_i+0x1ba>
 8003f12:	8019      	strh	r1, [r3, #0]
 8003f14:	2300      	movs	r3, #0
 8003f16:	6123      	str	r3, [r4, #16]
 8003f18:	4616      	mov	r6, r2
 8003f1a:	e7bc      	b.n	8003e96 <_printf_i+0x146>
 8003f1c:	6833      	ldr	r3, [r6, #0]
 8003f1e:	1d1a      	adds	r2, r3, #4
 8003f20:	6032      	str	r2, [r6, #0]
 8003f22:	681e      	ldr	r6, [r3, #0]
 8003f24:	6862      	ldr	r2, [r4, #4]
 8003f26:	2100      	movs	r1, #0
 8003f28:	4630      	mov	r0, r6
 8003f2a:	f7fc f971 	bl	8000210 <memchr>
 8003f2e:	b108      	cbz	r0, 8003f34 <_printf_i+0x1e4>
 8003f30:	1b80      	subs	r0, r0, r6
 8003f32:	6060      	str	r0, [r4, #4]
 8003f34:	6863      	ldr	r3, [r4, #4]
 8003f36:	6123      	str	r3, [r4, #16]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f3e:	e7aa      	b.n	8003e96 <_printf_i+0x146>
 8003f40:	6923      	ldr	r3, [r4, #16]
 8003f42:	4632      	mov	r2, r6
 8003f44:	4649      	mov	r1, r9
 8003f46:	4640      	mov	r0, r8
 8003f48:	47d0      	blx	sl
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	d0ad      	beq.n	8003eaa <_printf_i+0x15a>
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	079b      	lsls	r3, r3, #30
 8003f52:	d413      	bmi.n	8003f7c <_printf_i+0x22c>
 8003f54:	68e0      	ldr	r0, [r4, #12]
 8003f56:	9b03      	ldr	r3, [sp, #12]
 8003f58:	4298      	cmp	r0, r3
 8003f5a:	bfb8      	it	lt
 8003f5c:	4618      	movlt	r0, r3
 8003f5e:	e7a6      	b.n	8003eae <_printf_i+0x15e>
 8003f60:	2301      	movs	r3, #1
 8003f62:	4632      	mov	r2, r6
 8003f64:	4649      	mov	r1, r9
 8003f66:	4640      	mov	r0, r8
 8003f68:	47d0      	blx	sl
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	d09d      	beq.n	8003eaa <_printf_i+0x15a>
 8003f6e:	3501      	adds	r5, #1
 8003f70:	68e3      	ldr	r3, [r4, #12]
 8003f72:	9903      	ldr	r1, [sp, #12]
 8003f74:	1a5b      	subs	r3, r3, r1
 8003f76:	42ab      	cmp	r3, r5
 8003f78:	dcf2      	bgt.n	8003f60 <_printf_i+0x210>
 8003f7a:	e7eb      	b.n	8003f54 <_printf_i+0x204>
 8003f7c:	2500      	movs	r5, #0
 8003f7e:	f104 0619 	add.w	r6, r4, #25
 8003f82:	e7f5      	b.n	8003f70 <_printf_i+0x220>
 8003f84:	08004295 	.word	0x08004295
 8003f88:	080042a6 	.word	0x080042a6

08003f8c <__sflush_r>:
 8003f8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f94:	0716      	lsls	r6, r2, #28
 8003f96:	4605      	mov	r5, r0
 8003f98:	460c      	mov	r4, r1
 8003f9a:	d454      	bmi.n	8004046 <__sflush_r+0xba>
 8003f9c:	684b      	ldr	r3, [r1, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	dc02      	bgt.n	8003fa8 <__sflush_r+0x1c>
 8003fa2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	dd48      	ble.n	800403a <__sflush_r+0xae>
 8003fa8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003faa:	2e00      	cmp	r6, #0
 8003fac:	d045      	beq.n	800403a <__sflush_r+0xae>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003fb4:	682f      	ldr	r7, [r5, #0]
 8003fb6:	6a21      	ldr	r1, [r4, #32]
 8003fb8:	602b      	str	r3, [r5, #0]
 8003fba:	d030      	beq.n	800401e <__sflush_r+0x92>
 8003fbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003fbe:	89a3      	ldrh	r3, [r4, #12]
 8003fc0:	0759      	lsls	r1, r3, #29
 8003fc2:	d505      	bpl.n	8003fd0 <__sflush_r+0x44>
 8003fc4:	6863      	ldr	r3, [r4, #4]
 8003fc6:	1ad2      	subs	r2, r2, r3
 8003fc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003fca:	b10b      	cbz	r3, 8003fd0 <__sflush_r+0x44>
 8003fcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003fce:	1ad2      	subs	r2, r2, r3
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003fd4:	6a21      	ldr	r1, [r4, #32]
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	47b0      	blx	r6
 8003fda:	1c43      	adds	r3, r0, #1
 8003fdc:	89a3      	ldrh	r3, [r4, #12]
 8003fde:	d106      	bne.n	8003fee <__sflush_r+0x62>
 8003fe0:	6829      	ldr	r1, [r5, #0]
 8003fe2:	291d      	cmp	r1, #29
 8003fe4:	d82b      	bhi.n	800403e <__sflush_r+0xb2>
 8003fe6:	4a2a      	ldr	r2, [pc, #168]	@ (8004090 <__sflush_r+0x104>)
 8003fe8:	40ca      	lsrs	r2, r1
 8003fea:	07d6      	lsls	r6, r2, #31
 8003fec:	d527      	bpl.n	800403e <__sflush_r+0xb2>
 8003fee:	2200      	movs	r2, #0
 8003ff0:	6062      	str	r2, [r4, #4]
 8003ff2:	04d9      	lsls	r1, r3, #19
 8003ff4:	6922      	ldr	r2, [r4, #16]
 8003ff6:	6022      	str	r2, [r4, #0]
 8003ff8:	d504      	bpl.n	8004004 <__sflush_r+0x78>
 8003ffa:	1c42      	adds	r2, r0, #1
 8003ffc:	d101      	bne.n	8004002 <__sflush_r+0x76>
 8003ffe:	682b      	ldr	r3, [r5, #0]
 8004000:	b903      	cbnz	r3, 8004004 <__sflush_r+0x78>
 8004002:	6560      	str	r0, [r4, #84]	@ 0x54
 8004004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004006:	602f      	str	r7, [r5, #0]
 8004008:	b1b9      	cbz	r1, 800403a <__sflush_r+0xae>
 800400a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800400e:	4299      	cmp	r1, r3
 8004010:	d002      	beq.n	8004018 <__sflush_r+0x8c>
 8004012:	4628      	mov	r0, r5
 8004014:	f7ff fbf4 	bl	8003800 <_free_r>
 8004018:	2300      	movs	r3, #0
 800401a:	6363      	str	r3, [r4, #52]	@ 0x34
 800401c:	e00d      	b.n	800403a <__sflush_r+0xae>
 800401e:	2301      	movs	r3, #1
 8004020:	4628      	mov	r0, r5
 8004022:	47b0      	blx	r6
 8004024:	4602      	mov	r2, r0
 8004026:	1c50      	adds	r0, r2, #1
 8004028:	d1c9      	bne.n	8003fbe <__sflush_r+0x32>
 800402a:	682b      	ldr	r3, [r5, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0c6      	beq.n	8003fbe <__sflush_r+0x32>
 8004030:	2b1d      	cmp	r3, #29
 8004032:	d001      	beq.n	8004038 <__sflush_r+0xac>
 8004034:	2b16      	cmp	r3, #22
 8004036:	d11e      	bne.n	8004076 <__sflush_r+0xea>
 8004038:	602f      	str	r7, [r5, #0]
 800403a:	2000      	movs	r0, #0
 800403c:	e022      	b.n	8004084 <__sflush_r+0xf8>
 800403e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004042:	b21b      	sxth	r3, r3
 8004044:	e01b      	b.n	800407e <__sflush_r+0xf2>
 8004046:	690f      	ldr	r7, [r1, #16]
 8004048:	2f00      	cmp	r7, #0
 800404a:	d0f6      	beq.n	800403a <__sflush_r+0xae>
 800404c:	0793      	lsls	r3, r2, #30
 800404e:	680e      	ldr	r6, [r1, #0]
 8004050:	bf08      	it	eq
 8004052:	694b      	ldreq	r3, [r1, #20]
 8004054:	600f      	str	r7, [r1, #0]
 8004056:	bf18      	it	ne
 8004058:	2300      	movne	r3, #0
 800405a:	eba6 0807 	sub.w	r8, r6, r7
 800405e:	608b      	str	r3, [r1, #8]
 8004060:	f1b8 0f00 	cmp.w	r8, #0
 8004064:	dde9      	ble.n	800403a <__sflush_r+0xae>
 8004066:	6a21      	ldr	r1, [r4, #32]
 8004068:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800406a:	4643      	mov	r3, r8
 800406c:	463a      	mov	r2, r7
 800406e:	4628      	mov	r0, r5
 8004070:	47b0      	blx	r6
 8004072:	2800      	cmp	r0, #0
 8004074:	dc08      	bgt.n	8004088 <__sflush_r+0xfc>
 8004076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800407a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800407e:	81a3      	strh	r3, [r4, #12]
 8004080:	f04f 30ff 	mov.w	r0, #4294967295
 8004084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004088:	4407      	add	r7, r0
 800408a:	eba8 0800 	sub.w	r8, r8, r0
 800408e:	e7e7      	b.n	8004060 <__sflush_r+0xd4>
 8004090:	20400001 	.word	0x20400001

08004094 <_fflush_r>:
 8004094:	b538      	push	{r3, r4, r5, lr}
 8004096:	690b      	ldr	r3, [r1, #16]
 8004098:	4605      	mov	r5, r0
 800409a:	460c      	mov	r4, r1
 800409c:	b913      	cbnz	r3, 80040a4 <_fflush_r+0x10>
 800409e:	2500      	movs	r5, #0
 80040a0:	4628      	mov	r0, r5
 80040a2:	bd38      	pop	{r3, r4, r5, pc}
 80040a4:	b118      	cbz	r0, 80040ae <_fflush_r+0x1a>
 80040a6:	6a03      	ldr	r3, [r0, #32]
 80040a8:	b90b      	cbnz	r3, 80040ae <_fflush_r+0x1a>
 80040aa:	f7ff f9af 	bl	800340c <__sinit>
 80040ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f3      	beq.n	800409e <_fflush_r+0xa>
 80040b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80040b8:	07d0      	lsls	r0, r2, #31
 80040ba:	d404      	bmi.n	80040c6 <_fflush_r+0x32>
 80040bc:	0599      	lsls	r1, r3, #22
 80040be:	d402      	bmi.n	80040c6 <_fflush_r+0x32>
 80040c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040c2:	f7ff fb9a 	bl	80037fa <__retarget_lock_acquire_recursive>
 80040c6:	4628      	mov	r0, r5
 80040c8:	4621      	mov	r1, r4
 80040ca:	f7ff ff5f 	bl	8003f8c <__sflush_r>
 80040ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040d0:	07da      	lsls	r2, r3, #31
 80040d2:	4605      	mov	r5, r0
 80040d4:	d4e4      	bmi.n	80040a0 <_fflush_r+0xc>
 80040d6:	89a3      	ldrh	r3, [r4, #12]
 80040d8:	059b      	lsls	r3, r3, #22
 80040da:	d4e1      	bmi.n	80040a0 <_fflush_r+0xc>
 80040dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040de:	f7ff fb8d 	bl	80037fc <__retarget_lock_release_recursive>
 80040e2:	e7dd      	b.n	80040a0 <_fflush_r+0xc>

080040e4 <__swhatbuf_r>:
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	460c      	mov	r4, r1
 80040e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ec:	2900      	cmp	r1, #0
 80040ee:	b096      	sub	sp, #88	@ 0x58
 80040f0:	4615      	mov	r5, r2
 80040f2:	461e      	mov	r6, r3
 80040f4:	da0d      	bge.n	8004112 <__swhatbuf_r+0x2e>
 80040f6:	89a3      	ldrh	r3, [r4, #12]
 80040f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80040fc:	f04f 0100 	mov.w	r1, #0
 8004100:	bf14      	ite	ne
 8004102:	2340      	movne	r3, #64	@ 0x40
 8004104:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004108:	2000      	movs	r0, #0
 800410a:	6031      	str	r1, [r6, #0]
 800410c:	602b      	str	r3, [r5, #0]
 800410e:	b016      	add	sp, #88	@ 0x58
 8004110:	bd70      	pop	{r4, r5, r6, pc}
 8004112:	466a      	mov	r2, sp
 8004114:	f000 f848 	bl	80041a8 <_fstat_r>
 8004118:	2800      	cmp	r0, #0
 800411a:	dbec      	blt.n	80040f6 <__swhatbuf_r+0x12>
 800411c:	9901      	ldr	r1, [sp, #4]
 800411e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004122:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004126:	4259      	negs	r1, r3
 8004128:	4159      	adcs	r1, r3
 800412a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800412e:	e7eb      	b.n	8004108 <__swhatbuf_r+0x24>

08004130 <__smakebuf_r>:
 8004130:	898b      	ldrh	r3, [r1, #12]
 8004132:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004134:	079d      	lsls	r5, r3, #30
 8004136:	4606      	mov	r6, r0
 8004138:	460c      	mov	r4, r1
 800413a:	d507      	bpl.n	800414c <__smakebuf_r+0x1c>
 800413c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	6123      	str	r3, [r4, #16]
 8004144:	2301      	movs	r3, #1
 8004146:	6163      	str	r3, [r4, #20]
 8004148:	b003      	add	sp, #12
 800414a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800414c:	ab01      	add	r3, sp, #4
 800414e:	466a      	mov	r2, sp
 8004150:	f7ff ffc8 	bl	80040e4 <__swhatbuf_r>
 8004154:	9f00      	ldr	r7, [sp, #0]
 8004156:	4605      	mov	r5, r0
 8004158:	4639      	mov	r1, r7
 800415a:	4630      	mov	r0, r6
 800415c:	f7ff fbbc 	bl	80038d8 <_malloc_r>
 8004160:	b948      	cbnz	r0, 8004176 <__smakebuf_r+0x46>
 8004162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004166:	059a      	lsls	r2, r3, #22
 8004168:	d4ee      	bmi.n	8004148 <__smakebuf_r+0x18>
 800416a:	f023 0303 	bic.w	r3, r3, #3
 800416e:	f043 0302 	orr.w	r3, r3, #2
 8004172:	81a3      	strh	r3, [r4, #12]
 8004174:	e7e2      	b.n	800413c <__smakebuf_r+0xc>
 8004176:	89a3      	ldrh	r3, [r4, #12]
 8004178:	6020      	str	r0, [r4, #0]
 800417a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800417e:	81a3      	strh	r3, [r4, #12]
 8004180:	9b01      	ldr	r3, [sp, #4]
 8004182:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004186:	b15b      	cbz	r3, 80041a0 <__smakebuf_r+0x70>
 8004188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800418c:	4630      	mov	r0, r6
 800418e:	f000 f81d 	bl	80041cc <_isatty_r>
 8004192:	b128      	cbz	r0, 80041a0 <__smakebuf_r+0x70>
 8004194:	89a3      	ldrh	r3, [r4, #12]
 8004196:	f023 0303 	bic.w	r3, r3, #3
 800419a:	f043 0301 	orr.w	r3, r3, #1
 800419e:	81a3      	strh	r3, [r4, #12]
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	431d      	orrs	r5, r3
 80041a4:	81a5      	strh	r5, [r4, #12]
 80041a6:	e7cf      	b.n	8004148 <__smakebuf_r+0x18>

080041a8 <_fstat_r>:
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	4d07      	ldr	r5, [pc, #28]	@ (80041c8 <_fstat_r+0x20>)
 80041ac:	2300      	movs	r3, #0
 80041ae:	4604      	mov	r4, r0
 80041b0:	4608      	mov	r0, r1
 80041b2:	4611      	mov	r1, r2
 80041b4:	602b      	str	r3, [r5, #0]
 80041b6:	f7fc fcbe 	bl	8000b36 <_fstat>
 80041ba:	1c43      	adds	r3, r0, #1
 80041bc:	d102      	bne.n	80041c4 <_fstat_r+0x1c>
 80041be:	682b      	ldr	r3, [r5, #0]
 80041c0:	b103      	cbz	r3, 80041c4 <_fstat_r+0x1c>
 80041c2:	6023      	str	r3, [r4, #0]
 80041c4:	bd38      	pop	{r3, r4, r5, pc}
 80041c6:	bf00      	nop
 80041c8:	200002a8 	.word	0x200002a8

080041cc <_isatty_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4d06      	ldr	r5, [pc, #24]	@ (80041e8 <_isatty_r+0x1c>)
 80041d0:	2300      	movs	r3, #0
 80041d2:	4604      	mov	r4, r0
 80041d4:	4608      	mov	r0, r1
 80041d6:	602b      	str	r3, [r5, #0]
 80041d8:	f7fc fcbd 	bl	8000b56 <_isatty>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <_isatty_r+0x1a>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	b103      	cbz	r3, 80041e6 <_isatty_r+0x1a>
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	200002a8 	.word	0x200002a8

080041ec <_sbrk_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	4d06      	ldr	r5, [pc, #24]	@ (8004208 <_sbrk_r+0x1c>)
 80041f0:	2300      	movs	r3, #0
 80041f2:	4604      	mov	r4, r0
 80041f4:	4608      	mov	r0, r1
 80041f6:	602b      	str	r3, [r5, #0]
 80041f8:	f7fc fcc6 	bl	8000b88 <_sbrk>
 80041fc:	1c43      	adds	r3, r0, #1
 80041fe:	d102      	bne.n	8004206 <_sbrk_r+0x1a>
 8004200:	682b      	ldr	r3, [r5, #0]
 8004202:	b103      	cbz	r3, 8004206 <_sbrk_r+0x1a>
 8004204:	6023      	str	r3, [r4, #0]
 8004206:	bd38      	pop	{r3, r4, r5, pc}
 8004208:	200002a8 	.word	0x200002a8

0800420c <_init>:
 800420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420e:	bf00      	nop
 8004210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004212:	bc08      	pop	{r3}
 8004214:	469e      	mov	lr, r3
 8004216:	4770      	bx	lr

08004218 <_fini>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	bf00      	nop
 800421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421e:	bc08      	pop	{r3}
 8004220:	469e      	mov	lr, r3
 8004222:	4770      	bx	lr
