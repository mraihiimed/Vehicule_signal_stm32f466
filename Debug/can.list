
can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080036b8  080036b8  000046b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036d0  080036d0  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080036d0  080036d0  000046d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036d8  080036d8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036d8  080036d8  000046d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036dc  080036dc  000046dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080036e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  080036ec  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080036ec  000050e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b511  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000208a  00000000  00000000  0001054d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  000125d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006f2  00000000  00000000  00012f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c94  00000000  00000000  000135fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9c9  00000000  00000000  0003528e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb117  00000000  00000000  00041c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010cd6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023f8  00000000  00000000  0010cdb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  0010f1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080036a0 	.word	0x080036a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080036a0 	.word	0x080036a0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	@ 0x28
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000536:	4b27      	ldr	r3, [pc, #156]	@ (80005d4 <MX_CAN1_Init+0xa4>)
 8000538:	4a27      	ldr	r2, [pc, #156]	@ (80005d8 <MX_CAN1_Init+0xa8>)
 800053a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800053c:	4b25      	ldr	r3, [pc, #148]	@ (80005d4 <MX_CAN1_Init+0xa4>)
 800053e:	2205      	movs	r2, #5
 8000540:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000542:	4b24      	ldr	r3, [pc, #144]	@ (80005d4 <MX_CAN1_Init+0xa4>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000548:	4b22      	ldr	r3, [pc, #136]	@ (80005d4 <MX_CAN1_Init+0xa4>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800054e:	4b21      	ldr	r3, [pc, #132]	@ (80005d4 <MX_CAN1_Init+0xa4>)
 8000550:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000554:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000556:	4b1f      	ldr	r3, [pc, #124]	@ (80005d4 <MX_CAN1_Init+0xa4>)
 8000558:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800055c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800055e:	4b1d      	ldr	r3, [pc, #116]	@ (80005d4 <MX_CAN1_Init+0xa4>)
 8000560:	2200      	movs	r2, #0
 8000562:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000564:	4b1b      	ldr	r3, [pc, #108]	@ (80005d4 <MX_CAN1_Init+0xa4>)
 8000566:	2200      	movs	r2, #0
 8000568:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800056a:	4b1a      	ldr	r3, [pc, #104]	@ (80005d4 <MX_CAN1_Init+0xa4>)
 800056c:	2200      	movs	r2, #0
 800056e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000570:	4b18      	ldr	r3, [pc, #96]	@ (80005d4 <MX_CAN1_Init+0xa4>)
 8000572:	2200      	movs	r2, #0
 8000574:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000576:	4b17      	ldr	r3, [pc, #92]	@ (80005d4 <MX_CAN1_Init+0xa4>)
 8000578:	2200      	movs	r2, #0
 800057a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800057c:	4b15      	ldr	r3, [pc, #84]	@ (80005d4 <MX_CAN1_Init+0xa4>)
 800057e:	2200      	movs	r2, #0
 8000580:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000582:	4814      	ldr	r0, [pc, #80]	@ (80005d4 <MX_CAN1_Init+0xa4>)
 8000584:	f000 fe24 	bl	80011d0 <HAL_CAN_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800058e:	f000 f9bf 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  // ADD THIS BLOCK
  CAN_FilterTypeDef filterConfig;
  filterConfig.FilterActivation = ENABLE;
 8000592:	2301      	movs	r3, #1
 8000594:	623b      	str	r3, [r7, #32]
  filterConfig.FilterBank = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
  filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
  filterConfig.FilterIdHigh = 0x0000;
 800059e:	2300      	movs	r3, #0
 80005a0:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = 0x0000;
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = 0x0000;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = 0x0000;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005b2:	2301      	movs	r3, #1
 80005b4:	61fb      	str	r3, [r7, #28]

  if (HAL_CAN_ConfigFilter(&hcan1, &filterConfig) != HAL_OK)
 80005b6:	463b      	mov	r3, r7
 80005b8:	4619      	mov	r1, r3
 80005ba:	4806      	ldr	r0, [pc, #24]	@ (80005d4 <MX_CAN1_Init+0xa4>)
 80005bc:	f000 ff04 	bl	80013c8 <HAL_CAN_ConfigFilter>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_CAN1_Init+0x9a>
  {
    Error_Handler();
 80005c6:	f000 f9a3 	bl	8000910 <Error_Handler>
  }

  /* USER CODE END CAN1_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	3728      	adds	r7, #40	@ 0x28
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000028 	.word	0x20000028
 80005d8:	40006400 	.word	0x40006400

080005dc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000670 <HAL_CAN_MspInit+0x94>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d134      	bne.n	8000668 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <HAL_CAN_MspInit+0x98>)
 8000604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000606:	4a1b      	ldr	r2, [pc, #108]	@ (8000674 <HAL_CAN_MspInit+0x98>)
 8000608:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800060c:	6413      	str	r3, [r2, #64]	@ 0x40
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <HAL_CAN_MspInit+0x98>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <HAL_CAN_MspInit+0x98>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a14      	ldr	r2, [pc, #80]	@ (8000674 <HAL_CAN_MspInit+0x98>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <HAL_CAN_MspInit+0x98>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000636:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800063a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000648:	2309      	movs	r3, #9
 800064a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	4809      	ldr	r0, [pc, #36]	@ (8000678 <HAL_CAN_MspInit+0x9c>)
 8000654:	f001 fd34 	bl	80020c0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2100      	movs	r1, #0
 800065c:	2014      	movs	r0, #20
 800065e:	f001 fcf8 	bl	8002052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000662:	2014      	movs	r0, #20
 8000664:	f001 fd11 	bl	800208a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000668:	bf00      	nop
 800066a:	3728      	adds	r7, #40	@ 0x28
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40006400 	.word	0x40006400
 8000674:	40023800 	.word	0x40023800
 8000678:	40020000 	.word	0x40020000

0800067c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	4b26      	ldr	r3, [pc, #152]	@ (8000730 <MX_GPIO_Init+0xb4>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a25      	ldr	r2, [pc, #148]	@ (8000730 <MX_GPIO_Init+0xb4>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b23      	ldr	r3, [pc, #140]	@ (8000730 <MX_GPIO_Init+0xb4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <MX_GPIO_Init+0xb4>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000730 <MX_GPIO_Init+0xb4>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <MX_GPIO_Init+0xb4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <MX_GPIO_Init+0xb4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a17      	ldr	r2, [pc, #92]	@ (8000730 <MX_GPIO_Init+0xb4>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <MX_GPIO_Init+0xb4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2120      	movs	r1, #32
 80006ea:	4812      	ldr	r0, [pc, #72]	@ (8000734 <MX_GPIO_Init+0xb8>)
 80006ec:	f001 fe7c 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	4619      	mov	r1, r3
 8000706:	480c      	ldr	r0, [pc, #48]	@ (8000738 <MX_GPIO_Init+0xbc>)
 8000708:	f001 fcda 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800070c:	2320      	movs	r3, #32
 800070e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	2301      	movs	r3, #1
 8000712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	4619      	mov	r1, r3
 8000722:	4804      	ldr	r0, [pc, #16]	@ (8000734 <MX_GPIO_Init+0xb8>)
 8000724:	f001 fccc 	bl	80020c0 <HAL_GPIO_Init>

}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40020000 	.word	0x40020000
 8000738:	40020800 	.word	0x40020800

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000740:	f000 fcb0 	bl	80010a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000744:	f000 f872 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000748:	f7ff ff98 	bl	800067c <MX_GPIO_Init>
  MX_CAN1_Init();
 800074c:	f7ff fef0 	bl	8000530 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8000750:	f000 f958 	bl	8000a04 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Start CAN peripheral
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000754:	4822      	ldr	r0, [pc, #136]	@ (80007e0 <main+0xa4>)
 8000756:	f000 ff15 	bl	8001584 <HAL_CAN_Start>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <main+0x28>
  {
    Error_Handler();
 8000760:	f000 f8d6 	bl	8000910 <Error_Handler>
  }

  // Enable CAN RX interrupt
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000764:	2102      	movs	r1, #2
 8000766:	481e      	ldr	r0, [pc, #120]	@ (80007e0 <main+0xa4>)
 8000768:	f001 f942 	bl	80019f0 <HAL_CAN_ActivateNotification>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <main+0x3a>
  {
    Error_Handler();
 8000772:	f000 f8cd 	bl	8000910 <Error_Handler>
  }

  // Configure CAN TX Header
  TxHeader.DLC = 8;
 8000776:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <main+0xa8>)
 8000778:	2208      	movs	r2, #8
 800077a:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800077c:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <main+0xa8>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000782:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <main+0xa8>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x321;
 8000788:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <main+0xa8>)
 800078a:	f240 3221 	movw	r2, #801	@ 0x321
 800078e:	601a      	str	r2, [r3, #0]

  // Load sample data
  TxData[0] = 0x11;
 8000790:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <main+0xac>)
 8000792:	2211      	movs	r2, #17
 8000794:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x22;
 8000796:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <main+0xac>)
 8000798:	2222      	movs	r2, #34	@ 0x22
 800079a:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0x33;
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <main+0xac>)
 800079e:	2233      	movs	r2, #51	@ 0x33
 80007a0:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x44;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <main+0xac>)
 80007a4:	2244      	movs	r2, #68	@ 0x44
 80007a6:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0x55;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <main+0xac>)
 80007aa:	2255      	movs	r2, #85	@ 0x55
 80007ac:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0x66;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <main+0xac>)
 80007b0:	2266      	movs	r2, #102	@ 0x66
 80007b2:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0x77;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <main+0xac>)
 80007b6:	2277      	movs	r2, #119	@ 0x77
 80007b8:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0x88;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <main+0xac>)
 80007bc:	2288      	movs	r2, #136	@ 0x88
 80007be:	71da      	strb	r2, [r3, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
       {
	    // Send CAN message
	    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <main+0xb0>)
 80007c2:	4a09      	ldr	r2, [pc, #36]	@ (80007e8 <main+0xac>)
 80007c4:	4907      	ldr	r1, [pc, #28]	@ (80007e4 <main+0xa8>)
 80007c6:	4806      	ldr	r0, [pc, #24]	@ (80007e0 <main+0xa4>)
 80007c8:	f000 ff20 	bl	800160c <HAL_CAN_AddTxMessage>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <main+0x9a>
	    {
	      Error_Handler();
 80007d2:	f000 f89d 	bl	8000910 <Error_Handler>
	    }

	    // Wait 1 second
	    HAL_Delay(1000); // just idle loop
 80007d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007da:	f000 fcd5 	bl	8001188 <HAL_Delay>
	    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80007de:	e7ef      	b.n	80007c0 <main+0x84>
 80007e0:	20000028 	.word	0x20000028
 80007e4:	20000050 	.word	0x20000050
 80007e8:	20000068 	.word	0x20000068
 80007ec:	20000070 	.word	0x20000070

080007f0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  /* USER CODE END 3 */
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	@ 0x30
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	f107 0214 	add.w	r2, r7, #20
 8000800:	2100      	movs	r1, #0
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f000 ffd2 	bl	80017ac <HAL_CAN_GetRxMessage>

    handleCANRxMessage(RxHeader.StdId, RxData, RxHeader.DLC);
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	f107 010c 	add.w	r1, r7, #12
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fb98 	bl	8000f48 <handleCANRxMessage>

    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Blink LED when message received
 8000818:	2120      	movs	r1, #32
 800081a:	4803      	ldr	r0, [pc, #12]	@ (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800081c:	f001 fdfd 	bl	800241a <HAL_GPIO_TogglePin>
}
 8000820:	bf00      	nop
 8000822:	3730      	adds	r7, #48	@ 0x30
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40020000 	.word	0x40020000

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b094      	sub	sp, #80	@ 0x50
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2234      	movs	r2, #52	@ 0x34
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f002 ff04 	bl	8003648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	4b2c      	ldr	r3, [pc, #176]	@ (8000908 <SystemClock_Config+0xdc>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	4a2b      	ldr	r2, [pc, #172]	@ (8000908 <SystemClock_Config+0xdc>)
 800085a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800085e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000860:	4b29      	ldr	r3, [pc, #164]	@ (8000908 <SystemClock_Config+0xdc>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086c:	2300      	movs	r3, #0
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	4b26      	ldr	r3, [pc, #152]	@ (800090c <SystemClock_Config+0xe0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a25      	ldr	r2, [pc, #148]	@ (800090c <SystemClock_Config+0xe0>)
 8000876:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	4b23      	ldr	r3, [pc, #140]	@ (800090c <SystemClock_Config+0xe0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000888:	2301      	movs	r3, #1
 800088a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800088c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000890:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000892:	2302      	movs	r3, #2
 8000894:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000896:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800089a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800089c:	2304      	movs	r3, #4
 800089e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008a0:	23b4      	movs	r3, #180	@ 0xb4
 80008a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 f965 	bl	8002b84 <HAL_RCC_OscConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008c0:	f000 f826 	bl	8000910 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008c4:	f001 fdc4 	bl	8002450 <HAL_PWREx_EnableOverDrive>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008ce:	f000 f81f 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d2:	230f      	movs	r3, #15
 80008d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d6:	2302      	movs	r3, #2
 80008d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	2105      	movs	r1, #5
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 fdfd 	bl	80024f0 <HAL_RCC_ClockConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008fc:	f000 f808 	bl	8000910 <Error_Handler>
  }
}
 8000900:	bf00      	nop
 8000902:	3750      	adds	r7, #80	@ 0x50
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40007000 	.word	0x40007000

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  __disable_irq();
  while (1); // stay here on error
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <Error_Handler+0x8>

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	4a0f      	ldr	r2, [pc, #60]	@ (8000968 <HAL_MspInit+0x4c>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000930:	6453      	str	r3, [r2, #68]	@ 0x44
 8000932:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	4a08      	ldr	r2, [pc, #32]	@ (8000968 <HAL_MspInit+0x4c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	@ 0x40
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <NMI_Handler+0x4>

08000974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <MemManage_Handler+0x4>

08000984 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <UsageFault_Handler+0x4>

08000994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c2:	f000 fbc1 	bl	8001148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80009d0:	4802      	ldr	r0, [pc, #8]	@ (80009dc <CAN1_RX0_IRQHandler+0x10>)
 80009d2:	f001 f833 	bl	8001a3c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000028 	.word	0x20000028

080009e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <SystemInit+0x20>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ea:	4a05      	ldr	r2, [pc, #20]	@ (8000a00 <SystemInit+0x20>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	@ (8000a54 <MX_USART2_UART_Init+0x50>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	f002 fb40 	bl	80030c0 <HAL_UART_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a46:	f7ff ff63 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000074 	.word	0x20000074
 8000a54:	40004400 	.word	0x40004400

08000a58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	@ 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a19      	ldr	r2, [pc, #100]	@ (8000adc <HAL_UART_MspInit+0x84>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d12b      	bne.n	8000ad2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	4a17      	ldr	r2, [pc, #92]	@ (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ae0 <HAL_UART_MspInit+0x88>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <HAL_UART_MspInit+0x88>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <HAL_UART_MspInit+0x8c>)
 8000ace:	f001 faf7 	bl	80020c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	@ 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000

08000ae8 <sendFuelEconomyMessage>:




// Send fuel economy status
void sendFuelEconomyMessage(uint8_t status) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	@ 0x30
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t txData[8] = {0};
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
    uint32_t txMailbox;

    TxHeader.StdId = 0x500;
 8000afc:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000b00:	61bb      	str	r3, [r7, #24]
    TxHeader.IDE = CAN_ID_STD;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.DLC = 1;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28

    txData[0] = status;
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	743b      	strb	r3, [r7, #16]

    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData, &txMailbox);
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	f107 0210 	add.w	r2, r7, #16
 8000b1a:	f107 0118 	add.w	r1, r7, #24
 8000b1e:	4803      	ldr	r0, [pc, #12]	@ (8000b2c <sendFuelEconomyMessage+0x44>)
 8000b20:	f000 fd74 	bl	800160c <HAL_CAN_AddTxMessage>
}
 8000b24:	bf00      	nop
 8000b26:	3730      	adds	r7, #48	@ 0x30
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000028 	.word	0x20000028

08000b30 <sendFuelStatusMessage>:
    txData[0] = status;

    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData, &txMailbox);
}
// Send fuel economy status
void sendFuelStatusMessage(uint8_t status) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	@ 0x30
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t txData[8] = {0};
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
    uint32_t txMailbox;

    TxHeader.StdId = 0x601;
 8000b44:	f240 6301 	movw	r3, #1537	@ 0x601
 8000b48:	61bb      	str	r3, [r7, #24]
    TxHeader.IDE = CAN_ID_STD;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.DLC = 1;
 8000b52:	2301      	movs	r3, #1
 8000b54:	62bb      	str	r3, [r7, #40]	@ 0x28

    txData[0] = status;
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	743b      	strb	r3, [r7, #16]

    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData, &txMailbox);
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	f107 0210 	add.w	r2, r7, #16
 8000b62:	f107 0118 	add.w	r1, r7, #24
 8000b66:	4803      	ldr	r0, [pc, #12]	@ (8000b74 <sendFuelStatusMessage+0x44>)
 8000b68:	f000 fd50 	bl	800160c <HAL_CAN_AddTxMessage>
}
 8000b6c:	bf00      	nop
 8000b6e:	3730      	adds	r7, #48	@ 0x30
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000028 	.word	0x20000028

08000b78 <sendBatteryStatusMessage>:

// Send Battery Status status
void sendBatteryStatusMessage(uint8_t status) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	@ 0x30
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t txData[8] = {0};
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
    uint32_t txMailbox;

    TxHeader.StdId = 0x611;
 8000b8c:	f240 6311 	movw	r3, #1553	@ 0x611
 8000b90:	61bb      	str	r3, [r7, #24]
    TxHeader.IDE = CAN_ID_STD;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.DLC = 1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	62bb      	str	r3, [r7, #40]	@ 0x28

    txData[0] = status;
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	743b      	strb	r3, [r7, #16]

    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData, &txMailbox);
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	f107 0210 	add.w	r2, r7, #16
 8000baa:	f107 0118 	add.w	r1, r7, #24
 8000bae:	4803      	ldr	r0, [pc, #12]	@ (8000bbc <sendBatteryStatusMessage+0x44>)
 8000bb0:	f000 fd2c 	bl	800160c <HAL_CAN_AddTxMessage>
}
 8000bb4:	bf00      	nop
 8000bb6:	3730      	adds	r7, #48	@ 0x30
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000028 	.word	0x20000028

08000bc0 <sendNavigationStatusMessage>:


// Send Navigation Status status
void sendNavigationStatusMessage(uint8_t status) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08c      	sub	sp, #48	@ 0x30
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t txData[8] = {0};
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
    uint32_t txMailbox;

    TxHeader.StdId = 0x621;
 8000bd4:	f240 6321 	movw	r3, #1569	@ 0x621
 8000bd8:	61bb      	str	r3, [r7, #24]
    TxHeader.IDE = CAN_ID_STD;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.DLC = 1;
 8000be2:	2301      	movs	r3, #1
 8000be4:	62bb      	str	r3, [r7, #40]	@ 0x28

    txData[0] = status;
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	743b      	strb	r3, [r7, #16]

    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData, &txMailbox);
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	f107 0210 	add.w	r2, r7, #16
 8000bf2:	f107 0118 	add.w	r1, r7, #24
 8000bf6:	4803      	ldr	r0, [pc, #12]	@ (8000c04 <sendNavigationStatusMessage+0x44>)
 8000bf8:	f000 fd08 	bl	800160c <HAL_CAN_AddTxMessage>
}
 8000bfc:	bf00      	nop
 8000bfe:	3730      	adds	r7, #48	@ 0x30
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000028 	.word	0x20000028

08000c08 <sendClimatControlMessage>:

// Send Navigation Status status
void sendClimatControlMessage(uint8_t status) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	@ 0x30
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t txData[8] = {0};
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
    uint32_t txMailbox;

    TxHeader.StdId = 0x631;
 8000c1c:	f240 6331 	movw	r3, #1585	@ 0x631
 8000c20:	61bb      	str	r3, [r7, #24]
    TxHeader.IDE = CAN_ID_STD;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.DLC = 1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	62bb      	str	r3, [r7, #40]	@ 0x28

    txData[0] = status;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	743b      	strb	r3, [r7, #16]

    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData, &txMailbox);
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	f107 0210 	add.w	r2, r7, #16
 8000c3a:	f107 0118 	add.w	r1, r7, #24
 8000c3e:	4803      	ldr	r0, [pc, #12]	@ (8000c4c <sendClimatControlMessage+0x44>)
 8000c40:	f000 fce4 	bl	800160c <HAL_CAN_AddTxMessage>
}
 8000c44:	bf00      	nop
 8000c46:	3730      	adds	r7, #48	@ 0x30
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000028 	.word	0x20000028

08000c50 <sendTireStatusMessage>:

// Send Tire Status status
void sendTireStatusMessage(uint8_t status) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	@ 0x30
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t txData[8] = {0};
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
    uint32_t txMailbox;

    TxHeader.StdId = 0x641;
 8000c64:	f240 6341 	movw	r3, #1601	@ 0x641
 8000c68:	61bb      	str	r3, [r7, #24]
    TxHeader.IDE = CAN_ID_STD;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.DLC = 1;
 8000c72:	2301      	movs	r3, #1
 8000c74:	62bb      	str	r3, [r7, #40]	@ 0x28

    txData[0] = status;
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	743b      	strb	r3, [r7, #16]

    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData, &txMailbox);
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	f107 0210 	add.w	r2, r7, #16
 8000c82:	f107 0118 	add.w	r1, r7, #24
 8000c86:	4803      	ldr	r0, [pc, #12]	@ (8000c94 <sendTireStatusMessage+0x44>)
 8000c88:	f000 fcc0 	bl	800160c <HAL_CAN_AddTxMessage>
}
 8000c8c:	bf00      	nop
 8000c8e:	3730      	adds	r7, #48	@ 0x30
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000028 	.word	0x20000028

08000c98 <FuelEconomy_Ctrl>:

 //Decision logic
void FuelEconomy_Ctrl(void) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
    uint8_t fuelEconomyStatus = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	71fb      	strb	r3, [r7, #7]

    uint8_t EngineSpeed = engineData.EngineeRPM;
 8000ca2:	4b23      	ldr	r3, [pc, #140]	@ (8000d30 <FuelEconomy_Ctrl+0x98>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	71bb      	strb	r3, [r7, #6]
    uint8_t VehicleSpeed = vehicleData.vehicleSpeed;
 8000ca8:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <FuelEconomy_Ctrl+0x9c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	717b      	strb	r3, [r7, #5]

    if (EngineSpeed > 100) {
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	2b64      	cmp	r3, #100	@ 0x64
 8000cb2:	d938      	bls.n	8000d26 <FuelEconomy_Ctrl+0x8e>
        if (VehicleSpeed > 0 && VehicleSpeed < 30)
 8000cb4:	797b      	ldrb	r3, [r7, #5]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d005      	beq.n	8000cc6 <FuelEconomy_Ctrl+0x2e>
 8000cba:	797b      	ldrb	r3, [r7, #5]
 8000cbc:	2b1d      	cmp	r3, #29
 8000cbe:	d802      	bhi.n	8000cc6 <FuelEconomy_Ctrl+0x2e>
            fuelEconomyStatus = 0; //0x14
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	71fb      	strb	r3, [r7, #7]
 8000cc4:	e02b      	b.n	8000d1e <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 30 && VehicleSpeed < 60)
 8000cc6:	797b      	ldrb	r3, [r7, #5]
 8000cc8:	2b1d      	cmp	r3, #29
 8000cca:	d905      	bls.n	8000cd8 <FuelEconomy_Ctrl+0x40>
 8000ccc:	797b      	ldrb	r3, [r7, #5]
 8000cce:	2b3b      	cmp	r3, #59	@ 0x3b
 8000cd0:	d802      	bhi.n	8000cd8 <FuelEconomy_Ctrl+0x40>
            fuelEconomyStatus = 1; //0x32
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	71fb      	strb	r3, [r7, #7]
 8000cd6:	e022      	b.n	8000d1e <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 60 && VehicleSpeed < 90)
 8000cd8:	797b      	ldrb	r3, [r7, #5]
 8000cda:	2b3b      	cmp	r3, #59	@ 0x3b
 8000cdc:	d905      	bls.n	8000cea <FuelEconomy_Ctrl+0x52>
 8000cde:	797b      	ldrb	r3, [r7, #5]
 8000ce0:	2b59      	cmp	r3, #89	@ 0x59
 8000ce2:	d802      	bhi.n	8000cea <FuelEconomy_Ctrl+0x52>
            fuelEconomyStatus = 2; //0x50
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	71fb      	strb	r3, [r7, #7]
 8000ce8:	e019      	b.n	8000d1e <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 90 && VehicleSpeed < 120)
 8000cea:	797b      	ldrb	r3, [r7, #5]
 8000cec:	2b59      	cmp	r3, #89	@ 0x59
 8000cee:	d905      	bls.n	8000cfc <FuelEconomy_Ctrl+0x64>
 8000cf0:	797b      	ldrb	r3, [r7, #5]
 8000cf2:	2b77      	cmp	r3, #119	@ 0x77
 8000cf4:	d802      	bhi.n	8000cfc <FuelEconomy_Ctrl+0x64>
           fuelEconomyStatus = 3; //0x64
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	e010      	b.n	8000d1e <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 120 && VehicleSpeed < 160)
 8000cfc:	797b      	ldrb	r3, [r7, #5]
 8000cfe:	2b77      	cmp	r3, #119	@ 0x77
 8000d00:	d905      	bls.n	8000d0e <FuelEconomy_Ctrl+0x76>
 8000d02:	797b      	ldrb	r3, [r7, #5]
 8000d04:	2b9f      	cmp	r3, #159	@ 0x9f
 8000d06:	d802      	bhi.n	8000d0e <FuelEconomy_Ctrl+0x76>
            fuelEconomyStatus = 4;//0x82
 8000d08:	2304      	movs	r3, #4
 8000d0a:	71fb      	strb	r3, [r7, #7]
 8000d0c:	e007      	b.n	8000d1e <FuelEconomy_Ctrl+0x86>
        else if (VehicleSpeed >= 160 && VehicleSpeed < 200)
 8000d0e:	797b      	ldrb	r3, [r7, #5]
 8000d10:	2b9f      	cmp	r3, #159	@ 0x9f
 8000d12:	d904      	bls.n	8000d1e <FuelEconomy_Ctrl+0x86>
 8000d14:	797b      	ldrb	r3, [r7, #5]
 8000d16:	2bc7      	cmp	r3, #199	@ 0xc7
 8000d18:	d801      	bhi.n	8000d1e <FuelEconomy_Ctrl+0x86>
            fuelEconomyStatus = 5;//0xB4
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	71fb      	strb	r3, [r7, #7]

        sendFuelEconomyMessage(fuelEconomyStatus);
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fee1 	bl	8000ae8 <sendFuelEconomyMessage>
    }
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200000c0 	.word	0x200000c0
 8000d34:	200000bc 	.word	0x200000bc

08000d38 <FuelStatus_Status>:


void FuelStatus_Status(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
    uint8_t fuelSts = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	71fb      	strb	r3, [r7, #7]

    uint8_t  FuelWght = fuelStatus.FuelWeight;
 8000d42:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <FuelStatus_Status+0x98>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	71bb      	strb	r3, [r7, #6]
    /*FuelStatus*/
    uint8_t FuelPr = fuelStatus.FuelPressure;
 8000d48:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <FuelStatus_Status+0x98>)
 8000d4a:	789b      	ldrb	r3, [r3, #2]
 8000d4c:	717b      	strb	r3, [r7, #5]
    uint8_t level = fuelStatus.FuelLevel;
 8000d4e:	4b20      	ldr	r3, [pc, #128]	@ (8000dd0 <FuelStatus_Status+0x98>)
 8000d50:	78db      	ldrb	r3, [r3, #3]
 8000d52:	713b      	strb	r3, [r7, #4]
    uint8_t temp = fuelStatus.FuelTemperature;
 8000d54:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <FuelStatus_Status+0x98>)
 8000d56:	791b      	ldrb	r3, [r3, #4]
 8000d58:	70fb      	strb	r3, [r7, #3]
    uint8_t qual = fuelStatus.FuelQuality;
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <FuelStatus_Status+0x98>)
 8000d5c:	795b      	ldrb	r3, [r3, #5]
 8000d5e:	70bb      	strb	r3, [r7, #2]

   if(FuelWght>5){ // 0006
 8000d60:	79bb      	ldrb	r3, [r7, #6]
 8000d62:	2b05      	cmp	r3, #5
 8000d64:	d92b      	bls.n	8000dbe <FuelStatus_Status+0x86>
     /*        0x0A                      0x09         0x00          0x5A */
	 if((FuelPr>5 && FuelPr<10) &&  (level <10 || qual == 0 || temp > 80 ) )
 8000d66:	797b      	ldrb	r3, [r7, #5]
 8000d68:	2b05      	cmp	r3, #5
 8000d6a:	d90e      	bls.n	8000d8a <FuelStatus_Status+0x52>
 8000d6c:	797b      	ldrb	r3, [r7, #5]
 8000d6e:	2b09      	cmp	r3, #9
 8000d70:	d80b      	bhi.n	8000d8a <FuelStatus_Status+0x52>
 8000d72:	793b      	ldrb	r3, [r7, #4]
 8000d74:	2b09      	cmp	r3, #9
 8000d76:	d905      	bls.n	8000d84 <FuelStatus_Status+0x4c>
 8000d78:	78bb      	ldrb	r3, [r7, #2]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <FuelStatus_Status+0x4c>
 8000d7e:	78fb      	ldrb	r3, [r7, #3]
 8000d80:	2b50      	cmp	r3, #80	@ 0x50
 8000d82:	d902      	bls.n	8000d8a <FuelStatus_Status+0x52>
    	fuelSts = 1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	71fb      	strb	r3, [r7, #7]
 8000d88:	e019      	b.n	8000dbe <FuelStatus_Status+0x86>
    else if ((FuelPr >=10 && FuelPr <20) && (((level < 30 ) && (qual <= 1) )  || temp > 60))
 8000d8a:	797b      	ldrb	r3, [r7, #5]
 8000d8c:	2b09      	cmp	r3, #9
 8000d8e:	d90e      	bls.n	8000dae <FuelStatus_Status+0x76>
 8000d90:	797b      	ldrb	r3, [r7, #5]
 8000d92:	2b13      	cmp	r3, #19
 8000d94:	d80b      	bhi.n	8000dae <FuelStatus_Status+0x76>
 8000d96:	793b      	ldrb	r3, [r7, #4]
 8000d98:	2b1d      	cmp	r3, #29
 8000d9a:	d802      	bhi.n	8000da2 <FuelStatus_Status+0x6a>
 8000d9c:	78bb      	ldrb	r3, [r7, #2]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d902      	bls.n	8000da8 <FuelStatus_Status+0x70>
 8000da2:	78fb      	ldrb	r3, [r7, #3]
 8000da4:	2b3c      	cmp	r3, #60	@ 0x3c
 8000da6:	d902      	bls.n	8000dae <FuelStatus_Status+0x76>
    	fuelSts = 2; // 0x0A
 8000da8:	2302      	movs	r3, #2
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	e007      	b.n	8000dbe <FuelStatus_Status+0x86>
    else if (FuelPr >= 20 && FuelPr <=25)
 8000dae:	797b      	ldrb	r3, [r7, #5]
 8000db0:	2b13      	cmp	r3, #19
 8000db2:	d904      	bls.n	8000dbe <FuelStatus_Status+0x86>
 8000db4:	797b      	ldrb	r3, [r7, #5]
 8000db6:	2b19      	cmp	r3, #25
 8000db8:	d801      	bhi.n	8000dbe <FuelStatus_Status+0x86>
    	fuelSts = 3; //0x14
 8000dba:	2303      	movs	r3, #3
 8000dbc:	71fb      	strb	r3, [r7, #7]
   }
    sendFuelStatusMessage(fuelSts);
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff feb5 	bl	8000b30 <sendFuelStatusMessage>

}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200000c4 	.word	0x200000c4

08000dd4 <BatteryStatus_Status>:

void BatteryStatus_Status(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
	uint8_t batteryStatusCode;

	uint8_t BVoltage =   BatteryStatus.BatteryVoltage;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	@ (8000e44 <BatteryStatus_Status+0x70>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	71bb      	strb	r3, [r7, #6]
	uint8_t BCurrent =   BatteryStatus.BatteryCurrent;
 8000de0:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <BatteryStatus_Status+0x70>)
 8000de2:	785b      	ldrb	r3, [r3, #1]
 8000de4:	717b      	strb	r3, [r7, #5]
	uint8_t BHealth  =   BatteryStatus.BatteryHealth;
 8000de6:	4b17      	ldr	r3, [pc, #92]	@ (8000e44 <BatteryStatus_Status+0x70>)
 8000de8:	78db      	ldrb	r3, [r3, #3]
 8000dea:	713b      	strb	r3, [r7, #4]
	uint8_t BTemp    =   BatteryStatus.BatteryTemp;
 8000dec:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <BatteryStatus_Status+0x70>)
 8000dee:	789b      	ldrb	r3, [r3, #2]
 8000df0:	70fb      	strb	r3, [r7, #3]
    if(BVoltage <11.5)
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	2b0b      	cmp	r3, #11
 8000df6:	d802      	bhi.n	8000dfe <BatteryStatus_Status+0x2a>
    {
    	batteryStatusCode = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	e019      	b.n	8000e32 <BatteryStatus_Status+0x5e>
    	/**/
    }
    else
    {
	   if( BCurrent < 10 || BHealth == 0 || BTemp > 60)
 8000dfe:	797b      	ldrb	r3, [r7, #5]
 8000e00:	2b09      	cmp	r3, #9
 8000e02:	d905      	bls.n	8000e10 <BatteryStatus_Status+0x3c>
 8000e04:	793b      	ldrb	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <BatteryStatus_Status+0x3c>
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	2b3c      	cmp	r3, #60	@ 0x3c
 8000e0e:	d902      	bls.n	8000e16 <BatteryStatus_Status+0x42>
		  batteryStatusCode = 3;
 8000e10:	2303      	movs	r3, #3
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	e00d      	b.n	8000e32 <BatteryStatus_Status+0x5e>
	   else if (BCurrent >= 10 || BHealth == 1 || BTemp > 50)
 8000e16:	797b      	ldrb	r3, [r7, #5]
 8000e18:	2b09      	cmp	r3, #9
 8000e1a:	d805      	bhi.n	8000e28 <BatteryStatus_Status+0x54>
 8000e1c:	793b      	ldrb	r3, [r7, #4]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d002      	beq.n	8000e28 <BatteryStatus_Status+0x54>
 8000e22:	78fb      	ldrb	r3, [r7, #3]
 8000e24:	2b32      	cmp	r3, #50	@ 0x32
 8000e26:	d902      	bls.n	8000e2e <BatteryStatus_Status+0x5a>
		  batteryStatusCode = 2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	e001      	b.n	8000e32 <BatteryStatus_Status+0x5e>
	   else
		  batteryStatusCode = 1;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	71fb      	strb	r3, [r7, #7]
    }

	 sendBatteryStatusMessage(batteryStatusCode);
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fe9f 	bl	8000b78 <sendBatteryStatusMessage>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200000d8 	.word	0x200000d8

08000e48 <ClimatControl_Status>:

void ClimatControl_Status(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	uint8_t ClimateStatusCode;

	uint8_t ClimatStatus = ClimateControl.ACStatus;
 8000e4e:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <ClimatControl_Status+0x50>)
 8000e50:	789b      	ldrb	r3, [r3, #2]
 8000e52:	71bb      	strb	r3, [r7, #6]
	uint8_t ClimatAQuality = ClimateControl.AirQuality;
 8000e54:	4b10      	ldr	r3, [pc, #64]	@ (8000e98 <ClimatControl_Status+0x50>)
 8000e56:	78db      	ldrb	r3, [r3, #3]
 8000e58:	717b      	strb	r3, [r7, #5]
	uint8_t ClimatCTemp = ClimateControl.CabinTemp;
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <ClimatControl_Status+0x50>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	713b      	strb	r3, [r7, #4]
	uint8_t ClimatFSpeed = ClimateControl.FanSpeed;
 8000e60:	4b0d      	ldr	r3, [pc, #52]	@ (8000e98 <ClimatControl_Status+0x50>)
 8000e62:	785b      	ldrb	r3, [r3, #1]
 8000e64:	70fb      	strb	r3, [r7, #3]

	if(ClimatCTemp >35 ||ClimatAQuality == 0 ||  ClimatStatus == 0 || ClimatFSpeed == 90)
 8000e66:	793b      	ldrb	r3, [r7, #4]
 8000e68:	2b23      	cmp	r3, #35	@ 0x23
 8000e6a:	d808      	bhi.n	8000e7e <ClimatControl_Status+0x36>
 8000e6c:	797b      	ldrb	r3, [r7, #5]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d005      	beq.n	8000e7e <ClimatControl_Status+0x36>
 8000e72:	79bb      	ldrb	r3, [r7, #6]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d002      	beq.n	8000e7e <ClimatControl_Status+0x36>
 8000e78:	78fb      	ldrb	r3, [r7, #3]
 8000e7a:	2b5a      	cmp	r3, #90	@ 0x5a
 8000e7c:	d102      	bne.n	8000e84 <ClimatControl_Status+0x3c>
		ClimateStatusCode = 2;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	71fb      	strb	r3, [r7, #7]
 8000e82:	e001      	b.n	8000e88 <ClimatControl_Status+0x40>
	else
		ClimateStatusCode = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	71fb      	strb	r3, [r7, #7]

	 sendClimatControlMessage(ClimateStatusCode);
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff febc 	bl	8000c08 <sendClimatControlMessage>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200000d0 	.word	0x200000d0

08000e9c <NavigationStatus_Status>:

void NavigationStatus_Status(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
	uint8_t navigationStatusCode;


	uint8_t NGPSAccuracy =  NavigationStatus.GPS_Accuracy;
 8000ea2:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <NavigationStatus_Status+0x50>)
 8000ea4:	789b      	ldrb	r3, [r3, #2]
 8000ea6:	71bb      	strb	r3, [r7, #6]
	uint8_t NGPSLatitude =  NavigationStatus.GPS_Latitude;
 8000ea8:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <NavigationStatus_Status+0x50>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	717b      	strb	r3, [r7, #5]
	uint8_t NGPSLongitude =  NavigationStatus.GPS_Longitude;
 8000eae:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <NavigationStatus_Status+0x50>)
 8000eb0:	785b      	ldrb	r3, [r3, #1]
 8000eb2:	713b      	strb	r3, [r7, #4]
	uint8_t NStatus =  NavigationStatus.NavigationStatus;
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <NavigationStatus_Status+0x50>)
 8000eb6:	78db      	ldrb	r3, [r3, #3]
 8000eb8:	70fb      	strb	r3, [r7, #3]


	if(NStatus == 2 || NGPSAccuracy<30  || NGPSLatitude <30 || NGPSLongitude <20)
 8000eba:	78fb      	ldrb	r3, [r7, #3]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d008      	beq.n	8000ed2 <NavigationStatus_Status+0x36>
 8000ec0:	79bb      	ldrb	r3, [r7, #6]
 8000ec2:	2b1d      	cmp	r3, #29
 8000ec4:	d905      	bls.n	8000ed2 <NavigationStatus_Status+0x36>
 8000ec6:	797b      	ldrb	r3, [r7, #5]
 8000ec8:	2b1d      	cmp	r3, #29
 8000eca:	d902      	bls.n	8000ed2 <NavigationStatus_Status+0x36>
 8000ecc:	793b      	ldrb	r3, [r7, #4]
 8000ece:	2b13      	cmp	r3, #19
 8000ed0:	d802      	bhi.n	8000ed8 <NavigationStatus_Status+0x3c>

		navigationStatusCode=2;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	71fb      	strb	r3, [r7, #7]
 8000ed6:	e001      	b.n	8000edc <NavigationStatus_Status+0x40>
	else
		navigationStatusCode=0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	71fb      	strb	r3, [r7, #7]

	sendNavigationStatusMessage(navigationStatusCode);
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fe6e 	bl	8000bc0 <sendNavigationStatusMessage>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200000d4 	.word	0x200000d4

08000ef0 <TireStatus_Status>:

void TireStatus_Status(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	uint8_t tireStatusCode=0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71fb      	strb	r3, [r7, #7]



	uint8_t  TPressRl = TireStatus.TirePresseRL;
 8000efa:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <TireStatus_Status+0x54>)
 8000efc:	789b      	ldrb	r3, [r3, #2]
 8000efe:	71bb      	strb	r3, [r7, #6]
	uint8_t  TPressFl = TireStatus.TirePressureFL;
 8000f00:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <TireStatus_Status+0x54>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	717b      	strb	r3, [r7, #5]
	uint8_t  TPressFr = TireStatus.TirePressureFR;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <TireStatus_Status+0x54>)
 8000f08:	785b      	ldrb	r3, [r3, #1]
 8000f0a:	713b      	strb	r3, [r7, #4]
	uint8_t  TPressRr = TireStatus.TirePressureRR;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <TireStatus_Status+0x54>)
 8000f0e:	78db      	ldrb	r3, [r3, #3]
 8000f10:	70fb      	strb	r3, [r7, #3]



	if(TPressFl <30 || TPressFr <30 || TPressRl <30 || TPressRr <30 )
 8000f12:	797b      	ldrb	r3, [r7, #5]
 8000f14:	2b1d      	cmp	r3, #29
 8000f16:	d908      	bls.n	8000f2a <TireStatus_Status+0x3a>
 8000f18:	793b      	ldrb	r3, [r7, #4]
 8000f1a:	2b1d      	cmp	r3, #29
 8000f1c:	d905      	bls.n	8000f2a <TireStatus_Status+0x3a>
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	2b1d      	cmp	r3, #29
 8000f22:	d902      	bls.n	8000f2a <TireStatus_Status+0x3a>
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	2b1d      	cmp	r3, #29
 8000f28:	d802      	bhi.n	8000f30 <TireStatus_Status+0x40>
	{
		tireStatusCode =2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	71fb      	strb	r3, [r7, #7]
 8000f2e:	e001      	b.n	8000f34 <TireStatus_Status+0x44>
	}
	else
	{
		tireStatusCode =1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	71fb      	strb	r3, [r7, #7]
	}

	 sendTireStatusMessage(tireStatusCode);
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fe8a 	bl	8000c50 <sendTireStatusMessage>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200000cc 	.word	0x200000cc

08000f48 <handleCANRxMessage>:

// Called from RX callback
void handleCANRxMessage(uint32_t id, uint8_t* data, uint8_t dlc)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	4613      	mov	r3, r2
 8000f54:	71fb      	strb	r3, [r7, #7]
    if (id == 0x200 && dlc >= sizeof(vehicleInfo_T))
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f5c:	d108      	bne.n	8000f70 <handleCANRxMessage+0x28>
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	d905      	bls.n	8000f70 <handleCANRxMessage+0x28>
    {
        memcpy(&vehicleData, data, sizeof(vehicleInfo_T));
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b32      	ldr	r3, [pc, #200]	@ (8001034 <handleCANRxMessage+0xec>)
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e051      	b.n	8001014 <handleCANRxMessage+0xcc>
    }
    else if (id == 0x300 && dlc >= sizeof(EngineeInfo_T))
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000f76:	d108      	bne.n	8000f8a <handleCANRxMessage+0x42>
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d905      	bls.n	8000f8a <handleCANRxMessage+0x42>
    {
        memcpy(&engineData, data, sizeof(EngineeInfo_T));
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b2c      	ldr	r3, [pc, #176]	@ (8001038 <handleCANRxMessage+0xf0>)
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e044      	b.n	8001014 <handleCANRxMessage+0xcc>
    }
    else if (id == 0x600 && dlc >= sizeof(FuelStatus_T))
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8000f90:	d109      	bne.n	8000fa6 <handleCANRxMessage+0x5e>
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b05      	cmp	r3, #5
 8000f96:	d906      	bls.n	8000fa6 <handleCANRxMessage+0x5e>
	{
		memcpy(&fuelStatus, data, sizeof(FuelStatus_T));
 8000f98:	4b28      	ldr	r3, [pc, #160]	@ (800103c <handleCANRxMessage+0xf4>)
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	6810      	ldr	r0, [r2, #0]
 8000f9e:	6018      	str	r0, [r3, #0]
 8000fa0:	8892      	ldrh	r2, [r2, #4]
 8000fa2:	809a      	strh	r2, [r3, #4]
 8000fa4:	e036      	b.n	8001014 <handleCANRxMessage+0xcc>
	}
    else if (id ==0x641  && dlc >= sizeof(TireStatus_T))
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f240 6241 	movw	r2, #1601	@ 0x641
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d108      	bne.n	8000fc2 <handleCANRxMessage+0x7a>
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d905      	bls.n	8000fc2 <handleCANRxMessage+0x7a>
	{
		memcpy(&TireStatus, data, sizeof(TireStatus_T));
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b20      	ldr	r3, [pc, #128]	@ (8001040 <handleCANRxMessage+0xf8>)
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	e028      	b.n	8001014 <handleCANRxMessage+0xcc>
	}
    else if (id ==0x631  && dlc >= sizeof(ClimateControl_T))
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f240 6231 	movw	r2, #1585	@ 0x631
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d108      	bne.n	8000fde <handleCANRxMessage+0x96>
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d905      	bls.n	8000fde <handleCANRxMessage+0x96>
	{
		memcpy(&ClimateControl, data, sizeof(ClimateControl_T));
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001044 <handleCANRxMessage+0xfc>)
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	e01a      	b.n	8001014 <handleCANRxMessage+0xcc>
	}
    else if (id ==0x621  && dlc >= sizeof(NavigationStatus_T))
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f240 6221 	movw	r2, #1569	@ 0x621
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d108      	bne.n	8000ffa <handleCANRxMessage+0xb2>
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d905      	bls.n	8000ffa <handleCANRxMessage+0xb2>
	{
		memcpy(&NavigationStatus, data, sizeof(NavigationStatus_T));
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <handleCANRxMessage+0x100>)
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	e00c      	b.n	8001014 <handleCANRxMessage+0xcc>
	}
    else if (id == 0x611  && dlc >= sizeof(BatteryStatus_T))
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f240 6211 	movw	r2, #1553	@ 0x611
 8001000:	4293      	cmp	r3, r2
 8001002:	d107      	bne.n	8001014 <handleCANRxMessage+0xcc>
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d904      	bls.n	8001014 <handleCANRxMessage+0xcc>
   	{
   		memcpy(&BatteryStatus, data, sizeof(BatteryStatus_T));
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <handleCANRxMessage+0x104>)
 8001012:	601a      	str	r2, [r3, #0]
   	}
    FuelEconomy_Ctrl();
 8001014:	f7ff fe40 	bl	8000c98 <FuelEconomy_Ctrl>
    FuelStatus_Status();
 8001018:	f7ff fe8e 	bl	8000d38 <FuelStatus_Status>
    BatteryStatus_Status();
 800101c:	f7ff feda 	bl	8000dd4 <BatteryStatus_Status>
    ClimatControl_Status();
 8001020:	f7ff ff12 	bl	8000e48 <ClimatControl_Status>
    NavigationStatus_Status();
 8001024:	f7ff ff3a 	bl	8000e9c <NavigationStatus_Status>
    TireStatus_Status();
 8001028:	f7ff ff62 	bl	8000ef0 <TireStatus_Status>

}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200000bc 	.word	0x200000bc
 8001038:	200000c0 	.word	0x200000c0
 800103c:	200000c4 	.word	0x200000c4
 8001040:	200000cc 	.word	0x200000cc
 8001044:	200000d0 	.word	0x200000d0
 8001048:	200000d4 	.word	0x200000d4
 800104c:	200000d8 	.word	0x200000d8

08001050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001050:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001088 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001054:	f7ff fcc4 	bl	80009e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001058:	480c      	ldr	r0, [pc, #48]	@ (800108c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800105a:	490d      	ldr	r1, [pc, #52]	@ (8001090 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800105c:	4a0d      	ldr	r2, [pc, #52]	@ (8001094 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001060:	e002      	b.n	8001068 <LoopCopyDataInit>

08001062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001066:	3304      	adds	r3, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800106c:	d3f9      	bcc.n	8001062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106e:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001070:	4c0a      	ldr	r4, [pc, #40]	@ (800109c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001074:	e001      	b.n	800107a <LoopFillZerobss>

08001076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001078:	3204      	adds	r2, #4

0800107a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800107c:	d3fb      	bcc.n	8001076 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800107e:	f002 faeb 	bl	8003658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001082:	f7ff fb5b 	bl	800073c <main>
  bx  lr    
 8001086:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800108c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001090:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001094:	080036e0 	.word	0x080036e0
  ldr r2, =_sbss
 8001098:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800109c:	200000e0 	.word	0x200000e0

080010a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC_IRQHandler>
	...

080010a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a8:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0d      	ldr	r2, [pc, #52]	@ (80010e4 <HAL_Init+0x40>)
 80010ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b4:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <HAL_Init+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <HAL_Init+0x40>)
 80010ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c0:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a07      	ldr	r2, [pc, #28]	@ (80010e4 <HAL_Init+0x40>)
 80010c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010cc:	2003      	movs	r0, #3
 80010ce:	f000 ffb5 	bl	800203c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d2:	200f      	movs	r0, #15
 80010d4:	f000 f808 	bl	80010e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d8:	f7ff fc20 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023c00 	.word	0x40023c00

080010e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <HAL_InitTick+0x54>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <HAL_InitTick+0x58>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f000 ffcd 	bl	80020a6 <HAL_SYSTICK_Config>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e00e      	b.n	8001134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b0f      	cmp	r3, #15
 800111a:	d80a      	bhi.n	8001132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800111c:	2200      	movs	r2, #0
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f000 ff95 	bl	8002052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001128:	4a06      	ldr	r2, [pc, #24]	@ (8001144 <HAL_InitTick+0x5c>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000000 	.word	0x20000000
 8001140:	20000008 	.word	0x20000008
 8001144:	20000004 	.word	0x20000004

08001148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_IncTick+0x20>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <HAL_IncTick+0x24>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a04      	ldr	r2, [pc, #16]	@ (800116c <HAL_IncTick+0x24>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008
 800116c:	200000dc 	.word	0x200000dc

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <HAL_GetTick+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	200000dc 	.word	0x200000dc

08001188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff ffee 	bl	8001170 <HAL_GetTick>
 8001194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d005      	beq.n	80011ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a2:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <HAL_Delay+0x44>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ae:	bf00      	nop
 80011b0:	f7ff ffde 	bl	8001170 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d8f7      	bhi.n	80011b0 <HAL_Delay+0x28>
  {
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000008 	.word	0x20000008

080011d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e0ed      	b.n	80013be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d102      	bne.n	80011f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff f9f4 	bl	80005dc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0201 	orr.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001204:	f7ff ffb4 	bl	8001170 <HAL_GetTick>
 8001208:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800120a:	e012      	b.n	8001232 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800120c:	f7ff ffb0 	bl	8001170 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b0a      	cmp	r3, #10
 8001218:	d90b      	bls.n	8001232 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2205      	movs	r2, #5
 800122a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e0c5      	b.n	80013be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0e5      	beq.n	800120c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0202 	bic.w	r2, r2, #2
 800124e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001250:	f7ff ff8e 	bl	8001170 <HAL_GetTick>
 8001254:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001256:	e012      	b.n	800127e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001258:	f7ff ff8a 	bl	8001170 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b0a      	cmp	r3, #10
 8001264:	d90b      	bls.n	800127e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2205      	movs	r2, #5
 8001276:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e09f      	b.n	80013be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1e5      	bne.n	8001258 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7e1b      	ldrb	r3, [r3, #24]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d108      	bne.n	80012a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	e007      	b.n	80012b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7e5b      	ldrb	r3, [r3, #25]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d108      	bne.n	80012d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	e007      	b.n	80012e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80012de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7e9b      	ldrb	r3, [r3, #26]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d108      	bne.n	80012fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0220 	orr.w	r2, r2, #32
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	e007      	b.n	800130a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0220 	bic.w	r2, r2, #32
 8001308:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7edb      	ldrb	r3, [r3, #27]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d108      	bne.n	8001324 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0210 	bic.w	r2, r2, #16
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e007      	b.n	8001334 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0210 	orr.w	r2, r2, #16
 8001332:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7f1b      	ldrb	r3, [r3, #28]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d108      	bne.n	800134e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0208 	orr.w	r2, r2, #8
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e007      	b.n	800135e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0208 	bic.w	r2, r2, #8
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7f5b      	ldrb	r3, [r3, #29]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d108      	bne.n	8001378 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f042 0204 	orr.w	r2, r2, #4
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e007      	b.n	8001388 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0204 	bic.w	r2, r2, #4
 8001386:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	ea42 0103 	orr.w	r1, r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	1e5a      	subs	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b087      	sub	sp, #28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80013da:	7dfb      	ldrb	r3, [r7, #23]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d003      	beq.n	80013e8 <HAL_CAN_ConfigFilter+0x20>
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	f040 80be 	bne.w	8001564 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80013e8:	4b65      	ldr	r3, [pc, #404]	@ (8001580 <HAL_CAN_ConfigFilter+0x1b8>)
 80013ea:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013f2:	f043 0201 	orr.w	r2, r3, #1
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001402:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	431a      	orrs	r2, r3
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	f003 031f 	and.w	r3, r3, #31
 8001428:	2201      	movs	r2, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	43db      	mvns	r3, r3
 800143a:	401a      	ands	r2, r3
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d123      	bne.n	8001492 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	43db      	mvns	r3, r3
 8001454:	401a      	ands	r2, r3
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800146c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	3248      	adds	r2, #72	@ 0x48
 8001472:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001486:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001488:	6939      	ldr	r1, [r7, #16]
 800148a:	3348      	adds	r3, #72	@ 0x48
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d122      	bne.n	80014e0 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014ba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	3248      	adds	r2, #72	@ 0x48
 80014c0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014d4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014d6:	6939      	ldr	r1, [r7, #16]
 80014d8:	3348      	adds	r3, #72	@ 0x48
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d109      	bne.n	80014fc <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	401a      	ands	r2, r3
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80014fa:	e007      	b.n	800150c <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	431a      	orrs	r2, r3
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d109      	bne.n	8001528 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	43db      	mvns	r3, r3
 800151e:	401a      	ands	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001526:	e007      	b.n	8001538 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	431a      	orrs	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d107      	bne.n	8001550 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	431a      	orrs	r2, r3
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001556:	f023 0201 	bic.w	r2, r3, #1
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	e006      	b.n	8001572 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001568:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
  }
}
 8001572:	4618      	mov	r0, r3
 8001574:	371c      	adds	r7, #28
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40006400 	.word	0x40006400

08001584 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b01      	cmp	r3, #1
 8001596:	d12e      	bne.n	80015f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2202      	movs	r2, #2
 800159c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0201 	bic.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015b0:	f7ff fdde 	bl	8001170 <HAL_GetTick>
 80015b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015b6:	e012      	b.n	80015de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015b8:	f7ff fdda 	bl	8001170 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b0a      	cmp	r3, #10
 80015c4:	d90b      	bls.n	80015de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2205      	movs	r2, #5
 80015d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e012      	b.n	8001604 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1e5      	bne.n	80015b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e006      	b.n	8001604 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
  }
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	@ 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001620:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800162a:	7ffb      	ldrb	r3, [r7, #31]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d003      	beq.n	8001638 <HAL_CAN_AddTxMessage+0x2c>
 8001630:	7ffb      	ldrb	r3, [r7, #31]
 8001632:	2b02      	cmp	r3, #2
 8001634:	f040 80ad 	bne.w	8001792 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10a      	bne.n	8001658 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001648:	2b00      	cmp	r3, #0
 800164a:	d105      	bne.n	8001658 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 8095 	beq.w	8001782 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	0e1b      	lsrs	r3, r3, #24
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001662:	2201      	movs	r2, #1
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	409a      	lsls	r2, r3
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10d      	bne.n	8001690 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800167e:	68f9      	ldr	r1, [r7, #12]
 8001680:	6809      	ldr	r1, [r1, #0]
 8001682:	431a      	orrs	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3318      	adds	r3, #24
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	440b      	add	r3, r1
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e00f      	b.n	80016b0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800169a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016a0:	68f9      	ldr	r1, [r7, #12]
 80016a2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80016a4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3318      	adds	r3, #24
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	440b      	add	r3, r1
 80016ae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6819      	ldr	r1, [r3, #0]
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	3318      	adds	r3, #24
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	440b      	add	r3, r1
 80016c0:	3304      	adds	r3, #4
 80016c2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	7d1b      	ldrb	r3, [r3, #20]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d111      	bne.n	80016f0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	3318      	adds	r3, #24
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	4413      	add	r3, r2
 80016d8:	3304      	adds	r3, #4
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	6811      	ldr	r1, [r2, #0]
 80016e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	3318      	adds	r3, #24
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	440b      	add	r3, r1
 80016ec:	3304      	adds	r3, #4
 80016ee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3307      	adds	r3, #7
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	061a      	lsls	r2, r3, #24
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3306      	adds	r3, #6
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	041b      	lsls	r3, r3, #16
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3305      	adds	r3, #5
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	4313      	orrs	r3, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	3204      	adds	r2, #4
 8001710:	7812      	ldrb	r2, [r2, #0]
 8001712:	4610      	mov	r0, r2
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	6811      	ldr	r1, [r2, #0]
 8001718:	ea43 0200 	orr.w	r2, r3, r0
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	440b      	add	r3, r1
 8001722:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001726:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3303      	adds	r3, #3
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	061a      	lsls	r2, r3, #24
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3302      	adds	r3, #2
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	041b      	lsls	r3, r3, #16
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3301      	adds	r3, #1
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	4313      	orrs	r3, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	7812      	ldrb	r2, [r2, #0]
 8001748:	4610      	mov	r0, r2
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	6811      	ldr	r1, [r2, #0]
 800174e:	ea43 0200 	orr.w	r2, r3, r0
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	440b      	add	r3, r1
 8001758:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800175c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3318      	adds	r3, #24
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	4413      	add	r3, r2
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	6811      	ldr	r1, [r2, #0]
 8001770:	f043 0201 	orr.w	r2, r3, #1
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3318      	adds	r3, #24
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	440b      	add	r3, r1
 800177c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	e00e      	b.n	80017a0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001786:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e006      	b.n	80017a0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001796:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
  }
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3724      	adds	r7, #36	@ 0x24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80017ac:	b480      	push	{r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d003      	beq.n	80017d0 <HAL_CAN_GetRxMessage+0x24>
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	f040 8103 	bne.w	80019d6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10e      	bne.n	80017f4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d116      	bne.n	8001812 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0f7      	b.n	80019e4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d107      	bne.n	8001812 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001806:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e0e8      	b.n	80019e4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	331b      	adds	r3, #27
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	4413      	add	r3, r2
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0204 	and.w	r2, r3, #4
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10c      	bne.n	800184a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	331b      	adds	r3, #27
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	4413      	add	r3, r2
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	0d5b      	lsrs	r3, r3, #21
 8001840:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	e00b      	b.n	8001862 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	331b      	adds	r3, #27
 8001852:	011b      	lsls	r3, r3, #4
 8001854:	4413      	add	r3, r2
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	331b      	adds	r3, #27
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	4413      	add	r3, r2
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0202 	and.w	r2, r3, #2
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	331b      	adds	r3, #27
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	4413      	add	r3, r2
 8001884:	3304      	adds	r3, #4
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2208      	movs	r2, #8
 8001894:	611a      	str	r2, [r3, #16]
 8001896:	e00b      	b.n	80018b0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	331b      	adds	r3, #27
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	4413      	add	r3, r2
 80018a4:	3304      	adds	r3, #4
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 020f 	and.w	r2, r3, #15
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	331b      	adds	r3, #27
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	4413      	add	r3, r2
 80018bc:	3304      	adds	r3, #4
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	331b      	adds	r3, #27
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	4413      	add	r3, r2
 80018d4:	3304      	adds	r3, #4
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0c1b      	lsrs	r3, r3, #16
 80018da:	b29a      	uxth	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	4413      	add	r3, r2
 80018ea:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	4413      	add	r3, r2
 8001900:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	0a1a      	lsrs	r2, r3, #8
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	3301      	adds	r3, #1
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	011b      	lsls	r3, r3, #4
 8001918:	4413      	add	r3, r2
 800191a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0c1a      	lsrs	r2, r3, #16
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	3302      	adds	r3, #2
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	4413      	add	r3, r2
 8001934:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	0e1a      	lsrs	r2, r3, #24
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	3303      	adds	r3, #3
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	4413      	add	r3, r2
 800194e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	3304      	adds	r3, #4
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	4413      	add	r3, r2
 8001966:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	0a1a      	lsrs	r2, r3, #8
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	3305      	adds	r3, #5
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	4413      	add	r3, r2
 8001980:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	0c1a      	lsrs	r2, r3, #16
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	3306      	adds	r3, #6
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	4413      	add	r3, r2
 800199a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	0e1a      	lsrs	r2, r3, #24
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	3307      	adds	r3, #7
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d108      	bne.n	80019c2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0220 	orr.w	r2, r2, #32
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	e007      	b.n	80019d2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f042 0220 	orr.w	r2, r2, #32
 80019d0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e006      	b.n	80019e4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019da:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
  }
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	371c      	adds	r7, #28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a00:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d002      	beq.n	8001a0e <HAL_CAN_ActivateNotification+0x1e>
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d109      	bne.n	8001a22 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6959      	ldr	r1, [r3, #20]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e006      	b.n	8001a30 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a26:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
  }
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	@ 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d07c      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d023      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2201      	movs	r2, #1
 8001a92:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f983 	bl	8001daa <HAL_CAN_TxMailbox0CompleteCallback>
 8001aa4:	e016      	b.n	8001ad4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d004      	beq.n	8001aba <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab8:	e00c      	b.n	8001ad4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d004      	beq.n	8001ace <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001acc:	e002      	b.n	8001ad4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f989 	bl	8001de6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d024      	beq.n	8001b28 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ae6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f963 	bl	8001dbe <HAL_CAN_TxMailbox1CompleteCallback>
 8001af8:	e016      	b.n	8001b28 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d004      	beq.n	8001b0e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b06:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b0c:	e00c      	b.n	8001b28 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d004      	beq.n	8001b22 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b20:	e002      	b.n	8001b28 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f969 	bl	8001dfa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d024      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f943 	bl	8001dd2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b4c:	e016      	b.n	8001b7c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d004      	beq.n	8001b62 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b60:	e00c      	b.n	8001b7c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d004      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b74:	e002      	b.n	8001b7c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f949 	bl	8001e0e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00c      	beq.n	8001ba0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d007      	beq.n	8001ba0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2210      	movs	r2, #16
 8001b9e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2208      	movs	r2, #8
 8001bba:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f930 	bl	8001e22 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d009      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7fe fe08 	bl	80007f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00c      	beq.n	8001c04 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d007      	beq.n	8001c04 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bfa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2210      	movs	r2, #16
 8001c02:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f912 	bl	8001e4a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d009      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f8f9 	bl	8001e36 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f8fc 	bl	8001e5e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00b      	beq.n	8001c88 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d006      	beq.n	8001c88 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2208      	movs	r2, #8
 8001c80:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f8f5 	bl	8001e72 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d07b      	beq.n	8001d8a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d072      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d008      	beq.n	8001cb8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d008      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d043      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d03e      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d0a:	2b60      	cmp	r3, #96	@ 0x60
 8001d0c:	d02b      	beq.n	8001d66 <HAL_CAN_IRQHandler+0x32a>
 8001d0e:	2b60      	cmp	r3, #96	@ 0x60
 8001d10:	d82e      	bhi.n	8001d70 <HAL_CAN_IRQHandler+0x334>
 8001d12:	2b50      	cmp	r3, #80	@ 0x50
 8001d14:	d022      	beq.n	8001d5c <HAL_CAN_IRQHandler+0x320>
 8001d16:	2b50      	cmp	r3, #80	@ 0x50
 8001d18:	d82a      	bhi.n	8001d70 <HAL_CAN_IRQHandler+0x334>
 8001d1a:	2b40      	cmp	r3, #64	@ 0x40
 8001d1c:	d019      	beq.n	8001d52 <HAL_CAN_IRQHandler+0x316>
 8001d1e:	2b40      	cmp	r3, #64	@ 0x40
 8001d20:	d826      	bhi.n	8001d70 <HAL_CAN_IRQHandler+0x334>
 8001d22:	2b30      	cmp	r3, #48	@ 0x30
 8001d24:	d010      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x30c>
 8001d26:	2b30      	cmp	r3, #48	@ 0x30
 8001d28:	d822      	bhi.n	8001d70 <HAL_CAN_IRQHandler+0x334>
 8001d2a:	2b10      	cmp	r3, #16
 8001d2c:	d002      	beq.n	8001d34 <HAL_CAN_IRQHandler+0x2f8>
 8001d2e:	2b20      	cmp	r3, #32
 8001d30:	d005      	beq.n	8001d3e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d32:	e01d      	b.n	8001d70 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d36:	f043 0308 	orr.w	r3, r3, #8
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d3c:	e019      	b.n	8001d72 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	f043 0310 	orr.w	r3, r3, #16
 8001d44:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d46:	e014      	b.n	8001d72 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4a:	f043 0320 	orr.w	r3, r3, #32
 8001d4e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d50:	e00f      	b.n	8001d72 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d5a:	e00a      	b.n	8001d72 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d64:	e005      	b.n	8001d72 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d6e:	e000      	b.n	8001d72 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d70:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	699a      	ldr	r2, [r3, #24]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001d80:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2204      	movs	r2, #4
 8001d88:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f872 	bl	8001e86 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	@ 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee8:	4b04      	ldr	r3, [pc, #16]	@ (8001efc <__NVIC_GetPriorityGrouping+0x18>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 0307 	and.w	r3, r3, #7
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0b      	blt.n	8001f2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	4907      	ldr	r1, [pc, #28]	@ (8001f38 <__NVIC_EnableIRQ+0x38>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2001      	movs	r0, #1
 8001f22:	fa00 f202 	lsl.w	r2, r0, r2
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000e100 	.word	0xe000e100

08001f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	6039      	str	r1, [r7, #0]
 8001f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	db0a      	blt.n	8001f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	490c      	ldr	r1, [pc, #48]	@ (8001f88 <__NVIC_SetPriority+0x4c>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	0112      	lsls	r2, r2, #4
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	440b      	add	r3, r1
 8001f60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f64:	e00a      	b.n	8001f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4908      	ldr	r1, [pc, #32]	@ (8001f8c <__NVIC_SetPriority+0x50>)
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	3b04      	subs	r3, #4
 8001f74:	0112      	lsls	r2, r2, #4
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	440b      	add	r3, r1
 8001f7a:	761a      	strb	r2, [r3, #24]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000e100 	.word	0xe000e100
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	@ 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f1c3 0307 	rsb	r3, r3, #7
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	bf28      	it	cs
 8001fae:	2304      	movcs	r3, #4
 8001fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	2b06      	cmp	r3, #6
 8001fb8:	d902      	bls.n	8001fc0 <NVIC_EncodePriority+0x30>
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3b03      	subs	r3, #3
 8001fbe:	e000      	b.n	8001fc2 <NVIC_EncodePriority+0x32>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	43d9      	mvns	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	4313      	orrs	r3, r2
         );
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3724      	adds	r7, #36	@ 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002008:	d301      	bcc.n	800200e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200a:	2301      	movs	r3, #1
 800200c:	e00f      	b.n	800202e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800200e:	4a0a      	ldr	r2, [pc, #40]	@ (8002038 <SysTick_Config+0x40>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002016:	210f      	movs	r1, #15
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f7ff ff8e 	bl	8001f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002020:	4b05      	ldr	r3, [pc, #20]	@ (8002038 <SysTick_Config+0x40>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002026:	4b04      	ldr	r3, [pc, #16]	@ (8002038 <SysTick_Config+0x40>)
 8002028:	2207      	movs	r2, #7
 800202a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	e000e010 	.word	0xe000e010

0800203c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff29 	bl	8001e9c <__NVIC_SetPriorityGrouping>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	4603      	mov	r3, r0
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002064:	f7ff ff3e 	bl	8001ee4 <__NVIC_GetPriorityGrouping>
 8002068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	f7ff ff8e 	bl	8001f90 <NVIC_EncodePriority>
 8002074:	4602      	mov	r2, r0
 8002076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff5d 	bl	8001f3c <__NVIC_SetPriority>
}
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff31 	bl	8001f00 <__NVIC_EnableIRQ>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ffa2 	bl	8001ff8 <SysTick_Config>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	@ 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	e165      	b.n	80023a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020dc:	2201      	movs	r2, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	f040 8154 	bne.w	80023a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d005      	beq.n	8002112 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210e:	2b02      	cmp	r3, #2
 8002110:	d130      	bne.n	8002174 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	2203      	movs	r2, #3
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002148:	2201      	movs	r2, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 0201 	and.w	r2, r3, #1
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b03      	cmp	r3, #3
 800217e:	d017      	beq.n	80021b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d123      	bne.n	8002204 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	08da      	lsrs	r2, r3, #3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3208      	adds	r2, #8
 80021c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	220f      	movs	r2, #15
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	08da      	lsrs	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3208      	adds	r2, #8
 80021fe:	69b9      	ldr	r1, [r7, #24]
 8002200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	2203      	movs	r2, #3
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0203 	and.w	r2, r3, #3
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80ae 	beq.w	80023a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	4b5d      	ldr	r3, [pc, #372]	@ (80023c0 <HAL_GPIO_Init+0x300>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	4a5c      	ldr	r2, [pc, #368]	@ (80023c0 <HAL_GPIO_Init+0x300>)
 8002250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002254:	6453      	str	r3, [r2, #68]	@ 0x44
 8002256:	4b5a      	ldr	r3, [pc, #360]	@ (80023c0 <HAL_GPIO_Init+0x300>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002262:	4a58      	ldr	r2, [pc, #352]	@ (80023c4 <HAL_GPIO_Init+0x304>)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	089b      	lsrs	r3, r3, #2
 8002268:	3302      	adds	r3, #2
 800226a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	220f      	movs	r2, #15
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4f      	ldr	r2, [pc, #316]	@ (80023c8 <HAL_GPIO_Init+0x308>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d025      	beq.n	80022da <HAL_GPIO_Init+0x21a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4e      	ldr	r2, [pc, #312]	@ (80023cc <HAL_GPIO_Init+0x30c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d01f      	beq.n	80022d6 <HAL_GPIO_Init+0x216>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4d      	ldr	r2, [pc, #308]	@ (80023d0 <HAL_GPIO_Init+0x310>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d019      	beq.n	80022d2 <HAL_GPIO_Init+0x212>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4c      	ldr	r2, [pc, #304]	@ (80023d4 <HAL_GPIO_Init+0x314>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d013      	beq.n	80022ce <HAL_GPIO_Init+0x20e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4b      	ldr	r2, [pc, #300]	@ (80023d8 <HAL_GPIO_Init+0x318>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00d      	beq.n	80022ca <HAL_GPIO_Init+0x20a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4a      	ldr	r2, [pc, #296]	@ (80023dc <HAL_GPIO_Init+0x31c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d007      	beq.n	80022c6 <HAL_GPIO_Init+0x206>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a49      	ldr	r2, [pc, #292]	@ (80023e0 <HAL_GPIO_Init+0x320>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d101      	bne.n	80022c2 <HAL_GPIO_Init+0x202>
 80022be:	2306      	movs	r3, #6
 80022c0:	e00c      	b.n	80022dc <HAL_GPIO_Init+0x21c>
 80022c2:	2307      	movs	r3, #7
 80022c4:	e00a      	b.n	80022dc <HAL_GPIO_Init+0x21c>
 80022c6:	2305      	movs	r3, #5
 80022c8:	e008      	b.n	80022dc <HAL_GPIO_Init+0x21c>
 80022ca:	2304      	movs	r3, #4
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x21c>
 80022ce:	2303      	movs	r3, #3
 80022d0:	e004      	b.n	80022dc <HAL_GPIO_Init+0x21c>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e002      	b.n	80022dc <HAL_GPIO_Init+0x21c>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_GPIO_Init+0x21c>
 80022da:	2300      	movs	r3, #0
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	f002 0203 	and.w	r2, r2, #3
 80022e2:	0092      	lsls	r2, r2, #2
 80022e4:	4093      	lsls	r3, r2
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ec:	4935      	ldr	r1, [pc, #212]	@ (80023c4 <HAL_GPIO_Init+0x304>)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	3302      	adds	r3, #2
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022fa:	4b3a      	ldr	r3, [pc, #232]	@ (80023e4 <HAL_GPIO_Init+0x324>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800231e:	4a31      	ldr	r2, [pc, #196]	@ (80023e4 <HAL_GPIO_Init+0x324>)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002324:	4b2f      	ldr	r3, [pc, #188]	@ (80023e4 <HAL_GPIO_Init+0x324>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002348:	4a26      	ldr	r2, [pc, #152]	@ (80023e4 <HAL_GPIO_Init+0x324>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800234e:	4b25      	ldr	r3, [pc, #148]	@ (80023e4 <HAL_GPIO_Init+0x324>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002372:	4a1c      	ldr	r2, [pc, #112]	@ (80023e4 <HAL_GPIO_Init+0x324>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002378:	4b1a      	ldr	r3, [pc, #104]	@ (80023e4 <HAL_GPIO_Init+0x324>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800239c:	4a11      	ldr	r2, [pc, #68]	@ (80023e4 <HAL_GPIO_Init+0x324>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3301      	adds	r3, #1
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	2b0f      	cmp	r3, #15
 80023ac:	f67f ae96 	bls.w	80020dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3724      	adds	r7, #36	@ 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40013800 	.word	0x40013800
 80023c8:	40020000 	.word	0x40020000
 80023cc:	40020400 	.word	0x40020400
 80023d0:	40020800 	.word	0x40020800
 80023d4:	40020c00 	.word	0x40020c00
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40021400 	.word	0x40021400
 80023e0:	40021800 	.word	0x40021800
 80023e4:	40013c00 	.word	0x40013c00

080023e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
 80023f4:	4613      	mov	r3, r2
 80023f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f8:	787b      	ldrb	r3, [r7, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002404:	e003      	b.n	800240e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	041a      	lsls	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	619a      	str	r2, [r3, #24]
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800241a:	b480      	push	{r7}
 800241c:	b085      	sub	sp, #20
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800242c:	887a      	ldrh	r2, [r7, #2]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4013      	ands	r3, r2
 8002432:	041a      	lsls	r2, r3, #16
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	43d9      	mvns	r1, r3
 8002438:	887b      	ldrh	r3, [r7, #2]
 800243a:	400b      	ands	r3, r1
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	619a      	str	r2, [r3, #24]
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	603b      	str	r3, [r7, #0]
 800245e:	4b20      	ldr	r3, [pc, #128]	@ (80024e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	4a1f      	ldr	r2, [pc, #124]	@ (80024e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002468:	6413      	str	r3, [r2, #64]	@ 0x40
 800246a:	4b1d      	ldr	r3, [pc, #116]	@ (80024e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002476:	4b1b      	ldr	r3, [pc, #108]	@ (80024e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002478:	2201      	movs	r2, #1
 800247a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800247c:	f7fe fe78 	bl	8001170 <HAL_GetTick>
 8002480:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002482:	e009      	b.n	8002498 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002484:	f7fe fe74 	bl	8001170 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002492:	d901      	bls.n	8002498 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e01f      	b.n	80024d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002498:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a4:	d1ee      	bne.n	8002484 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80024a6:	4b11      	ldr	r3, [pc, #68]	@ (80024ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ac:	f7fe fe60 	bl	8001170 <HAL_GetTick>
 80024b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024b2:	e009      	b.n	80024c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024b4:	f7fe fe5c 	bl	8001170 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024c2:	d901      	bls.n	80024c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e007      	b.n	80024d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024c8:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80024d4:	d1ee      	bne.n	80024b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	420e0040 	.word	0x420e0040
 80024e8:	40007000 	.word	0x40007000
 80024ec:	420e0044 	.word	0x420e0044

080024f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0cc      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002504:	4b68      	ldr	r3, [pc, #416]	@ (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d90c      	bls.n	800252c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b65      	ldr	r3, [pc, #404]	@ (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b63      	ldr	r3, [pc, #396]	@ (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0b8      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d020      	beq.n	800257a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002544:	4b59      	ldr	r3, [pc, #356]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4a58      	ldr	r2, [pc, #352]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800254e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800255c:	4b53      	ldr	r3, [pc, #332]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4a52      	ldr	r2, [pc, #328]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002568:	4b50      	ldr	r3, [pc, #320]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	494d      	ldr	r1, [pc, #308]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d044      	beq.n	8002610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b47      	ldr	r3, [pc, #284]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d119      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e07f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d003      	beq.n	80025ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ae:	4b3f      	ldr	r3, [pc, #252]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e06f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025be:	4b3b      	ldr	r3, [pc, #236]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e067      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ce:	4b37      	ldr	r3, [pc, #220]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f023 0203 	bic.w	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4934      	ldr	r1, [pc, #208]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e0:	f7fe fdc6 	bl	8001170 <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e8:	f7fe fdc2 	bl	8001170 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e04f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	4b2b      	ldr	r3, [pc, #172]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 020c 	and.w	r2, r3, #12
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	429a      	cmp	r2, r3
 800260e:	d1eb      	bne.n	80025e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002610:	4b25      	ldr	r3, [pc, #148]	@ (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d20c      	bcs.n	8002638 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b22      	ldr	r3, [pc, #136]	@ (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b20      	ldr	r3, [pc, #128]	@ (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e032      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002644:	4b19      	ldr	r3, [pc, #100]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4916      	ldr	r1, [pc, #88]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002662:	4b12      	ldr	r3, [pc, #72]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	490e      	ldr	r1, [pc, #56]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002676:	f000 f855 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 800267a:	4602      	mov	r2, r0
 800267c:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	490a      	ldr	r1, [pc, #40]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	5ccb      	ldrb	r3, [r1, r3]
 800268a:	fa22 f303 	lsr.w	r3, r2, r3
 800268e:	4a09      	ldr	r2, [pc, #36]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002692:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fd26 	bl	80010e8 <HAL_InitTick>

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023c00 	.word	0x40023c00
 80026ac:	40023800 	.word	0x40023800
 80026b0:	080036b8 	.word	0x080036b8
 80026b4:	20000000 	.word	0x20000000
 80026b8:	20000004 	.word	0x20000004

080026bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c0:	4b03      	ldr	r3, [pc, #12]	@ (80026d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20000000 	.word	0x20000000

080026d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026d8:	f7ff fff0 	bl	80026bc <HAL_RCC_GetHCLKFreq>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	0a9b      	lsrs	r3, r3, #10
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	4903      	ldr	r1, [pc, #12]	@ (80026f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ea:	5ccb      	ldrb	r3, [r1, r3]
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800
 80026f8:	080036c8 	.word	0x080036c8

080026fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002700:	f7ff ffdc 	bl	80026bc <HAL_RCC_GetHCLKFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b05      	ldr	r3, [pc, #20]	@ (800271c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	0b5b      	lsrs	r3, r3, #13
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	4903      	ldr	r1, [pc, #12]	@ (8002720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002718:	4618      	mov	r0, r3
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40023800 	.word	0x40023800
 8002720:	080036c8 	.word	0x080036c8

08002724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002728:	b0ae      	sub	sp, #184	@ 0xb8
 800272a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800274a:	4bcb      	ldr	r3, [pc, #812]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x354>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b0c      	cmp	r3, #12
 8002754:	f200 8206 	bhi.w	8002b64 <HAL_RCC_GetSysClockFreq+0x440>
 8002758:	a201      	add	r2, pc, #4	@ (adr r2, 8002760 <HAL_RCC_GetSysClockFreq+0x3c>)
 800275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275e:	bf00      	nop
 8002760:	08002795 	.word	0x08002795
 8002764:	08002b65 	.word	0x08002b65
 8002768:	08002b65 	.word	0x08002b65
 800276c:	08002b65 	.word	0x08002b65
 8002770:	0800279d 	.word	0x0800279d
 8002774:	08002b65 	.word	0x08002b65
 8002778:	08002b65 	.word	0x08002b65
 800277c:	08002b65 	.word	0x08002b65
 8002780:	080027a5 	.word	0x080027a5
 8002784:	08002b65 	.word	0x08002b65
 8002788:	08002b65 	.word	0x08002b65
 800278c:	08002b65 	.word	0x08002b65
 8002790:	08002995 	.word	0x08002995
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002794:	4bb9      	ldr	r3, [pc, #740]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x358>)
 8002796:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800279a:	e1e7      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800279c:	4bb8      	ldr	r3, [pc, #736]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x35c>)
 800279e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027a2:	e1e3      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027a4:	4bb4      	ldr	r3, [pc, #720]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x354>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027b0:	4bb1      	ldr	r3, [pc, #708]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x354>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d071      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027bc:	4bae      	ldr	r3, [pc, #696]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x354>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	099b      	lsrs	r3, r3, #6
 80027c2:	2200      	movs	r2, #0
 80027c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027c8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80027cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80027d8:	2300      	movs	r3, #0
 80027da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80027de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027e2:	4622      	mov	r2, r4
 80027e4:	462b      	mov	r3, r5
 80027e6:	f04f 0000 	mov.w	r0, #0
 80027ea:	f04f 0100 	mov.w	r1, #0
 80027ee:	0159      	lsls	r1, r3, #5
 80027f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027f4:	0150      	lsls	r0, r2, #5
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4621      	mov	r1, r4
 80027fc:	1a51      	subs	r1, r2, r1
 80027fe:	6439      	str	r1, [r7, #64]	@ 0x40
 8002800:	4629      	mov	r1, r5
 8002802:	eb63 0301 	sbc.w	r3, r3, r1
 8002806:	647b      	str	r3, [r7, #68]	@ 0x44
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002814:	4649      	mov	r1, r9
 8002816:	018b      	lsls	r3, r1, #6
 8002818:	4641      	mov	r1, r8
 800281a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800281e:	4641      	mov	r1, r8
 8002820:	018a      	lsls	r2, r1, #6
 8002822:	4641      	mov	r1, r8
 8002824:	1a51      	subs	r1, r2, r1
 8002826:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002828:	4649      	mov	r1, r9
 800282a:	eb63 0301 	sbc.w	r3, r3, r1
 800282e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800283c:	4649      	mov	r1, r9
 800283e:	00cb      	lsls	r3, r1, #3
 8002840:	4641      	mov	r1, r8
 8002842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002846:	4641      	mov	r1, r8
 8002848:	00ca      	lsls	r2, r1, #3
 800284a:	4610      	mov	r0, r2
 800284c:	4619      	mov	r1, r3
 800284e:	4603      	mov	r3, r0
 8002850:	4622      	mov	r2, r4
 8002852:	189b      	adds	r3, r3, r2
 8002854:	633b      	str	r3, [r7, #48]	@ 0x30
 8002856:	462b      	mov	r3, r5
 8002858:	460a      	mov	r2, r1
 800285a:	eb42 0303 	adc.w	r3, r2, r3
 800285e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800286c:	4629      	mov	r1, r5
 800286e:	024b      	lsls	r3, r1, #9
 8002870:	4621      	mov	r1, r4
 8002872:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002876:	4621      	mov	r1, r4
 8002878:	024a      	lsls	r2, r1, #9
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002882:	2200      	movs	r2, #0
 8002884:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002888:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800288c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002890:	f7fd fcb8 	bl	8000204 <__aeabi_uldivmod>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4613      	mov	r3, r2
 800289a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800289e:	e067      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a0:	4b75      	ldr	r3, [pc, #468]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x354>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	099b      	lsrs	r3, r3, #6
 80028a6:	2200      	movs	r2, #0
 80028a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80028ac:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80028b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028ba:	2300      	movs	r3, #0
 80028bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80028be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80028c2:	4622      	mov	r2, r4
 80028c4:	462b      	mov	r3, r5
 80028c6:	f04f 0000 	mov.w	r0, #0
 80028ca:	f04f 0100 	mov.w	r1, #0
 80028ce:	0159      	lsls	r1, r3, #5
 80028d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028d4:	0150      	lsls	r0, r2, #5
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4621      	mov	r1, r4
 80028dc:	1a51      	subs	r1, r2, r1
 80028de:	62b9      	str	r1, [r7, #40]	@ 0x28
 80028e0:	4629      	mov	r1, r5
 80028e2:	eb63 0301 	sbc.w	r3, r3, r1
 80028e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80028f4:	4649      	mov	r1, r9
 80028f6:	018b      	lsls	r3, r1, #6
 80028f8:	4641      	mov	r1, r8
 80028fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028fe:	4641      	mov	r1, r8
 8002900:	018a      	lsls	r2, r1, #6
 8002902:	4641      	mov	r1, r8
 8002904:	ebb2 0a01 	subs.w	sl, r2, r1
 8002908:	4649      	mov	r1, r9
 800290a:	eb63 0b01 	sbc.w	fp, r3, r1
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800291a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800291e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002922:	4692      	mov	sl, r2
 8002924:	469b      	mov	fp, r3
 8002926:	4623      	mov	r3, r4
 8002928:	eb1a 0303 	adds.w	r3, sl, r3
 800292c:	623b      	str	r3, [r7, #32]
 800292e:	462b      	mov	r3, r5
 8002930:	eb4b 0303 	adc.w	r3, fp, r3
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002942:	4629      	mov	r1, r5
 8002944:	028b      	lsls	r3, r1, #10
 8002946:	4621      	mov	r1, r4
 8002948:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800294c:	4621      	mov	r1, r4
 800294e:	028a      	lsls	r2, r1, #10
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002958:	2200      	movs	r2, #0
 800295a:	673b      	str	r3, [r7, #112]	@ 0x70
 800295c:	677a      	str	r2, [r7, #116]	@ 0x74
 800295e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002962:	f7fd fc4f 	bl	8000204 <__aeabi_uldivmod>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4613      	mov	r3, r2
 800296c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002970:	4b41      	ldr	r3, [pc, #260]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x354>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	0c1b      	lsrs	r3, r3, #16
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	3301      	adds	r3, #1
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002982:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002986:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800298a:	fbb2 f3f3 	udiv	r3, r2, r3
 800298e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002992:	e0eb      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002994:	4b38      	ldr	r3, [pc, #224]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x354>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800299c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029a0:	4b35      	ldr	r3, [pc, #212]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x354>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d06b      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ac:	4b32      	ldr	r3, [pc, #200]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x354>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	099b      	lsrs	r3, r3, #6
 80029b2:	2200      	movs	r2, #0
 80029b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80029b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029be:	663b      	str	r3, [r7, #96]	@ 0x60
 80029c0:	2300      	movs	r3, #0
 80029c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80029c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80029c8:	4622      	mov	r2, r4
 80029ca:	462b      	mov	r3, r5
 80029cc:	f04f 0000 	mov.w	r0, #0
 80029d0:	f04f 0100 	mov.w	r1, #0
 80029d4:	0159      	lsls	r1, r3, #5
 80029d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029da:	0150      	lsls	r0, r2, #5
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4621      	mov	r1, r4
 80029e2:	1a51      	subs	r1, r2, r1
 80029e4:	61b9      	str	r1, [r7, #24]
 80029e6:	4629      	mov	r1, r5
 80029e8:	eb63 0301 	sbc.w	r3, r3, r1
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80029fa:	4659      	mov	r1, fp
 80029fc:	018b      	lsls	r3, r1, #6
 80029fe:	4651      	mov	r1, sl
 8002a00:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a04:	4651      	mov	r1, sl
 8002a06:	018a      	lsls	r2, r1, #6
 8002a08:	4651      	mov	r1, sl
 8002a0a:	ebb2 0801 	subs.w	r8, r2, r1
 8002a0e:	4659      	mov	r1, fp
 8002a10:	eb63 0901 	sbc.w	r9, r3, r1
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a20:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a24:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a28:	4690      	mov	r8, r2
 8002a2a:	4699      	mov	r9, r3
 8002a2c:	4623      	mov	r3, r4
 8002a2e:	eb18 0303 	adds.w	r3, r8, r3
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	462b      	mov	r3, r5
 8002a36:	eb49 0303 	adc.w	r3, r9, r3
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a48:	4629      	mov	r1, r5
 8002a4a:	024b      	lsls	r3, r1, #9
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a52:	4621      	mov	r1, r4
 8002a54:	024a      	lsls	r2, r1, #9
 8002a56:	4610      	mov	r0, r2
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a5e:	2200      	movs	r2, #0
 8002a60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a62:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002a64:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a68:	f7fd fbcc 	bl	8000204 <__aeabi_uldivmod>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4613      	mov	r3, r2
 8002a72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a76:	e065      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x420>
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	00f42400 	.word	0x00f42400
 8002a80:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a84:	4b3d      	ldr	r3, [pc, #244]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x458>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	099b      	lsrs	r3, r3, #6
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	4611      	mov	r1, r2
 8002a90:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a94:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a96:	2300      	movs	r3, #0
 8002a98:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a9a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002a9e:	4642      	mov	r2, r8
 8002aa0:	464b      	mov	r3, r9
 8002aa2:	f04f 0000 	mov.w	r0, #0
 8002aa6:	f04f 0100 	mov.w	r1, #0
 8002aaa:	0159      	lsls	r1, r3, #5
 8002aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ab0:	0150      	lsls	r0, r2, #5
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4641      	mov	r1, r8
 8002ab8:	1a51      	subs	r1, r2, r1
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	4649      	mov	r1, r9
 8002abe:	eb63 0301 	sbc.w	r3, r3, r1
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ad0:	4659      	mov	r1, fp
 8002ad2:	018b      	lsls	r3, r1, #6
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ada:	4651      	mov	r1, sl
 8002adc:	018a      	lsls	r2, r1, #6
 8002ade:	4651      	mov	r1, sl
 8002ae0:	1a54      	subs	r4, r2, r1
 8002ae2:	4659      	mov	r1, fp
 8002ae4:	eb63 0501 	sbc.w	r5, r3, r1
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	f04f 0300 	mov.w	r3, #0
 8002af0:	00eb      	lsls	r3, r5, #3
 8002af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002af6:	00e2      	lsls	r2, r4, #3
 8002af8:	4614      	mov	r4, r2
 8002afa:	461d      	mov	r5, r3
 8002afc:	4643      	mov	r3, r8
 8002afe:	18e3      	adds	r3, r4, r3
 8002b00:	603b      	str	r3, [r7, #0]
 8002b02:	464b      	mov	r3, r9
 8002b04:	eb45 0303 	adc.w	r3, r5, r3
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b16:	4629      	mov	r1, r5
 8002b18:	028b      	lsls	r3, r1, #10
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b20:	4621      	mov	r1, r4
 8002b22:	028a      	lsls	r2, r1, #10
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b30:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002b32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b36:	f7fd fb65 	bl	8000204 <__aeabi_uldivmod>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4613      	mov	r3, r2
 8002b40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b44:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x458>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	0f1b      	lsrs	r3, r3, #28
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002b52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b62:	e003      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b64:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002b66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	37b8      	adds	r7, #184	@ 0xb8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	00f42400 	.word	0x00f42400

08002b84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e28d      	b.n	80030b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8083 	beq.w	8002caa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ba4:	4b94      	ldr	r3, [pc, #592]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d019      	beq.n	8002be4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002bb0:	4b91      	ldr	r3, [pc, #580]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
        || \
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002bbc:	4b8e      	ldr	r3, [pc, #568]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bc8:	d00c      	beq.n	8002be4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bca:	4b8b      	ldr	r3, [pc, #556]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002bd2:	2b0c      	cmp	r3, #12
 8002bd4:	d112      	bne.n	8002bfc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd6:	4b88      	ldr	r3, [pc, #544]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002be2:	d10b      	bne.n	8002bfc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	4b84      	ldr	r3, [pc, #528]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d05b      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x124>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d157      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e25a      	b.n	80030b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c04:	d106      	bne.n	8002c14 <HAL_RCC_OscConfig+0x90>
 8002c06:	4b7c      	ldr	r3, [pc, #496]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a7b      	ldr	r2, [pc, #492]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e01d      	b.n	8002c50 <HAL_RCC_OscConfig+0xcc>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0xb4>
 8002c1e:	4b76      	ldr	r3, [pc, #472]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a75      	ldr	r2, [pc, #468]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b73      	ldr	r3, [pc, #460]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a72      	ldr	r2, [pc, #456]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e00b      	b.n	8002c50 <HAL_RCC_OscConfig+0xcc>
 8002c38:	4b6f      	ldr	r3, [pc, #444]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a6e      	ldr	r2, [pc, #440]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b6c      	ldr	r3, [pc, #432]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a6b      	ldr	r2, [pc, #428]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d013      	beq.n	8002c80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe fa8a 	bl	8001170 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c60:	f7fe fa86 	bl	8001170 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	@ 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e21f      	b.n	80030b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b61      	ldr	r3, [pc, #388]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0xdc>
 8002c7e:	e014      	b.n	8002caa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe fa76 	bl	8001170 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7fe fa72 	bl	8001170 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	@ 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e20b      	b.n	80030b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9a:	4b57      	ldr	r3, [pc, #348]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x104>
 8002ca6:	e000      	b.n	8002caa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d06f      	beq.n	8002d96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cb6:	4b50      	ldr	r3, [pc, #320]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d017      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002cc2:	4b4d      	ldr	r3, [pc, #308]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
        || \
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d105      	bne.n	8002cda <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002cce:	4b4a      	ldr	r3, [pc, #296]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00b      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cda:	4b47      	ldr	r3, [pc, #284]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	d11c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ce6:	4b44      	ldr	r3, [pc, #272]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d116      	bne.n	8002d20 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf2:	4b41      	ldr	r3, [pc, #260]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <HAL_RCC_OscConfig+0x186>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e1d3      	b.n	80030b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4937      	ldr	r1, [pc, #220]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1e:	e03a      	b.n	8002d96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d020      	beq.n	8002d6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d28:	4b34      	ldr	r3, [pc, #208]	@ (8002dfc <HAL_RCC_OscConfig+0x278>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2e:	f7fe fa1f 	bl	8001170 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d36:	f7fe fa1b 	bl	8001170 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e1b4      	b.n	80030b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d48:	4b2b      	ldr	r3, [pc, #172]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d54:	4b28      	ldr	r3, [pc, #160]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4925      	ldr	r1, [pc, #148]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]
 8002d68:	e015      	b.n	8002d96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6a:	4b24      	ldr	r3, [pc, #144]	@ (8002dfc <HAL_RCC_OscConfig+0x278>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fe f9fe 	bl	8001170 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d78:	f7fe f9fa 	bl	8001170 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e193      	b.n	80030b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d036      	beq.n	8002e10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d016      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002daa:	4b15      	ldr	r3, [pc, #84]	@ (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7fe f9de 	bl	8001170 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db8:	f7fe f9da 	bl	8001170 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e173      	b.n	80030b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dca:	4b0b      	ldr	r3, [pc, #44]	@ (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCC_OscConfig+0x234>
 8002dd6:	e01b      	b.n	8002e10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd8:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <HAL_RCC_OscConfig+0x27c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dde:	f7fe f9c7 	bl	8001170 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de4:	e00e      	b.n	8002e04 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de6:	f7fe f9c3 	bl	8001170 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d907      	bls.n	8002e04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e15c      	b.n	80030b2 <HAL_RCC_OscConfig+0x52e>
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	42470000 	.word	0x42470000
 8002e00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e04:	4b8a      	ldr	r3, [pc, #552]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ea      	bne.n	8002de6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8097 	beq.w	8002f4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e22:	4b83      	ldr	r3, [pc, #524]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10f      	bne.n	8002e4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	4b7f      	ldr	r3, [pc, #508]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e36:	4a7e      	ldr	r2, [pc, #504]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e3e:	4b7c      	ldr	r3, [pc, #496]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4e:	4b79      	ldr	r3, [pc, #484]	@ (8003034 <HAL_RCC_OscConfig+0x4b0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d118      	bne.n	8002e8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e5a:	4b76      	ldr	r3, [pc, #472]	@ (8003034 <HAL_RCC_OscConfig+0x4b0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a75      	ldr	r2, [pc, #468]	@ (8003034 <HAL_RCC_OscConfig+0x4b0>)
 8002e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e66:	f7fe f983 	bl	8001170 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6e:	f7fe f97f 	bl	8001170 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e118      	b.n	80030b2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e80:	4b6c      	ldr	r3, [pc, #432]	@ (8003034 <HAL_RCC_OscConfig+0x4b0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d106      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x31e>
 8002e94:	4b66      	ldr	r3, [pc, #408]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e98:	4a65      	ldr	r2, [pc, #404]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea0:	e01c      	b.n	8002edc <HAL_RCC_OscConfig+0x358>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b05      	cmp	r3, #5
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x340>
 8002eaa:	4b61      	ldr	r3, [pc, #388]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eae:	4a60      	ldr	r2, [pc, #384]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002eb0:	f043 0304 	orr.w	r3, r3, #4
 8002eb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eb6:	4b5e      	ldr	r3, [pc, #376]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eba:	4a5d      	ldr	r2, [pc, #372]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec2:	e00b      	b.n	8002edc <HAL_RCC_OscConfig+0x358>
 8002ec4:	4b5a      	ldr	r3, [pc, #360]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec8:	4a59      	ldr	r2, [pc, #356]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed0:	4b57      	ldr	r3, [pc, #348]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed4:	4a56      	ldr	r2, [pc, #344]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002ed6:	f023 0304 	bic.w	r3, r3, #4
 8002eda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d015      	beq.n	8002f10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fe f944 	bl	8001170 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eea:	e00a      	b.n	8002f02 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eec:	f7fe f940 	bl	8001170 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e0d7      	b.n	80030b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f02:	4b4b      	ldr	r3, [pc, #300]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0ee      	beq.n	8002eec <HAL_RCC_OscConfig+0x368>
 8002f0e:	e014      	b.n	8002f3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f10:	f7fe f92e 	bl	8001170 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f18:	f7fe f92a 	bl	8001170 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e0c1      	b.n	80030b2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2e:	4b40      	ldr	r3, [pc, #256]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1ee      	bne.n	8002f18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f3a:	7dfb      	ldrb	r3, [r7, #23]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d105      	bne.n	8002f4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f40:	4b3b      	ldr	r3, [pc, #236]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f44:	4a3a      	ldr	r2, [pc, #232]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002f46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80ad 	beq.w	80030b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f56:	4b36      	ldr	r3, [pc, #216]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d060      	beq.n	8003024 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d145      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6a:	4b33      	ldr	r3, [pc, #204]	@ (8003038 <HAL_RCC_OscConfig+0x4b4>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fe f8fe 	bl	8001170 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f78:	f7fe f8fa 	bl	8001170 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e093      	b.n	80030b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8a:	4b29      	ldr	r3, [pc, #164]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69da      	ldr	r2, [r3, #28]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa4:	019b      	lsls	r3, r3, #6
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fac:	085b      	lsrs	r3, r3, #1
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	041b      	lsls	r3, r3, #16
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb8:	061b      	lsls	r3, r3, #24
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc0:	071b      	lsls	r3, r3, #28
 8002fc2:	491b      	ldr	r1, [pc, #108]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003038 <HAL_RCC_OscConfig+0x4b4>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fce:	f7fe f8cf 	bl	8001170 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd6:	f7fe f8cb 	bl	8001170 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e064      	b.n	80030b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe8:	4b11      	ldr	r3, [pc, #68]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x452>
 8002ff4:	e05c      	b.n	80030b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff6:	4b10      	ldr	r3, [pc, #64]	@ (8003038 <HAL_RCC_OscConfig+0x4b4>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fe f8b8 	bl	8001170 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe f8b4 	bl	8001170 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e04d      	b.n	80030b2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003016:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <HAL_RCC_OscConfig+0x4ac>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x480>
 8003022:	e045      	b.n	80030b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d107      	bne.n	800303c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e040      	b.n	80030b2 <HAL_RCC_OscConfig+0x52e>
 8003030:	40023800 	.word	0x40023800
 8003034:	40007000 	.word	0x40007000
 8003038:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800303c:	4b1f      	ldr	r3, [pc, #124]	@ (80030bc <HAL_RCC_OscConfig+0x538>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d030      	beq.n	80030ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d129      	bne.n	80030ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d122      	bne.n	80030ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800306c:	4013      	ands	r3, r2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003072:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003074:	4293      	cmp	r3, r2
 8003076:	d119      	bne.n	80030ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	3b01      	subs	r3, #1
 8003086:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d10f      	bne.n	80030ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003096:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d107      	bne.n	80030ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800

080030c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e042      	b.n	8003158 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fd fcb6 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2224      	movs	r2, #36	@ 0x24
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003102:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f82b 	bl	8003160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003118:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003128:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003138:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003164:	b0c0      	sub	sp, #256	@ 0x100
 8003166:	af00      	add	r7, sp, #0
 8003168:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800317c:	68d9      	ldr	r1, [r3, #12]
 800317e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	ea40 0301 	orr.w	r3, r0, r1
 8003188:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800318a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	431a      	orrs	r2, r3
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	431a      	orrs	r2, r3
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031b8:	f021 010c 	bic.w	r1, r1, #12
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031c6:	430b      	orrs	r3, r1
 80031c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031da:	6999      	ldr	r1, [r3, #24]
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	ea40 0301 	orr.w	r3, r0, r1
 80031e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b8f      	ldr	r3, [pc, #572]	@ (800342c <UART_SetConfig+0x2cc>)
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d005      	beq.n	8003200 <UART_SetConfig+0xa0>
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003430 <UART_SetConfig+0x2d0>)
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d104      	bne.n	800320a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003200:	f7ff fa7c 	bl	80026fc <HAL_RCC_GetPCLK2Freq>
 8003204:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003208:	e003      	b.n	8003212 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800320a:	f7ff fa63 	bl	80026d4 <HAL_RCC_GetPCLK1Freq>
 800320e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800321c:	f040 810c 	bne.w	8003438 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003224:	2200      	movs	r2, #0
 8003226:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800322a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800322e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003232:	4622      	mov	r2, r4
 8003234:	462b      	mov	r3, r5
 8003236:	1891      	adds	r1, r2, r2
 8003238:	65b9      	str	r1, [r7, #88]	@ 0x58
 800323a:	415b      	adcs	r3, r3
 800323c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800323e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003242:	4621      	mov	r1, r4
 8003244:	eb12 0801 	adds.w	r8, r2, r1
 8003248:	4629      	mov	r1, r5
 800324a:	eb43 0901 	adc.w	r9, r3, r1
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800325a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800325e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003262:	4690      	mov	r8, r2
 8003264:	4699      	mov	r9, r3
 8003266:	4623      	mov	r3, r4
 8003268:	eb18 0303 	adds.w	r3, r8, r3
 800326c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003270:	462b      	mov	r3, r5
 8003272:	eb49 0303 	adc.w	r3, r9, r3
 8003276:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003286:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800328a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800328e:	460b      	mov	r3, r1
 8003290:	18db      	adds	r3, r3, r3
 8003292:	653b      	str	r3, [r7, #80]	@ 0x50
 8003294:	4613      	mov	r3, r2
 8003296:	eb42 0303 	adc.w	r3, r2, r3
 800329a:	657b      	str	r3, [r7, #84]	@ 0x54
 800329c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032a4:	f7fc ffae 	bl	8000204 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4b61      	ldr	r3, [pc, #388]	@ (8003434 <UART_SetConfig+0x2d4>)
 80032ae:	fba3 2302 	umull	r2, r3, r3, r2
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	011c      	lsls	r4, r3, #4
 80032b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032c8:	4642      	mov	r2, r8
 80032ca:	464b      	mov	r3, r9
 80032cc:	1891      	adds	r1, r2, r2
 80032ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032d0:	415b      	adcs	r3, r3
 80032d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032d8:	4641      	mov	r1, r8
 80032da:	eb12 0a01 	adds.w	sl, r2, r1
 80032de:	4649      	mov	r1, r9
 80032e0:	eb43 0b01 	adc.w	fp, r3, r1
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032f8:	4692      	mov	sl, r2
 80032fa:	469b      	mov	fp, r3
 80032fc:	4643      	mov	r3, r8
 80032fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003302:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003306:	464b      	mov	r3, r9
 8003308:	eb4b 0303 	adc.w	r3, fp, r3
 800330c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800331c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003320:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003324:	460b      	mov	r3, r1
 8003326:	18db      	adds	r3, r3, r3
 8003328:	643b      	str	r3, [r7, #64]	@ 0x40
 800332a:	4613      	mov	r3, r2
 800332c:	eb42 0303 	adc.w	r3, r2, r3
 8003330:	647b      	str	r3, [r7, #68]	@ 0x44
 8003332:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003336:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800333a:	f7fc ff63 	bl	8000204 <__aeabi_uldivmod>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4611      	mov	r1, r2
 8003344:	4b3b      	ldr	r3, [pc, #236]	@ (8003434 <UART_SetConfig+0x2d4>)
 8003346:	fba3 2301 	umull	r2, r3, r3, r1
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	2264      	movs	r2, #100	@ 0x64
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	1acb      	subs	r3, r1, r3
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800335a:	4b36      	ldr	r3, [pc, #216]	@ (8003434 <UART_SetConfig+0x2d4>)
 800335c:	fba3 2302 	umull	r2, r3, r3, r2
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003368:	441c      	add	r4, r3
 800336a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800336e:	2200      	movs	r2, #0
 8003370:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003374:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003378:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800337c:	4642      	mov	r2, r8
 800337e:	464b      	mov	r3, r9
 8003380:	1891      	adds	r1, r2, r2
 8003382:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003384:	415b      	adcs	r3, r3
 8003386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003388:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800338c:	4641      	mov	r1, r8
 800338e:	1851      	adds	r1, r2, r1
 8003390:	6339      	str	r1, [r7, #48]	@ 0x30
 8003392:	4649      	mov	r1, r9
 8003394:	414b      	adcs	r3, r1
 8003396:	637b      	str	r3, [r7, #52]	@ 0x34
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033a4:	4659      	mov	r1, fp
 80033a6:	00cb      	lsls	r3, r1, #3
 80033a8:	4651      	mov	r1, sl
 80033aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ae:	4651      	mov	r1, sl
 80033b0:	00ca      	lsls	r2, r1, #3
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	4603      	mov	r3, r0
 80033b8:	4642      	mov	r2, r8
 80033ba:	189b      	adds	r3, r3, r2
 80033bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033c0:	464b      	mov	r3, r9
 80033c2:	460a      	mov	r2, r1
 80033c4:	eb42 0303 	adc.w	r3, r2, r3
 80033c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033e0:	460b      	mov	r3, r1
 80033e2:	18db      	adds	r3, r3, r3
 80033e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033e6:	4613      	mov	r3, r2
 80033e8:	eb42 0303 	adc.w	r3, r2, r3
 80033ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033f6:	f7fc ff05 	bl	8000204 <__aeabi_uldivmod>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <UART_SetConfig+0x2d4>)
 8003400:	fba3 1302 	umull	r1, r3, r3, r2
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	2164      	movs	r1, #100	@ 0x64
 8003408:	fb01 f303 	mul.w	r3, r1, r3
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	3332      	adds	r3, #50	@ 0x32
 8003412:	4a08      	ldr	r2, [pc, #32]	@ (8003434 <UART_SetConfig+0x2d4>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	f003 0207 	and.w	r2, r3, #7
 800341e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4422      	add	r2, r4
 8003426:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003428:	e106      	b.n	8003638 <UART_SetConfig+0x4d8>
 800342a:	bf00      	nop
 800342c:	40011000 	.word	0x40011000
 8003430:	40011400 	.word	0x40011400
 8003434:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800343c:	2200      	movs	r2, #0
 800343e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003442:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003446:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800344a:	4642      	mov	r2, r8
 800344c:	464b      	mov	r3, r9
 800344e:	1891      	adds	r1, r2, r2
 8003450:	6239      	str	r1, [r7, #32]
 8003452:	415b      	adcs	r3, r3
 8003454:	627b      	str	r3, [r7, #36]	@ 0x24
 8003456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800345a:	4641      	mov	r1, r8
 800345c:	1854      	adds	r4, r2, r1
 800345e:	4649      	mov	r1, r9
 8003460:	eb43 0501 	adc.w	r5, r3, r1
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	00eb      	lsls	r3, r5, #3
 800346e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003472:	00e2      	lsls	r2, r4, #3
 8003474:	4614      	mov	r4, r2
 8003476:	461d      	mov	r5, r3
 8003478:	4643      	mov	r3, r8
 800347a:	18e3      	adds	r3, r4, r3
 800347c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003480:	464b      	mov	r3, r9
 8003482:	eb45 0303 	adc.w	r3, r5, r3
 8003486:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003496:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034a6:	4629      	mov	r1, r5
 80034a8:	008b      	lsls	r3, r1, #2
 80034aa:	4621      	mov	r1, r4
 80034ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034b0:	4621      	mov	r1, r4
 80034b2:	008a      	lsls	r2, r1, #2
 80034b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034b8:	f7fc fea4 	bl	8000204 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4b60      	ldr	r3, [pc, #384]	@ (8003644 <UART_SetConfig+0x4e4>)
 80034c2:	fba3 2302 	umull	r2, r3, r3, r2
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	011c      	lsls	r4, r3, #4
 80034ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034dc:	4642      	mov	r2, r8
 80034de:	464b      	mov	r3, r9
 80034e0:	1891      	adds	r1, r2, r2
 80034e2:	61b9      	str	r1, [r7, #24]
 80034e4:	415b      	adcs	r3, r3
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ec:	4641      	mov	r1, r8
 80034ee:	1851      	adds	r1, r2, r1
 80034f0:	6139      	str	r1, [r7, #16]
 80034f2:	4649      	mov	r1, r9
 80034f4:	414b      	adcs	r3, r1
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003504:	4659      	mov	r1, fp
 8003506:	00cb      	lsls	r3, r1, #3
 8003508:	4651      	mov	r1, sl
 800350a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800350e:	4651      	mov	r1, sl
 8003510:	00ca      	lsls	r2, r1, #3
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	4603      	mov	r3, r0
 8003518:	4642      	mov	r2, r8
 800351a:	189b      	adds	r3, r3, r2
 800351c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003520:	464b      	mov	r3, r9
 8003522:	460a      	mov	r2, r1
 8003524:	eb42 0303 	adc.w	r3, r2, r3
 8003528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003536:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003544:	4649      	mov	r1, r9
 8003546:	008b      	lsls	r3, r1, #2
 8003548:	4641      	mov	r1, r8
 800354a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800354e:	4641      	mov	r1, r8
 8003550:	008a      	lsls	r2, r1, #2
 8003552:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003556:	f7fc fe55 	bl	8000204 <__aeabi_uldivmod>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4611      	mov	r1, r2
 8003560:	4b38      	ldr	r3, [pc, #224]	@ (8003644 <UART_SetConfig+0x4e4>)
 8003562:	fba3 2301 	umull	r2, r3, r3, r1
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	2264      	movs	r2, #100	@ 0x64
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	1acb      	subs	r3, r1, r3
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	3332      	adds	r3, #50	@ 0x32
 8003574:	4a33      	ldr	r2, [pc, #204]	@ (8003644 <UART_SetConfig+0x4e4>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003580:	441c      	add	r4, r3
 8003582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003586:	2200      	movs	r2, #0
 8003588:	673b      	str	r3, [r7, #112]	@ 0x70
 800358a:	677a      	str	r2, [r7, #116]	@ 0x74
 800358c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003590:	4642      	mov	r2, r8
 8003592:	464b      	mov	r3, r9
 8003594:	1891      	adds	r1, r2, r2
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	415b      	adcs	r3, r3
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035a0:	4641      	mov	r1, r8
 80035a2:	1851      	adds	r1, r2, r1
 80035a4:	6039      	str	r1, [r7, #0]
 80035a6:	4649      	mov	r1, r9
 80035a8:	414b      	adcs	r3, r1
 80035aa:	607b      	str	r3, [r7, #4]
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035b8:	4659      	mov	r1, fp
 80035ba:	00cb      	lsls	r3, r1, #3
 80035bc:	4651      	mov	r1, sl
 80035be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035c2:	4651      	mov	r1, sl
 80035c4:	00ca      	lsls	r2, r1, #3
 80035c6:	4610      	mov	r0, r2
 80035c8:	4619      	mov	r1, r3
 80035ca:	4603      	mov	r3, r0
 80035cc:	4642      	mov	r2, r8
 80035ce:	189b      	adds	r3, r3, r2
 80035d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035d2:	464b      	mov	r3, r9
 80035d4:	460a      	mov	r2, r1
 80035d6:	eb42 0303 	adc.w	r3, r2, r3
 80035da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80035e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035f4:	4649      	mov	r1, r9
 80035f6:	008b      	lsls	r3, r1, #2
 80035f8:	4641      	mov	r1, r8
 80035fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035fe:	4641      	mov	r1, r8
 8003600:	008a      	lsls	r2, r1, #2
 8003602:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003606:	f7fc fdfd 	bl	8000204 <__aeabi_uldivmod>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4b0d      	ldr	r3, [pc, #52]	@ (8003644 <UART_SetConfig+0x4e4>)
 8003610:	fba3 1302 	umull	r1, r3, r3, r2
 8003614:	095b      	lsrs	r3, r3, #5
 8003616:	2164      	movs	r1, #100	@ 0x64
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	3332      	adds	r3, #50	@ 0x32
 8003622:	4a08      	ldr	r2, [pc, #32]	@ (8003644 <UART_SetConfig+0x4e4>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	f003 020f 	and.w	r2, r3, #15
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4422      	add	r2, r4
 8003636:	609a      	str	r2, [r3, #8]
}
 8003638:	bf00      	nop
 800363a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800363e:	46bd      	mov	sp, r7
 8003640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003644:	51eb851f 	.word	0x51eb851f

08003648 <memset>:
 8003648:	4402      	add	r2, r0
 800364a:	4603      	mov	r3, r0
 800364c:	4293      	cmp	r3, r2
 800364e:	d100      	bne.n	8003652 <memset+0xa>
 8003650:	4770      	bx	lr
 8003652:	f803 1b01 	strb.w	r1, [r3], #1
 8003656:	e7f9      	b.n	800364c <memset+0x4>

08003658 <__libc_init_array>:
 8003658:	b570      	push	{r4, r5, r6, lr}
 800365a:	4d0d      	ldr	r5, [pc, #52]	@ (8003690 <__libc_init_array+0x38>)
 800365c:	4c0d      	ldr	r4, [pc, #52]	@ (8003694 <__libc_init_array+0x3c>)
 800365e:	1b64      	subs	r4, r4, r5
 8003660:	10a4      	asrs	r4, r4, #2
 8003662:	2600      	movs	r6, #0
 8003664:	42a6      	cmp	r6, r4
 8003666:	d109      	bne.n	800367c <__libc_init_array+0x24>
 8003668:	4d0b      	ldr	r5, [pc, #44]	@ (8003698 <__libc_init_array+0x40>)
 800366a:	4c0c      	ldr	r4, [pc, #48]	@ (800369c <__libc_init_array+0x44>)
 800366c:	f000 f818 	bl	80036a0 <_init>
 8003670:	1b64      	subs	r4, r4, r5
 8003672:	10a4      	asrs	r4, r4, #2
 8003674:	2600      	movs	r6, #0
 8003676:	42a6      	cmp	r6, r4
 8003678:	d105      	bne.n	8003686 <__libc_init_array+0x2e>
 800367a:	bd70      	pop	{r4, r5, r6, pc}
 800367c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003680:	4798      	blx	r3
 8003682:	3601      	adds	r6, #1
 8003684:	e7ee      	b.n	8003664 <__libc_init_array+0xc>
 8003686:	f855 3b04 	ldr.w	r3, [r5], #4
 800368a:	4798      	blx	r3
 800368c:	3601      	adds	r6, #1
 800368e:	e7f2      	b.n	8003676 <__libc_init_array+0x1e>
 8003690:	080036d8 	.word	0x080036d8
 8003694:	080036d8 	.word	0x080036d8
 8003698:	080036d8 	.word	0x080036d8
 800369c:	080036dc 	.word	0x080036dc

080036a0 <_init>:
 80036a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a2:	bf00      	nop
 80036a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036a6:	bc08      	pop	{r3}
 80036a8:	469e      	mov	lr, r3
 80036aa:	4770      	bx	lr

080036ac <_fini>:
 80036ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ae:	bf00      	nop
 80036b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b2:	bc08      	pop	{r3}
 80036b4:	469e      	mov	lr, r3
 80036b6:	4770      	bx	lr
